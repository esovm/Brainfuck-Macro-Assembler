# ASCII Mandelbrot attempt
# inspired by C code at https://stackoverflow.com/questions/16124127/improvement-to-my-mandelbrot-set-code
#(begin include)../include/macro.inc
# Common macros
# scope variables
#(js) var __scope; var __idx;
#(js) __scope=[0]; __idx = 0;


# macro scope_begin : start a new scope for local variable (usage of macro lvar)

# macro scope_end : end a scope , then drop scoped local variables (drop) (usage of lvar)

# macro lvar(vname,value) : declare  in scope, a local variable named vname with an assigned value (stored in stack)

# macro if_diff(a,b) : if (a != b) {

# macro if_equal(a,b) : if (a == b) {

# macro if_sup(a,b) : if (a > b) {

# macro if_inf(a,b) : if (a < b) {

# macro if_supequal(a,b) : if (a >= b) {

# macro if_infequal(a,b) : if (a <= b) {

# macro at_2

# macro at_1

# macro at_reset(a) : a=0

# macro at_inc(a) : a++

# macro at_dec(a) : a--

# macro at_in(a)  : a= readchar()

# macro at_out(a) : write(a)

# macro at_add(a,b) : a += b (immediate)

# macro at_sub(a,b) : a -= b (immediate)

# macro at_set(a,b) : a = b (immediate)





# macro popouthexa() : from head of stack value (from 0 to 15) write out hexa (from 0 to 9 and A to F)

# macro popout8hexa() : from head of stack the 8 bit value is write out in hexa

# macro print(aString) : print out a string
#(end include)../include/macro.inc
#(begin include)../include/fpnumber.inc
# fix point number
#(begin include)signedX.inc
# X bytes : X*8 bits signed integer : 

# macro varX(name) :declare global X * 8 bits

# macro lvarX(X,name) : declare local X * 8 bits

# macro fixsvX(X,name) : be sure that name is positive if equal to zero

# macro pushvX(X,name) : push X*8 bits name on stack

# macro pushX(X,immValue) : push immediate X*8 bits value on the stack

# macro dupX(X) : duplicate X * 8 bits value on stack

# macro pushsvX(X,name) : push the sign of the X*8 bits variable 'name'

# macro pushcvX(X,name) : push the carry of the X*8 bits variable 'name'

# macro popvX(X,name) : pop the stack to the X*8 bits variable 'name'

# macro popsvX(X,name) : pop the sign(8 bits 0/1) to the X*8 bits variable 'name'

# macro popcvX(X,name) : pop the carry(8 bit 0/1) to the X*8 bits variable 'name'

# macro negvX(X,name) : name = -name

# macro absvX(X,name) : name = abs(name)

# macro absX(X) : X*8 bits head of stack = abs(X*8 bits head of stack)

# macro negX(X) : X*8 bits head of stack = - (X*8 bits head of stack)    

# macro setcX(X) : set 1 to X*8 bits head of stack carry

# macro setcvX(X,name) : set 1 to X*8 bits variable 'name' carry

# macro clearcX(X) : set 0 to 8*X bits head of stack carry

# macro clearcvX(X,name) : set 0 to X*8 bits variable 'name' carry

# macro dropX(X) : drop 8*X bits value from stack

# macro resetX(X) : reset X*8 bits value of the head of stack

# macro resetvX(X,name) : reset X*8 bits variable 'name'

# macro setX(X,immValue) : set X*8 bits value on the head of stack

# macro setvX(X,name, immValue) : set X*8 bits immediate value to a X*8 bits variable 'name' 

# macro fixsvX(X,name) : be sure to have sign to zero if X*8bits variable 'name' is zero

# macro fixsX(X) : be sure to have sign to zero if X*8 bits head of stack value is zero

# macro boolX(X) : same as 'bool' but with a X*8 bits value on stack

# macro boolvX(X,name) : push on stack the bool(name) X*8 bits 

# macro incvX(X,name) : name = name +1 (X*8 bits)

# macro incX(X) : X*8 bits head of stack value incremented

# macro decvX(X,name) : name-- (X*8 bits)

# macro decX(X) : X*8 bits head of stack value decrement

# macro addviX(X,name, immValue) : name += immediate value

# macro addi16(immValue) : 16 bits head of stack value += immediate value

# macro subviX(X,name, immValue) : name -= immediate value

# macro subiX(X,immValue) : X*8 bits head of stack value -= immediate value

# macro addvvvX(X,name, nameA, nameB) : name = nameA + nameB

# macro addvvX(X,name, nameA) : name += nameA

# macro addvX(X,nameA) : head stack += nameA

# macro addX(X) : stack-1 = stack-1 + stack ; stack--



# macro subvvvX(X,name, nameA, nameB) : name = nameA - nameB

# macro subvvX(X,name, nameA) : name -= nameA 

# macro subvX(X,nameA) : head stack -= nameA

# macro subX(X) : stack-1 = stack-1 - stack ; stack--

# macro mulvvvX(X,name, nameA, nameB) : name = nameA * nameB 

# macro mulvvX(X,name, nameA) : name *= nameA

# macro mulvX(X,name) : head of stack *= name

# macro mulX(X) : stack-1 = stack-1 * stack : stack--

# macro equalvvX(X,nameA, nameB) : push 1 if NameA == NameB , push 0 otherwise

# macro equalX(X) : same as "equal" but with X*8 bits value in stack

# macro diffvvX(X,nameA, nameB) : push 1 if Name != NameB , push 0 otherwise

# macro diffX(X) : same as "diff" but with X*8 bits value in stack

# macro supequalvvX(X,nameA, nameB) : push 1 if nameA >= nameB push 0 otherwise

# macro supequalX(X) : push 1 if stack-1 >= stack , push 0 otherwise : after dropped 2 X*8 bits value from stack

# macro infvvX(X,nameA, nameB) : push 1 if nameA < nameB push 0 otherwise

# macro infX(X) : push 1 if stack-1 < stack, push 0 otherwise : after dropped 2 X*8 bits value from stack

# macro infequalvvX(X,nameA, nameB) : push 1 if nameA <= nameB push 0 otherwise

# macro infequalX(X) : push 1 if stack-1 <= stack, push 0 otherwise : after dropped 2 X*8 bits value from stack 

# macro supvvX(X,nameA , nameB) : push 1 if nameA > nameB push 0 otherwise

# macro supX(X) : push 1 if stack-1 > stack, push 0 otherwise : after dropped 2 X*8 bits value from stack

# macro divvvvvX(X,nameAdivB, nameAmodB, nameA, nameB) : nameAdivB = nameA div nameB ; nameAmodB = nameA mod nameB

# macro divvvX(X,nameA, nameB) : Push 2 X*8 bits values  : stack-1 = nameA mod nameB ; stack = nameA div nameB 

# macro divX(X) : stack-1 == A , stack == B ; stack-1 = A mod B , stack = A div B


# macro castX(X1,X2) : transform stack X1*8 bits value to X2*8 bits value

# macro sbmX2(X,name,backward,offset) : sbm a X*8 bit head of stack - (backward X*8 bits value+ offset)

# macro sbmX(X,name,backward) : sbm a X*8 bit head of stack - (backward X*8 bits value)


# upcast macro






# downcast macro








# macro writeX(X,name) : print out the decimal value (signed)

# macro printhexaX(X,name) : print the X*8 bit variable in hexadecimal


#(js) var _sv1; var _sv2; var _sv3; var _sv4; var _sv5; var _sv6; var _sv7; var _sv8; var _sv9;
#(js) _sv1 = 0; _sv2=0; _sv3 = 0; _sv4 = 0; _sv5 = 0; _sv6 = 0; _sv7 = 0; _sv8 = 0; _sv9 = 0;

# declare temporary 16 bits value used for signed16.inc macros
#(end include)signedX.inc

# macro add 2 fixed point number (I+P)*8 bits in stack

# macro sub 2 fixed point number (I+P)*8 bits in stack



# macro setFP(I,P,immValue) : set fixed point head of stack I,P (I+P)*8 bits with immediate value 

# macro pushFP(I,P,immValue) : push immediate fixed point number onto the stack 

# macro castFP(I1,P1,I2,P2) : transform head of Stack Fixed point number I1,P1 (I1+P1* 8 bits) into a Fixed point number I2,P2 (I2+P2*8 bits)

# macro integerFP(I,P) : transform head of stack fixed point number I,P (I+P)*8 bits , into a signed integer I*8bits



# macro mul 2 fixed point number (I+P)*8 bits in stack

#(js) var _fp1; var _fp2;
#(js) _fp1 = 0; _fp2 = 0;
#(end include)../include/fpnumber.inc


# 8.16 fixed number
    ## 8 = 1*8 bits
    ## 16 = 2*8 bits
# FP_I + FP_P
    ## 1+2 = 3 : 24 bits

#(begin macro)varX(FP,"pr")  # pixel real
#(js) for (var xx=0 ; xx < X ; xx++) {
    var pr_0    # 0 byte of pr
#(js) }
    var pr_1    # 1 byte of pr
#(js) }
    var pr_2    # 2 byte of pr
#(js) }
    var pr_s    # Sign of pr
    var pr_c    # carry of pr 
#(end macro)varX(FP,"pr")  # pixel real
#(begin macro)varX(FP,"pi")  # pixel imaginary
#(js) for (var xx=0 ; xx < X ; xx++) {
    var pi_0    # 0 byte of pi
#(js) }
    var pi_1    # 1 byte of pi
#(js) }
    var pi_2    # 2 byte of pi
#(js) }
    var pi_s    # Sign of pi
    var pi_c    # carry of pi 
#(end macro)varX(FP,"pi")  # pixel imaginary
#(begin macro)varX(FP,"x")    # screen coordinate horizontal
#(js) for (var xx=0 ; xx < X ; xx++) {
    var x_0    # 0 byte of x
#(js) }
    var x_1    # 1 byte of x
#(js) }
    var x_2    # 2 byte of x
#(js) }
    var x_s    # Sign of x
    var x_c    # carry of x 
#(end macro)varX(FP,"x")    # screen coordinate horizontal
#(begin macro)varX(FP,"y")    # screen coordinate vertical
#(js) for (var xx=0 ; xx < X ; xx++) {
    var y_0    # 0 byte of y
#(js) }
    var y_1    # 1 byte of y
#(js) }
    var y_2    # 2 byte of y
#(js) }
    var y_s    # Sign of y
    var y_c    # carry of y 
#(end macro)varX(FP,"y")    # screen coordinate vertical
#(begin macro)varX(FP,"newRe")
#(js) for (var xx=0 ; xx < X ; xx++) {
    var newRe_0    # 0 byte of newRe
#(js) }
    var newRe_1    # 1 byte of newRe
#(js) }
    var newRe_2    # 2 byte of newRe
#(js) }
    var newRe_s    # Sign of newRe
    var newRe_c    # carry of newRe 
#(end macro)varX(FP,"newRe")
#(begin macro)varX(FP,"newIm")
#(js) for (var xx=0 ; xx < X ; xx++) {
    var newIm_0    # 0 byte of newIm
#(js) }
    var newIm_1    # 1 byte of newIm
#(js) }
    var newIm_2    # 2 byte of newIm
#(js) }
    var newIm_s    # Sign of newIm
    var newIm_c    # carry of newIm 
#(end macro)varX(FP,"newIm")
#(begin macro)varX(FP,"oldRe")
#(js) for (var xx=0 ; xx < X ; xx++) {
    var oldRe_0    # 0 byte of oldRe
#(js) }
    var oldRe_1    # 1 byte of oldRe
#(js) }
    var oldRe_2    # 2 byte of oldRe
#(js) }
    var oldRe_s    # Sign of oldRe
    var oldRe_c    # carry of oldRe 
#(end macro)varX(FP,"oldRe")
#(begin macro)varX(FP,"oldIm")
#(js) for (var xx=0 ; xx < X ; xx++) {
    var oldIm_0    # 0 byte of oldIm
#(js) }
    var oldIm_1    # 1 byte of oldIm
#(js) }
    var oldIm_2    # 2 byte of oldIm
#(js) }
    var oldIm_s    # Sign of oldIm
    var oldIm_c    # carry of oldIm 
#(end macro)varX(FP,"oldIm")
# varX(FP,"ONE")
var     i

#(begin macro)declareTmpX(FP)
#(js) var _xbits; _xbits = X * 8;
#(js) var _nDecimal ; _nDecimal = ("" + (Math.pow(2,8*X)-1)).length;
#(begin macro)    varX(X, "__tmp" + _xbits + "__" )
#(js) for (var xx=0 ; xx < X ; xx++) {
    var __tmp24___0    # 0 byte of __tmp24__
#(js) }
    var __tmp24___1    # 1 byte of __tmp24__
#(js) }
    var __tmp24___2    # 2 byte of __tmp24__
#(js) }
    var __tmp24___s    # Sign of __tmp24__
    var __tmp24___c    # carry of __tmp24__ 
#(end macro)    varX(X, "__tmp" + _xbits + "__" )
#(begin macro)    varX(X, "__tmp" + _xbits + "a__" )
#(js) for (var xx=0 ; xx < X ; xx++) {
    var __tmp24a___0    # 0 byte of __tmp24a__
#(js) }
    var __tmp24a___1    # 1 byte of __tmp24a__
#(js) }
    var __tmp24a___2    # 2 byte of __tmp24a__
#(js) }
    var __tmp24a___s    # Sign of __tmp24a__
    var __tmp24a___c    # carry of __tmp24a__ 
#(end macro)    varX(X, "__tmp" + _xbits + "a__" )
#(begin macro)    varX(X, "__tmp" + _xbits + "b__" )
#(js) for (var xx=0 ; xx < X ; xx++) {
    var __tmp24b___0    # 0 byte of __tmp24b__
#(js) }
    var __tmp24b___1    # 1 byte of __tmp24b__
#(js) }
    var __tmp24b___2    # 2 byte of __tmp24b__
#(js) }
    var __tmp24b___s    # Sign of __tmp24b__
    var __tmp24b___c    # carry of __tmp24b__ 
#(end macro)    varX(X, "__tmp" + _xbits + "b__" )
#(begin macro)    varX(X, "__tmp" + _xbits + "c__" )
#(js) for (var xx=0 ; xx < X ; xx++) {
    var __tmp24c___0    # 0 byte of __tmp24c__
#(js) }
    var __tmp24c___1    # 1 byte of __tmp24c__
#(js) }
    var __tmp24c___2    # 2 byte of __tmp24c__
#(js) }
    var __tmp24c___s    # Sign of __tmp24c__
    var __tmp24c___c    # carry of __tmp24c__ 
#(end macro)    varX(X, "__tmp" + _xbits + "c__" )
#(begin macro)    varX(X, "__tmp" + _xbits + "d__" )
#(js) for (var xx=0 ; xx < X ; xx++) {
    var __tmp24d___0    # 0 byte of __tmp24d__
#(js) }
    var __tmp24d___1    # 1 byte of __tmp24d__
#(js) }
    var __tmp24d___2    # 2 byte of __tmp24d__
#(js) }
    var __tmp24d___s    # Sign of __tmp24d__
    var __tmp24d___c    # carry of __tmp24d__ 
#(end macro)    varX(X, "__tmp" + _xbits + "d__" )
    var  _stringDecimal24_*8
#(end macro)declareTmpX(FP)
#(begin macro)declareTmpX(FP*2)
#(js) var _xbits; _xbits = X * 8;
#(js) var _nDecimal ; _nDecimal = ("" + (Math.pow(2,8*X)-1)).length;
#(begin macro)    varX(X, "__tmp" + _xbits + "__" )
#(js) for (var xx=0 ; xx < X ; xx++) {
    var __tmp48___0    # 0 byte of __tmp48__
#(js) }
    var __tmp48___1    # 1 byte of __tmp48__
#(js) }
    var __tmp48___2    # 2 byte of __tmp48__
#(js) }
    var __tmp48___3    # 3 byte of __tmp48__
#(js) }
    var __tmp48___4    # 4 byte of __tmp48__
#(js) }
    var __tmp48___5    # 5 byte of __tmp48__
#(js) }
    var __tmp48___s    # Sign of __tmp48__
    var __tmp48___c    # carry of __tmp48__ 
#(end macro)    varX(X, "__tmp" + _xbits + "__" )
#(begin macro)    varX(X, "__tmp" + _xbits + "a__" )
#(js) for (var xx=0 ; xx < X ; xx++) {
    var __tmp48a___0    # 0 byte of __tmp48a__
#(js) }
    var __tmp48a___1    # 1 byte of __tmp48a__
#(js) }
    var __tmp48a___2    # 2 byte of __tmp48a__
#(js) }
    var __tmp48a___3    # 3 byte of __tmp48a__
#(js) }
    var __tmp48a___4    # 4 byte of __tmp48a__
#(js) }
    var __tmp48a___5    # 5 byte of __tmp48a__
#(js) }
    var __tmp48a___s    # Sign of __tmp48a__
    var __tmp48a___c    # carry of __tmp48a__ 
#(end macro)    varX(X, "__tmp" + _xbits + "a__" )
#(begin macro)    varX(X, "__tmp" + _xbits + "b__" )
#(js) for (var xx=0 ; xx < X ; xx++) {
    var __tmp48b___0    # 0 byte of __tmp48b__
#(js) }
    var __tmp48b___1    # 1 byte of __tmp48b__
#(js) }
    var __tmp48b___2    # 2 byte of __tmp48b__
#(js) }
    var __tmp48b___3    # 3 byte of __tmp48b__
#(js) }
    var __tmp48b___4    # 4 byte of __tmp48b__
#(js) }
    var __tmp48b___5    # 5 byte of __tmp48b__
#(js) }
    var __tmp48b___s    # Sign of __tmp48b__
    var __tmp48b___c    # carry of __tmp48b__ 
#(end macro)    varX(X, "__tmp" + _xbits + "b__" )
#(begin macro)    varX(X, "__tmp" + _xbits + "c__" )
#(js) for (var xx=0 ; xx < X ; xx++) {
    var __tmp48c___0    # 0 byte of __tmp48c__
#(js) }
    var __tmp48c___1    # 1 byte of __tmp48c__
#(js) }
    var __tmp48c___2    # 2 byte of __tmp48c__
#(js) }
    var __tmp48c___3    # 3 byte of __tmp48c__
#(js) }
    var __tmp48c___4    # 4 byte of __tmp48c__
#(js) }
    var __tmp48c___5    # 5 byte of __tmp48c__
#(js) }
    var __tmp48c___s    # Sign of __tmp48c__
    var __tmp48c___c    # carry of __tmp48c__ 
#(end macro)    varX(X, "__tmp" + _xbits + "c__" )
#(begin macro)    varX(X, "__tmp" + _xbits + "d__" )
#(js) for (var xx=0 ; xx < X ; xx++) {
    var __tmp48d___0    # 0 byte of __tmp48d__
#(js) }
    var __tmp48d___1    # 1 byte of __tmp48d__
#(js) }
    var __tmp48d___2    # 2 byte of __tmp48d__
#(js) }
    var __tmp48d___3    # 3 byte of __tmp48d__
#(js) }
    var __tmp48d___4    # 4 byte of __tmp48d__
#(js) }
    var __tmp48d___5    # 5 byte of __tmp48d__
#(js) }
    var __tmp48d___s    # Sign of __tmp48d__
    var __tmp48d___c    # carry of __tmp48d__ 
#(end macro)    varX(X, "__tmp" + _xbits + "d__" )
    var  _stringDecimal48_*15
#(end macro)declareTmpX(FP*2)

# pushFP(FP_I,FP_P,1)
# popvX(FP,"ONE")          # ONE = 1.0

push    40
loop
    push    80
    loop
        # pr = 1.5 *(x - halfW) * oneOnHalfZoomW + moveX
#(begin macro)        pushFP(FP_I,FP_P,1.5)
#(begin macro)    pushX(I*1+P*1,0)
    push    0
    push    0
#(js) var absImmValue; absImmValue = immValue>=0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(end macro)    pushX(I*1+P*1,0)
#(begin macro)    setFP(I*1,P*1,immValue) 
#(js) _sv8++; 
#(js) var IP; IP = I+P;
#(js) var _sign = immValue >=0?0:1;
#(js) var _abs = immValue>=0?immValue:-immValue;
#(js) var _int; _int = _abs | 0;
#(js) var _fra; _fra = ((_abs - _int) * Math.pow(256,P)) | 0;
#(js) var _fp; _fp = _int * Math.pow(256,P) + _fra; if (_sign ==1) _fp = -_fp;
#(begin macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _instack1_0 - 0
#(js) }
    sbm _instack1_1 - 1
#(js) }
    sbm _instack1_2 - 2
#(js) }
    sbm _instack1_s - 3
    sbm _instack1_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    setvX(IP,"_instack"+_sv8, _fp)
    at _instack1_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    128
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(IP,"_instack"+_sv8, _fp)
#(end macro)    setFP(I*1,P*1,immValue) 
#(end macro)        pushFP(FP_I,FP_P,1.5)
#(begin macro)        pushvX(FP,"x")
    push    x_c
    push    x_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    x_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    x_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    x_0
#(js) }
#(end macro)        pushvX(FP,"x")
#(begin macro)        pushFP(FP_I,FP_P, halfW)
#(begin macro)    pushX(I*1+P*1,0)
    push    0
    push    0
#(js) var absImmValue; absImmValue = immValue>=0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(end macro)    pushX(I*1+P*1,0)
#(begin macro)    setFP(I*1,P*1,immValue) 
#(js) _sv8++; 
#(js) var IP; IP = I+P;
#(js) var _sign = immValue >=0?0:1;
#(js) var _abs = immValue>=0?immValue:-immValue;
#(js) var _int; _int = _abs | 0;
#(js) var _fra; _fra = ((_abs - _int) * Math.pow(256,P)) | 0;
#(js) var _fp; _fp = _int * Math.pow(256,P) + _fra; if (_sign ==1) _fp = -_fp;
#(begin macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _instack2_0 - 0
#(js) }
    sbm _instack2_1 - 1
#(js) }
    sbm _instack2_2 - 2
#(js) }
    sbm _instack2_s - 3
    sbm _instack2_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    setvX(IP,"_instack"+_sv8, _fp)
    at _instack2_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    40
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(IP,"_instack"+_sv8, _fp)
#(end macro)    setFP(I*1,P*1,immValue) 
#(end macro)        pushFP(FP_I,FP_P, halfW)
#(begin macro)        subX(FP)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "b__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24b___0
#(js) }
    pop     __tmp24b___1
#(js) }
    pop     __tmp24b___2
#(js) }
    pop     __tmp24b___s
    pop     __tmp24b___c
#(end macro)    popvX(X,"__tmp" + _xbits + "b__")
#(begin macro)    popvX(X,"__tmp" + _xbits + "a__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24a___0
#(js) }
    pop     __tmp24a___1
#(js) }
    pop     __tmp24a___2
#(js) }
    pop     __tmp24a___s
    pop     __tmp24a___c
#(end macro)    popvX(X,"__tmp" + _xbits + "a__")
#(begin macro)    subvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(js) _sv4++;
#(begin macro)    pushvX(X,nameA)
    push    __tmp24a___c
    push    __tmp24a___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24c___0
#(js) }
    pop     __tmp24c___1
#(js) }
    pop     __tmp24c___2
#(js) }
    pop     __tmp24c___s
    pop     __tmp24c___c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"subvvvXgX_" + _sv4)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm subvvvXgX_1_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm subvvvXgX_1_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_1_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_1_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_1_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"subvvvXgX_" + _sv4)
#(begin macro)        pushvX(X,nameB)
    push    __tmp24b___c
    push    __tmp24b___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"subvvvXgX_" + _sv4)
#(js) for (var xx=0; xx < X; xx++) {
    pop     subvvvXgX_1_0
#(js) }
    pop     subvvvXgX_1_1
#(js) }
    pop     subvvvXgX_1_2
#(js) }
    pop     subvvvXgX_1_s
    pop     subvvvXgX_1_c
#(end macro)        popvX(X,"subvvvXgX_" + _sv4)
        push 0
#(begin macro)        popsvX(X,"subvvvXgX_" + _sv4) # absolute number (always positive)
    POP    subvvvXgX_1_s
#(end macro)        popsvX(X,"subvvvXgX_" + _sv4) # absolute number (always positive)
        
        push    __tmp24b___s
        if    # nameB is negative 
            push    1
            sbm subvvvX_loop1
            while
#(begin macro)                pushvX(X,"subvvvXgX_"+ _sv4)
    push    subvvvXgX_1_c
    push    subvvvXgX_1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_1_0
#(js) }
#(end macro)                pushvX(X,"subvvvXgX_"+ _sv4)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push subvvvXgX_1_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_1_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_1_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_1_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at subvvvXgX_1_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_1_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_1_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_1_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at subvvvXgX_1_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push __tmp24c___s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    __tmp24c___s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("subvvvX_loop"+_sv4)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvX_loop1
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("subvvvX_loop"+_sv4)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm subvvvX_loop1
            while
#(begin macro)                pushvX(X,"subvvvXgX_"+ _sv4)
    push    subvvvXgX_1_c
    push    subvvvXgX_1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_1_0
#(js) }
#(end macro)                pushvX(X,"subvvvXgX_"+ _sv4)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push subvvvXgX_1_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_1_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_1_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_1_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at subvvvXgX_1_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_1_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_1_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_1_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_1_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at subvvvXgX_1_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)                    decvX(X, name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push __tmp24c___s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X, name)
                else
#(begin macro)                    at_reset("subvvvX_loop"+_sv4)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvX_loop1
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("subvvvX_loop"+_sv4)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    subvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(begin macro)    pushvX(X,"__tmp" + _xbits + "c__")
    push    __tmp24c___c
    push    __tmp24c___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___0
#(js) }
#(end macro)    pushvX(X,"__tmp" + _xbits + "c__")
#(end macro)        subX(FP)
#(begin macro)        mulFP(FP_I,FP_P)
#(js) _fp1++;
#(js) var IP ; IP = (I+P); 
#(js) var IP2 ; IP2 = 2 * IP;
#(begin macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameB1_0 - 0
#(js) }
    sbm nameB1_1 - 1
#(js) }
    sbm nameB1_2 - 2
#(js) }
    sbm nameB1_s - 3
    sbm nameB1_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameA1_0 - 5
#(js) }
    sbm nameA1_1 - 6
#(js) }
    sbm nameA1_2 - 7
#(js) }
    sbm nameA1_s - 8
    sbm nameA1_c - 9
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameAX1_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameAX1_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX1_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX1_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX1_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX1_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX1_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX1_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameBX1_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameBX1_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX1_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX1_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX1_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX1_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX1_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX1_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)        lvarX(IP2, "resultX" + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm resultX1_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm resultX1_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX1_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX1_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX1_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX1_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX1_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX1_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "resultX" + _fp1)
        
        # upcast nameA to nameAX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameA"+_fp1)
    push    nameA1_c
    push    nameA1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA1_0
#(js) }
#(end macro)        pushvX(IP,"nameA"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput1_0 - 0
#(js) }
    sbm _castXInput1_1 - 1
#(js) }
    sbm _castXInput1_2 - 2
#(js) }
    sbm _castXInput1_s - 3
    sbm _castXInput1_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput1_0    # 0 byte of _castXoutput1
#(js) }
    var _castXoutput1_1    # 1 byte of _castXoutput1
#(js) }
    var _castXoutput1_2    # 2 byte of _castXoutput1
#(js) }
    var _castXoutput1_3    # 3 byte of _castXoutput1
#(js) }
    var _castXoutput1_4    # 4 byte of _castXoutput1
#(js) }
    var _castXoutput1_5    # 5 byte of _castXoutput1
#(js) }
    var _castXoutput1_s    # Sign of _castXoutput1
    var _castXoutput1_c    # carry of _castXoutput1 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori1_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori1_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori1_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori1_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori1_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest1_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest1_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest1_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest1_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest1_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest1_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest1_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest1_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput1_c
    push    _castXInput1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput1_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori1_0
#(js) }
    pop     ori1_1
#(js) }
    pop     ori1_2
#(js) }
    pop     ori1_s
    pop     ori1_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori1_s   
        pop     dest1_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori1_0
                pop     dest1_0
#(js) }
                push    ori1_1
                pop     dest1_1
#(js) }
                push    ori1_2
                pop     dest1_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest1_3
#(js) } 
                push    0
                pop     dest1_4
#(js) } 
                push    0
                pop     dest1_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest1_c
    push    dest1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest1_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest1_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest1_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest1_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput1_0
#(js) }
    pop     _castXoutput1_1
#(js) }
    pop     _castXoutput1_2
#(js) }
    pop     _castXoutput1_3
#(js) }
    pop     _castXoutput1_4
#(js) }
    pop     _castXoutput1_5
#(js) }
    pop     _castXoutput1_s
    pop     _castXoutput1_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput1_c
    push    _castXoutput1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput1_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput1_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput1_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput1_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameAX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameAX1_0
#(js) }
    pop     nameAX1_1
#(js) }
    pop     nameAX1_2
#(js) }
    pop     nameAX1_3
#(js) }
    pop     nameAX1_4
#(js) }
    pop     nameAX1_5
#(js) }
    pop     nameAX1_s
    pop     nameAX1_c
#(end macro)        popvX(IP2,"nameAX"+_fp1)

        # upcast nameB to nameBX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameB"+_fp1)
    push    nameB1_c
    push    nameB1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB1_0
#(js) }
#(end macro)        pushvX(IP,"nameB"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput2_0 - 0
#(js) }
    sbm _castXInput2_1 - 1
#(js) }
    sbm _castXInput2_2 - 2
#(js) }
    sbm _castXInput2_s - 3
    sbm _castXInput2_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput2_0    # 0 byte of _castXoutput2
#(js) }
    var _castXoutput2_1    # 1 byte of _castXoutput2
#(js) }
    var _castXoutput2_2    # 2 byte of _castXoutput2
#(js) }
    var _castXoutput2_3    # 3 byte of _castXoutput2
#(js) }
    var _castXoutput2_4    # 4 byte of _castXoutput2
#(js) }
    var _castXoutput2_5    # 5 byte of _castXoutput2
#(js) }
    var _castXoutput2_s    # Sign of _castXoutput2
    var _castXoutput2_c    # carry of _castXoutput2 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori2_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori2_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori2_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori2_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori2_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest2_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest2_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest2_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest2_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest2_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest2_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest2_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest2_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput2_c
    push    _castXInput2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput2_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori2_0
#(js) }
    pop     ori2_1
#(js) }
    pop     ori2_2
#(js) }
    pop     ori2_s
    pop     ori2_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori2_s   
        pop     dest2_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori2_0
                pop     dest2_0
#(js) }
                push    ori2_1
                pop     dest2_1
#(js) }
                push    ori2_2
                pop     dest2_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest2_3
#(js) } 
                push    0
                pop     dest2_4
#(js) } 
                push    0
                pop     dest2_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest2_c
    push    dest2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest2_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest2_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest2_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest2_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput2_0
#(js) }
    pop     _castXoutput2_1
#(js) }
    pop     _castXoutput2_2
#(js) }
    pop     _castXoutput2_3
#(js) }
    pop     _castXoutput2_4
#(js) }
    pop     _castXoutput2_5
#(js) }
    pop     _castXoutput2_s
    pop     _castXoutput2_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput2_c
    push    _castXoutput2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput2_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput2_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput2_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput2_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameBX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameBX1_0
#(js) }
    pop     nameBX1_1
#(js) }
    pop     nameBX1_2
#(js) }
    pop     nameBX1_3
#(js) }
    pop     nameBX1_4
#(js) }
    pop     nameBX1_5
#(js) }
    pop     nameBX1_s
    pop     nameBX1_c
#(end macro)        popvX(IP2,"nameBX"+_fp1)
        
#(begin macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
#(js) _sv5++;
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameA1_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameA1_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA1_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA1_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA1_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA1_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA1_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA1_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        pushvX(X,nameA)
    push    nameAX1_c
    push    nameAX1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX1_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX1_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX1_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX1_0
#(js) }
#(end macro)        pushvX(X,nameA)
#(begin macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameA1_0
#(js) }
    pop     mulvvvXabsNameA1_1
#(js) }
    pop     mulvvvXabsNameA1_2
#(js) }
    pop     mulvvvXabsNameA1_3
#(js) }
    pop     mulvvvXabsNameA1_4
#(js) }
    pop     mulvvvXabsNameA1_5
#(js) }
    pop     mulvvvXabsNameA1_s
    pop     mulvvvXabsNameA1_c
#(end macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        lvar("mulvvvXsA" + _sv5, 0)
    push 0
    sbm mulvvvXsA1
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsA" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
    push    mulvvvXabsNameA1_s
#(end macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
        pop mulvvvXsA1
#(begin macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
    push    0
    pop     mulvvvXabsNameA1_s
#(end macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
        
#(begin macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameB1_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameB1_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB1_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB1_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB1_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB1_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB1_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB1_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        pushvX(X,nameB)
    push    nameBX1_c
    push    nameBX1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX1_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX1_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX1_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX1_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameB1_0
#(js) }
    pop     mulvvvXabsNameB1_1
#(js) }
    pop     mulvvvXabsNameB1_2
#(js) }
    pop     mulvvvXabsNameB1_3
#(js) }
    pop     mulvvvXabsNameB1_4
#(js) }
    pop     mulvvvXabsNameB1_5
#(js) }
    pop     mulvvvXabsNameB1_s
    pop     mulvvvXabsNameB1_c
#(end macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        lvar("mulvvvXsB" + _sv5, 0)
    push 0
    sbm mulvvvXsB1
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsB" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
    push    mulvvvXabsNameB1_s
#(end macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
        pop mulvvvXsB1
#(begin macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
    push    0
    pop     mulvvvXabsNameB1_s
#(end macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
        
#(begin macro)        resetvX(X,name)
    at resultX1_0
#(begin macro)        resetX(X)
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf [-]
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
#(end macro)        resetX(X)
    ta
#(end macro)        resetvX(X,name)

        push    1
        sbm mulvvvX_loop1
        while
#(begin macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx = 0 ; xx < X; xx++) {
    push mulvvvXabsNameB1_0
    bool
#(js) }
    push mulvvvXabsNameB1_1
    bool
#(js) }
    push mulvvvXabsNameB1_2
    bool
#(js) }
    push mulvvvXabsNameB1_3
    bool
#(js) }
    push mulvvvXabsNameB1_4
    bool
#(js) }
    push mulvvvXabsNameB1_5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
            if  # absNameB is not zero
#(begin macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)    addvvvX(X,name, name, nameA)
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    resultX1_c
    push    resultX1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     resultX1_0
#(js) }
    pop     resultX1_1
#(js) }
    pop     resultX1_2
#(js) }
    pop     resultX1_3
#(js) }
    pop     resultX1_4
#(js) }
    pop     resultX1_5
#(js) }
    pop     resultX1_s
    pop     resultX1_c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_1_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_1_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_1_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_1_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_1_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_1_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_1_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_1_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    mulvvvXabsNameA1_c
    push    mulvvvXabsNameA1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA1_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA1_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA1_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA1_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_1_0
#(js) }
    pop     addvvvXgX_1_1
#(js) }
    pop     addvvvXgX_1_2
#(js) }
    pop     addvvvXgX_1_3
#(js) }
    pop     addvvvXgX_1_4
#(js) }
    pop     addvvvXgX_1_5
#(js) }
    pop     addvvvXgX_1_s
    pop     addvvvXgX_1_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_1_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    mulvvvXabsNameA1_s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop1
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_1_c
    push    addvvvXgX_1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_1_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_1_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_1_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push resultX1_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX1_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at resultX1_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop1
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop1
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_1_c
    push    addvvvXgX_1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_1_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_1_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_1_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_1_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_1_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_1_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_1_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push resultX1_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX1_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX1_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX1_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at resultX1_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    resultX1_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX1_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX1_1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX1_2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX1_3
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX1_4
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX1_5
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at resultX1_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop1
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,name, name, nameA)
#(end macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push mulvvvXabsNameB1_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB1_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB1_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB1_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB1_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB1_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB1_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at mulvvvXabsNameB1_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB1_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB1_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB1_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB1_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB1_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB1_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB1_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at mulvvvXabsNameB1_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
            else 
#(begin macro)                at_reset("mulvvvX_loop"+_sv5)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvX_loop1
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                at_reset("mulvvvX_loop"+_sv5)
            fi
        wend        
        # resolve sign
        push mulvvvXsA1
        push mulvvvXsB1
        diff    # if sign(nameA) <> sign(nameB) then name is negative
        if
#(begin macro)            at_set(name +"_s",1)
#(begin macro)    at_2("set",a,b)
    at resultX1_s
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)            at_set(name +"_s",1)
        fi        
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
        
#(begin macro)        pushvX(IP2,"resultX"+_fp1)
    push    resultX1_c
    push    resultX1_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX1_0
#(js) }
#(end macro)        pushvX(IP2,"resultX"+_fp1)
#(begin macro)        castFP(I+I,P+P, I,P)
#(js) _sv8++; 
#(js) var I1P1; I1P1 = I1+P1;
#(js) var I2P2; I2P2 = I2+P2;
#(begin macro)    varX(I1P1,"_instack" +_sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _instack3_0    # 0 byte of _instack3
#(js) }
    var _instack3_1    # 1 byte of _instack3
#(js) }
    var _instack3_2    # 2 byte of _instack3
#(js) }
    var _instack3_3    # 3 byte of _instack3
#(js) }
    var _instack3_4    # 4 byte of _instack3
#(js) }
    var _instack3_5    # 5 byte of _instack3
#(js) }
    var _instack3_s    # Sign of _instack3
    var _instack3_c    # carry of _instack3 
#(end macro)    varX(I1P1,"_instack" +_sv8)
#(begin macro)    varX(I2P2,"_outstack" + _sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _outstack3_0    # 0 byte of _outstack3
#(js) }
    var _outstack3_1    # 1 byte of _outstack3
#(js) }
    var _outstack3_2    # 2 byte of _outstack3
#(js) }
    var _outstack3_s    # Sign of _outstack3
    var _outstack3_c    # carry of _outstack3 
#(end macro)    varX(I2P2,"_outstack" + _sv8)
    
#(begin macro)    popvX(I1P1,"_instack" + _sv8)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _instack3_0
#(js) }
    pop     _instack3_1
#(js) }
    pop     _instack3_2
#(js) }
    pop     _instack3_3
#(js) }
    pop     _instack3_4
#(js) }
    pop     _instack3_5
#(js) }
    pop     _instack3_s
    pop     _instack3_c
#(end macro)    popvX(I1P1,"_instack" + _sv8)
    # reset outstack
#(begin macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    at _outstack3_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    # sign
    push _instack3_s
    pop _outstack3_s
    # integer part
#(js) if (I1 >= I2) {
#(js) for (var xx = 0 ; xx < I2; xx++) {
            push _instack3_4
            pop _outstack3_2
#(js) }
#(js) } else { // I1 < I2
    # fract part
#(js) if (P1 >= P2) {
#(js) for (var xx = 0 ; xx <P2; xx++) {
            push _instack3_3
            pop _outstack3_1
#(js) }
            push _instack3_2
            pop _outstack3_0
#(js) }
#(js) } else { // P1 < P2
#(begin macro)    pushvX(I2P2,"_outstack" + _sv8)
    push    _outstack3_c
    push    _outstack3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack3_0
#(js) }
#(end macro)    pushvX(I2P2,"_outstack" + _sv8)
#(end macro)        castFP(I+I,P+P, I,P)
#(begin macro)        popvX(IP,"nameA"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameA1_0
#(js) }
    pop     nameA1_1
#(js) }
    pop     nameA1_2
#(js) }
    pop     nameA1_s
    pop     nameA1_c
#(end macro)        popvX(IP,"nameA"+_fp1)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(IP) # drop nameB
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(IP) # drop nameB
#(end macro)        mulFP(FP_I,FP_P)
#(begin macro)        pushFP(FP_I,FP_P,oneOnHalfZoomW)
#(begin macro)    pushX(I*1+P*1,0)
    push    0
    push    0
#(js) var absImmValue; absImmValue = immValue>=0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(end macro)    pushX(I*1+P*1,0)
#(begin macro)    setFP(I*1,P*1,immValue) 
#(js) _sv8++; 
#(js) var IP; IP = I+P;
#(js) var _sign = immValue >=0?0:1;
#(js) var _abs = immValue>=0?immValue:-immValue;
#(js) var _int; _int = _abs | 0;
#(js) var _fra; _fra = ((_abs - _int) * Math.pow(256,P)) | 0;
#(js) var _fp; _fp = _int * Math.pow(256,P) + _fra; if (_sign ==1) _fp = -_fp;
#(begin macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _instack4_0 - 0
#(js) }
    sbm _instack4_1 - 1
#(js) }
    sbm _instack4_2 - 2
#(js) }
    sbm _instack4_s - 3
    sbm _instack4_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    setvX(IP,"_instack"+_sv8, _fp)
    at _instack4_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    160
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(IP,"_instack"+_sv8, _fp)
#(end macro)    setFP(I*1,P*1,immValue) 
#(end macro)        pushFP(FP_I,FP_P,oneOnHalfZoomW)
#(begin macro)        mulFP(FP_I,FP_P)
#(js) _fp1++;
#(js) var IP ; IP = (I+P); 
#(js) var IP2 ; IP2 = 2 * IP;
#(begin macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameB2_0 - 0
#(js) }
    sbm nameB2_1 - 1
#(js) }
    sbm nameB2_2 - 2
#(js) }
    sbm nameB2_s - 3
    sbm nameB2_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameA2_0 - 5
#(js) }
    sbm nameA2_1 - 6
#(js) }
    sbm nameA2_2 - 7
#(js) }
    sbm nameA2_s - 8
    sbm nameA2_c - 9
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameAX2_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameAX2_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX2_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX2_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX2_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX2_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX2_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX2_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameBX2_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameBX2_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX2_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX2_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX2_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX2_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX2_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX2_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)        lvarX(IP2, "resultX" + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm resultX2_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm resultX2_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX2_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX2_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX2_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX2_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX2_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX2_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "resultX" + _fp1)
        
        # upcast nameA to nameAX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameA"+_fp1)
    push    nameA2_c
    push    nameA2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA2_0
#(js) }
#(end macro)        pushvX(IP,"nameA"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput3_0 - 0
#(js) }
    sbm _castXInput3_1 - 1
#(js) }
    sbm _castXInput3_2 - 2
#(js) }
    sbm _castXInput3_s - 3
    sbm _castXInput3_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput3_0    # 0 byte of _castXoutput3
#(js) }
    var _castXoutput3_1    # 1 byte of _castXoutput3
#(js) }
    var _castXoutput3_2    # 2 byte of _castXoutput3
#(js) }
    var _castXoutput3_3    # 3 byte of _castXoutput3
#(js) }
    var _castXoutput3_4    # 4 byte of _castXoutput3
#(js) }
    var _castXoutput3_5    # 5 byte of _castXoutput3
#(js) }
    var _castXoutput3_s    # Sign of _castXoutput3
    var _castXoutput3_c    # carry of _castXoutput3 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori3_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori3_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori3_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori3_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori3_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest3_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest3_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest3_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest3_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest3_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest3_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest3_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest3_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput3_c
    push    _castXInput3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput3_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori3_0
#(js) }
    pop     ori3_1
#(js) }
    pop     ori3_2
#(js) }
    pop     ori3_s
    pop     ori3_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori3_s   
        pop     dest3_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori3_0
                pop     dest3_0
#(js) }
                push    ori3_1
                pop     dest3_1
#(js) }
                push    ori3_2
                pop     dest3_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest3_3
#(js) } 
                push    0
                pop     dest3_4
#(js) } 
                push    0
                pop     dest3_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest3_c
    push    dest3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest3_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest3_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest3_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest3_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput3_0
#(js) }
    pop     _castXoutput3_1
#(js) }
    pop     _castXoutput3_2
#(js) }
    pop     _castXoutput3_3
#(js) }
    pop     _castXoutput3_4
#(js) }
    pop     _castXoutput3_5
#(js) }
    pop     _castXoutput3_s
    pop     _castXoutput3_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput3_c
    push    _castXoutput3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput3_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput3_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput3_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput3_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameAX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameAX2_0
#(js) }
    pop     nameAX2_1
#(js) }
    pop     nameAX2_2
#(js) }
    pop     nameAX2_3
#(js) }
    pop     nameAX2_4
#(js) }
    pop     nameAX2_5
#(js) }
    pop     nameAX2_s
    pop     nameAX2_c
#(end macro)        popvX(IP2,"nameAX"+_fp1)

        # upcast nameB to nameBX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameB"+_fp1)
    push    nameB2_c
    push    nameB2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB2_0
#(js) }
#(end macro)        pushvX(IP,"nameB"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput4_0 - 0
#(js) }
    sbm _castXInput4_1 - 1
#(js) }
    sbm _castXInput4_2 - 2
#(js) }
    sbm _castXInput4_s - 3
    sbm _castXInput4_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput4_0    # 0 byte of _castXoutput4
#(js) }
    var _castXoutput4_1    # 1 byte of _castXoutput4
#(js) }
    var _castXoutput4_2    # 2 byte of _castXoutput4
#(js) }
    var _castXoutput4_3    # 3 byte of _castXoutput4
#(js) }
    var _castXoutput4_4    # 4 byte of _castXoutput4
#(js) }
    var _castXoutput4_5    # 5 byte of _castXoutput4
#(js) }
    var _castXoutput4_s    # Sign of _castXoutput4
    var _castXoutput4_c    # carry of _castXoutput4 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori4_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori4_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori4_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori4_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori4_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest4_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest4_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest4_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest4_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest4_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest4_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest4_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest4_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput4_c
    push    _castXInput4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput4_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori4_0
#(js) }
    pop     ori4_1
#(js) }
    pop     ori4_2
#(js) }
    pop     ori4_s
    pop     ori4_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori4_s   
        pop     dest4_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori4_0
                pop     dest4_0
#(js) }
                push    ori4_1
                pop     dest4_1
#(js) }
                push    ori4_2
                pop     dest4_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest4_3
#(js) } 
                push    0
                pop     dest4_4
#(js) } 
                push    0
                pop     dest4_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest4_c
    push    dest4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest4_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest4_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest4_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest4_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput4_0
#(js) }
    pop     _castXoutput4_1
#(js) }
    pop     _castXoutput4_2
#(js) }
    pop     _castXoutput4_3
#(js) }
    pop     _castXoutput4_4
#(js) }
    pop     _castXoutput4_5
#(js) }
    pop     _castXoutput4_s
    pop     _castXoutput4_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput4_c
    push    _castXoutput4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput4_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput4_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput4_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput4_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameBX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameBX2_0
#(js) }
    pop     nameBX2_1
#(js) }
    pop     nameBX2_2
#(js) }
    pop     nameBX2_3
#(js) }
    pop     nameBX2_4
#(js) }
    pop     nameBX2_5
#(js) }
    pop     nameBX2_s
    pop     nameBX2_c
#(end macro)        popvX(IP2,"nameBX"+_fp1)
        
#(begin macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
#(js) _sv5++;
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameA2_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameA2_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA2_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA2_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA2_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA2_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA2_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA2_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        pushvX(X,nameA)
    push    nameAX2_c
    push    nameAX2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX2_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX2_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX2_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX2_0
#(js) }
#(end macro)        pushvX(X,nameA)
#(begin macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameA2_0
#(js) }
    pop     mulvvvXabsNameA2_1
#(js) }
    pop     mulvvvXabsNameA2_2
#(js) }
    pop     mulvvvXabsNameA2_3
#(js) }
    pop     mulvvvXabsNameA2_4
#(js) }
    pop     mulvvvXabsNameA2_5
#(js) }
    pop     mulvvvXabsNameA2_s
    pop     mulvvvXabsNameA2_c
#(end macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        lvar("mulvvvXsA" + _sv5, 0)
    push 0
    sbm mulvvvXsA2
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsA" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
    push    mulvvvXabsNameA2_s
#(end macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
        pop mulvvvXsA2
#(begin macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
    push    0
    pop     mulvvvXabsNameA2_s
#(end macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
        
#(begin macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameB2_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameB2_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB2_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB2_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB2_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB2_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB2_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB2_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        pushvX(X,nameB)
    push    nameBX2_c
    push    nameBX2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX2_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX2_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX2_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX2_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameB2_0
#(js) }
    pop     mulvvvXabsNameB2_1
#(js) }
    pop     mulvvvXabsNameB2_2
#(js) }
    pop     mulvvvXabsNameB2_3
#(js) }
    pop     mulvvvXabsNameB2_4
#(js) }
    pop     mulvvvXabsNameB2_5
#(js) }
    pop     mulvvvXabsNameB2_s
    pop     mulvvvXabsNameB2_c
#(end macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        lvar("mulvvvXsB" + _sv5, 0)
    push 0
    sbm mulvvvXsB2
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsB" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
    push    mulvvvXabsNameB2_s
#(end macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
        pop mulvvvXsB2
#(begin macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
    push    0
    pop     mulvvvXabsNameB2_s
#(end macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
        
#(begin macro)        resetvX(X,name)
    at resultX2_0
#(begin macro)        resetX(X)
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf [-]
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
#(end macro)        resetX(X)
    ta
#(end macro)        resetvX(X,name)

        push    1
        sbm mulvvvX_loop2
        while
#(begin macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx = 0 ; xx < X; xx++) {
    push mulvvvXabsNameB2_0
    bool
#(js) }
    push mulvvvXabsNameB2_1
    bool
#(js) }
    push mulvvvXabsNameB2_2
    bool
#(js) }
    push mulvvvXabsNameB2_3
    bool
#(js) }
    push mulvvvXabsNameB2_4
    bool
#(js) }
    push mulvvvXabsNameB2_5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
            if  # absNameB is not zero
#(begin macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)    addvvvX(X,name, name, nameA)
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    resultX2_c
    push    resultX2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     resultX2_0
#(js) }
    pop     resultX2_1
#(js) }
    pop     resultX2_2
#(js) }
    pop     resultX2_3
#(js) }
    pop     resultX2_4
#(js) }
    pop     resultX2_5
#(js) }
    pop     resultX2_s
    pop     resultX2_c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_2_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_2_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_2_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_2_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_2_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_2_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_2_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_2_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    mulvvvXabsNameA2_c
    push    mulvvvXabsNameA2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA2_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA2_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA2_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA2_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_2_0
#(js) }
    pop     addvvvXgX_2_1
#(js) }
    pop     addvvvXgX_2_2
#(js) }
    pop     addvvvXgX_2_3
#(js) }
    pop     addvvvXgX_2_4
#(js) }
    pop     addvvvXgX_2_5
#(js) }
    pop     addvvvXgX_2_s
    pop     addvvvXgX_2_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_2_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    mulvvvXabsNameA2_s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop2
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_2_c
    push    addvvvXgX_2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_2_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_2_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_2_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push resultX2_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX2_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at resultX2_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop2
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop2
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_2_c
    push    addvvvXgX_2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_2_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_2_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_2_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_2_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_2_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_2_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_2_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push resultX2_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX2_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX2_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX2_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at resultX2_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    resultX2_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX2_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX2_1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX2_2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX2_3
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX2_4
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX2_5
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at resultX2_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop2
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,name, name, nameA)
#(end macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push mulvvvXabsNameB2_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB2_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB2_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB2_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB2_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB2_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB2_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at mulvvvXabsNameB2_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB2_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB2_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB2_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB2_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB2_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB2_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB2_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at mulvvvXabsNameB2_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
            else 
#(begin macro)                at_reset("mulvvvX_loop"+_sv5)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvX_loop2
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                at_reset("mulvvvX_loop"+_sv5)
            fi
        wend        
        # resolve sign
        push mulvvvXsA2
        push mulvvvXsB2
        diff    # if sign(nameA) <> sign(nameB) then name is negative
        if
#(begin macro)            at_set(name +"_s",1)
#(begin macro)    at_2("set",a,b)
    at resultX2_s
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)            at_set(name +"_s",1)
        fi        
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
        
#(begin macro)        pushvX(IP2,"resultX"+_fp1)
    push    resultX2_c
    push    resultX2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX2_0
#(js) }
#(end macro)        pushvX(IP2,"resultX"+_fp1)
#(begin macro)        castFP(I+I,P+P, I,P)
#(js) _sv8++; 
#(js) var I1P1; I1P1 = I1+P1;
#(js) var I2P2; I2P2 = I2+P2;
#(begin macro)    varX(I1P1,"_instack" +_sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _instack5_0    # 0 byte of _instack5
#(js) }
    var _instack5_1    # 1 byte of _instack5
#(js) }
    var _instack5_2    # 2 byte of _instack5
#(js) }
    var _instack5_3    # 3 byte of _instack5
#(js) }
    var _instack5_4    # 4 byte of _instack5
#(js) }
    var _instack5_5    # 5 byte of _instack5
#(js) }
    var _instack5_s    # Sign of _instack5
    var _instack5_c    # carry of _instack5 
#(end macro)    varX(I1P1,"_instack" +_sv8)
#(begin macro)    varX(I2P2,"_outstack" + _sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _outstack5_0    # 0 byte of _outstack5
#(js) }
    var _outstack5_1    # 1 byte of _outstack5
#(js) }
    var _outstack5_2    # 2 byte of _outstack5
#(js) }
    var _outstack5_s    # Sign of _outstack5
    var _outstack5_c    # carry of _outstack5 
#(end macro)    varX(I2P2,"_outstack" + _sv8)
    
#(begin macro)    popvX(I1P1,"_instack" + _sv8)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _instack5_0
#(js) }
    pop     _instack5_1
#(js) }
    pop     _instack5_2
#(js) }
    pop     _instack5_3
#(js) }
    pop     _instack5_4
#(js) }
    pop     _instack5_5
#(js) }
    pop     _instack5_s
    pop     _instack5_c
#(end macro)    popvX(I1P1,"_instack" + _sv8)
    # reset outstack
#(begin macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    at _outstack5_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    # sign
    push _instack5_s
    pop _outstack5_s
    # integer part
#(js) if (I1 >= I2) {
#(js) for (var xx = 0 ; xx < I2; xx++) {
            push _instack5_4
            pop _outstack5_2
#(js) }
#(js) } else { // I1 < I2
    # fract part
#(js) if (P1 >= P2) {
#(js) for (var xx = 0 ; xx <P2; xx++) {
            push _instack5_3
            pop _outstack5_1
#(js) }
            push _instack5_2
            pop _outstack5_0
#(js) }
#(js) } else { // P1 < P2
#(begin macro)    pushvX(I2P2,"_outstack" + _sv8)
    push    _outstack5_c
    push    _outstack5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack5_0
#(js) }
#(end macro)    pushvX(I2P2,"_outstack" + _sv8)
#(end macro)        castFP(I+I,P+P, I,P)
#(begin macro)        popvX(IP,"nameA"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameA2_0
#(js) }
    pop     nameA2_1
#(js) }
    pop     nameA2_2
#(js) }
    pop     nameA2_s
    pop     nameA2_c
#(end macro)        popvX(IP,"nameA"+_fp1)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(IP) # drop nameB
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(IP) # drop nameB
#(end macro)        mulFP(FP_I,FP_P)
#(begin macro)        pushFP(FP_I,FP_P,moveX)
#(begin macro)    pushX(I*1+P*1,0)
    push    0
    push    0
#(js) var absImmValue; absImmValue = immValue>=0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(end macro)    pushX(I*1+P*1,0)
#(begin macro)    setFP(I*1,P*1,immValue) 
#(js) _sv8++; 
#(js) var IP; IP = I+P;
#(js) var _sign = immValue >=0?0:1;
#(js) var _abs = immValue>=0?immValue:-immValue;
#(js) var _int; _int = _abs | 0;
#(js) var _fra; _fra = ((_abs - _int) * Math.pow(256,P)) | 0;
#(js) var _fp; _fp = _int * Math.pow(256,P) + _fra; if (_sign ==1) _fp = -_fp;
#(begin macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _instack6_0 - 0
#(js) }
    sbm _instack6_1 - 1
#(js) }
    sbm _instack6_2 - 2
#(js) }
    sbm _instack6_s - 3
    sbm _instack6_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    setvX(IP,"_instack"+_sv8, _fp)
    at _instack6_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    128
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(IP,"_instack"+_sv8, _fp)
#(end macro)    setFP(I*1,P*1,immValue) 
#(end macro)        pushFP(FP_I,FP_P,moveX)
#(begin macro)        addX(FP)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "b__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24b___0
#(js) }
    pop     __tmp24b___1
#(js) }
    pop     __tmp24b___2
#(js) }
    pop     __tmp24b___s
    pop     __tmp24b___c
#(end macro)    popvX(X,"__tmp" + _xbits + "b__")
#(begin macro)    popvX(X,"__tmp" + _xbits + "a__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24a___0
#(js) }
    pop     __tmp24a___1
#(js) }
    pop     __tmp24a___2
#(js) }
    pop     __tmp24a___s
    pop     __tmp24a___c
#(end macro)    popvX(X,"__tmp" + _xbits + "a__")
#(begin macro)    addvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    __tmp24a___c
    push    __tmp24a___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24c___0
#(js) }
    pop     __tmp24c___1
#(js) }
    pop     __tmp24c___2
#(js) }
    pop     __tmp24c___s
    pop     __tmp24c___c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_3_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_3_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_3_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_3_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_3_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    __tmp24b___c
    push    __tmp24b___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_3_0
#(js) }
    pop     addvvvXgX_3_1
#(js) }
    pop     addvvvXgX_3_2
#(js) }
    pop     addvvvXgX_3_s
    pop     addvvvXgX_3_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_3_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    __tmp24b___s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop3
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_3_c
    push    addvvvXgX_3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_3_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_3_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_3_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_3_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_3_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_3_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_3_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_3_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_3_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_3_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push __tmp24c___s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop3
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop3
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_3_c
    push    addvvvXgX_3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_3_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_3_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_3_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_3_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_3_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_3_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_3_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_3_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_3_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_3_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_3_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push __tmp24c___s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    __tmp24c___s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop3
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(begin macro)    pushvX(X,"__tmp" + _xbits + "c__")
    push    __tmp24c___c
    push    __tmp24c___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___0
#(js) }
#(end macro)    pushvX(X,"__tmp" + _xbits + "c__")
#(end macro)        addX(FP)
#(begin macro)        popvX(FP,"pr")
#(js) for (var xx=0; xx < X; xx++) {
    pop     pr_0
#(js) }
    pop     pr_1
#(js) }
    pop     pr_2
#(js) }
    pop     pr_s
    pop     pr_c
#(end macro)        popvX(FP,"pr")
        # pi = (y - halfH) * oneOnHalfZoomH + moveY
#(begin macro)        pushvX(FP,"y")
    push    y_c
    push    y_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    y_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    y_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    y_0
#(js) }
#(end macro)        pushvX(FP,"y")
#(begin macro)        pushFP(FP_I,FP_P,halfH)
#(begin macro)    pushX(I*1+P*1,0)
    push    0
    push    0
#(js) var absImmValue; absImmValue = immValue>=0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(end macro)    pushX(I*1+P*1,0)
#(begin macro)    setFP(I*1,P*1,immValue) 
#(js) _sv8++; 
#(js) var IP; IP = I+P;
#(js) var _sign = immValue >=0?0:1;
#(js) var _abs = immValue>=0?immValue:-immValue;
#(js) var _int; _int = _abs | 0;
#(js) var _fra; _fra = ((_abs - _int) * Math.pow(256,P)) | 0;
#(js) var _fp; _fp = _int * Math.pow(256,P) + _fra; if (_sign ==1) _fp = -_fp;
#(begin macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _instack7_0 - 0
#(js) }
    sbm _instack7_1 - 1
#(js) }
    sbm _instack7_2 - 2
#(js) }
    sbm _instack7_s - 3
    sbm _instack7_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    setvX(IP,"_instack"+_sv8, _fp)
    at _instack7_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    20
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(IP,"_instack"+_sv8, _fp)
#(end macro)    setFP(I*1,P*1,immValue) 
#(end macro)        pushFP(FP_I,FP_P,halfH)
#(begin macro)        subX(FP)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "b__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24b___0
#(js) }
    pop     __tmp24b___1
#(js) }
    pop     __tmp24b___2
#(js) }
    pop     __tmp24b___s
    pop     __tmp24b___c
#(end macro)    popvX(X,"__tmp" + _xbits + "b__")
#(begin macro)    popvX(X,"__tmp" + _xbits + "a__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24a___0
#(js) }
    pop     __tmp24a___1
#(js) }
    pop     __tmp24a___2
#(js) }
    pop     __tmp24a___s
    pop     __tmp24a___c
#(end macro)    popvX(X,"__tmp" + _xbits + "a__")
#(begin macro)    subvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(js) _sv4++;
#(begin macro)    pushvX(X,nameA)
    push    __tmp24a___c
    push    __tmp24a___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24c___0
#(js) }
    pop     __tmp24c___1
#(js) }
    pop     __tmp24c___2
#(js) }
    pop     __tmp24c___s
    pop     __tmp24c___c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"subvvvXgX_" + _sv4)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm subvvvXgX_2_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm subvvvXgX_2_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_2_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_2_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_2_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"subvvvXgX_" + _sv4)
#(begin macro)        pushvX(X,nameB)
    push    __tmp24b___c
    push    __tmp24b___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"subvvvXgX_" + _sv4)
#(js) for (var xx=0; xx < X; xx++) {
    pop     subvvvXgX_2_0
#(js) }
    pop     subvvvXgX_2_1
#(js) }
    pop     subvvvXgX_2_2
#(js) }
    pop     subvvvXgX_2_s
    pop     subvvvXgX_2_c
#(end macro)        popvX(X,"subvvvXgX_" + _sv4)
        push 0
#(begin macro)        popsvX(X,"subvvvXgX_" + _sv4) # absolute number (always positive)
    POP    subvvvXgX_2_s
#(end macro)        popsvX(X,"subvvvXgX_" + _sv4) # absolute number (always positive)
        
        push    __tmp24b___s
        if    # nameB is negative 
            push    1
            sbm subvvvX_loop2
            while
#(begin macro)                pushvX(X,"subvvvXgX_"+ _sv4)
    push    subvvvXgX_2_c
    push    subvvvXgX_2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_2_0
#(js) }
#(end macro)                pushvX(X,"subvvvXgX_"+ _sv4)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push subvvvXgX_2_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_2_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_2_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_2_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at subvvvXgX_2_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_2_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_2_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_2_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at subvvvXgX_2_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push __tmp24c___s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    __tmp24c___s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("subvvvX_loop"+_sv4)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvX_loop2
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("subvvvX_loop"+_sv4)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm subvvvX_loop2
            while
#(begin macro)                pushvX(X,"subvvvXgX_"+ _sv4)
    push    subvvvXgX_2_c
    push    subvvvXgX_2_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_2_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_2_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_2_0
#(js) }
#(end macro)                pushvX(X,"subvvvXgX_"+ _sv4)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push subvvvXgX_2_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_2_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_2_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_2_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at subvvvXgX_2_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_2_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_2_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_2_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_2_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at subvvvXgX_2_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)                    decvX(X, name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push __tmp24c___s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X, name)
                else
#(begin macro)                    at_reset("subvvvX_loop"+_sv4)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvX_loop2
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("subvvvX_loop"+_sv4)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    subvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(begin macro)    pushvX(X,"__tmp" + _xbits + "c__")
    push    __tmp24c___c
    push    __tmp24c___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___0
#(js) }
#(end macro)    pushvX(X,"__tmp" + _xbits + "c__")
#(end macro)        subX(FP)
#(begin macro)        pushFP(FP_I,FP_P,oneOnHalfZoomW)
#(begin macro)    pushX(I*1+P*1,0)
    push    0
    push    0
#(js) var absImmValue; absImmValue = immValue>=0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(end macro)    pushX(I*1+P*1,0)
#(begin macro)    setFP(I*1,P*1,immValue) 
#(js) _sv8++; 
#(js) var IP; IP = I+P;
#(js) var _sign = immValue >=0?0:1;
#(js) var _abs = immValue>=0?immValue:-immValue;
#(js) var _int; _int = _abs | 0;
#(js) var _fra; _fra = ((_abs - _int) * Math.pow(256,P)) | 0;
#(js) var _fp; _fp = _int * Math.pow(256,P) + _fra; if (_sign ==1) _fp = -_fp;
#(begin macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _instack8_0 - 0
#(js) }
    sbm _instack8_1 - 1
#(js) }
    sbm _instack8_2 - 2
#(js) }
    sbm _instack8_s - 3
    sbm _instack8_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    setvX(IP,"_instack"+_sv8, _fp)
    at _instack8_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    160
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(IP,"_instack"+_sv8, _fp)
#(end macro)    setFP(I*1,P*1,immValue) 
#(end macro)        pushFP(FP_I,FP_P,oneOnHalfZoomW)
#(begin macro)        mulFP(FP_I,FP_P)
#(js) _fp1++;
#(js) var IP ; IP = (I+P); 
#(js) var IP2 ; IP2 = 2 * IP;
#(begin macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameB3_0 - 0
#(js) }
    sbm nameB3_1 - 1
#(js) }
    sbm nameB3_2 - 2
#(js) }
    sbm nameB3_s - 3
    sbm nameB3_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameA3_0 - 5
#(js) }
    sbm nameA3_1 - 6
#(js) }
    sbm nameA3_2 - 7
#(js) }
    sbm nameA3_s - 8
    sbm nameA3_c - 9
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameAX3_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameAX3_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX3_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX3_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX3_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX3_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX3_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX3_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameBX3_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameBX3_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX3_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX3_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX3_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX3_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX3_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX3_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)        lvarX(IP2, "resultX" + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm resultX3_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm resultX3_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX3_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX3_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX3_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX3_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX3_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX3_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "resultX" + _fp1)
        
        # upcast nameA to nameAX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameA"+_fp1)
    push    nameA3_c
    push    nameA3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA3_0
#(js) }
#(end macro)        pushvX(IP,"nameA"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput5_0 - 0
#(js) }
    sbm _castXInput5_1 - 1
#(js) }
    sbm _castXInput5_2 - 2
#(js) }
    sbm _castXInput5_s - 3
    sbm _castXInput5_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput5_0    # 0 byte of _castXoutput5
#(js) }
    var _castXoutput5_1    # 1 byte of _castXoutput5
#(js) }
    var _castXoutput5_2    # 2 byte of _castXoutput5
#(js) }
    var _castXoutput5_3    # 3 byte of _castXoutput5
#(js) }
    var _castXoutput5_4    # 4 byte of _castXoutput5
#(js) }
    var _castXoutput5_5    # 5 byte of _castXoutput5
#(js) }
    var _castXoutput5_s    # Sign of _castXoutput5
    var _castXoutput5_c    # carry of _castXoutput5 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori5_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori5_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori5_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori5_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori5_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest5_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest5_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest5_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest5_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest5_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest5_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest5_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest5_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput5_c
    push    _castXInput5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput5_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori5_0
#(js) }
    pop     ori5_1
#(js) }
    pop     ori5_2
#(js) }
    pop     ori5_s
    pop     ori5_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori5_s   
        pop     dest5_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori5_0
                pop     dest5_0
#(js) }
                push    ori5_1
                pop     dest5_1
#(js) }
                push    ori5_2
                pop     dest5_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest5_3
#(js) } 
                push    0
                pop     dest5_4
#(js) } 
                push    0
                pop     dest5_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest5_c
    push    dest5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest5_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest5_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest5_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest5_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput5_0
#(js) }
    pop     _castXoutput5_1
#(js) }
    pop     _castXoutput5_2
#(js) }
    pop     _castXoutput5_3
#(js) }
    pop     _castXoutput5_4
#(js) }
    pop     _castXoutput5_5
#(js) }
    pop     _castXoutput5_s
    pop     _castXoutput5_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput5_c
    push    _castXoutput5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput5_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput5_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput5_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput5_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameAX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameAX3_0
#(js) }
    pop     nameAX3_1
#(js) }
    pop     nameAX3_2
#(js) }
    pop     nameAX3_3
#(js) }
    pop     nameAX3_4
#(js) }
    pop     nameAX3_5
#(js) }
    pop     nameAX3_s
    pop     nameAX3_c
#(end macro)        popvX(IP2,"nameAX"+_fp1)

        # upcast nameB to nameBX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameB"+_fp1)
    push    nameB3_c
    push    nameB3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB3_0
#(js) }
#(end macro)        pushvX(IP,"nameB"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput6_0 - 0
#(js) }
    sbm _castXInput6_1 - 1
#(js) }
    sbm _castXInput6_2 - 2
#(js) }
    sbm _castXInput6_s - 3
    sbm _castXInput6_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput6_0    # 0 byte of _castXoutput6
#(js) }
    var _castXoutput6_1    # 1 byte of _castXoutput6
#(js) }
    var _castXoutput6_2    # 2 byte of _castXoutput6
#(js) }
    var _castXoutput6_3    # 3 byte of _castXoutput6
#(js) }
    var _castXoutput6_4    # 4 byte of _castXoutput6
#(js) }
    var _castXoutput6_5    # 5 byte of _castXoutput6
#(js) }
    var _castXoutput6_s    # Sign of _castXoutput6
    var _castXoutput6_c    # carry of _castXoutput6 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori6_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori6_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori6_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori6_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori6_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest6_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest6_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest6_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest6_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest6_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest6_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest6_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest6_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput6_c
    push    _castXInput6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput6_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori6_0
#(js) }
    pop     ori6_1
#(js) }
    pop     ori6_2
#(js) }
    pop     ori6_s
    pop     ori6_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori6_s   
        pop     dest6_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori6_0
                pop     dest6_0
#(js) }
                push    ori6_1
                pop     dest6_1
#(js) }
                push    ori6_2
                pop     dest6_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest6_3
#(js) } 
                push    0
                pop     dest6_4
#(js) } 
                push    0
                pop     dest6_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest6_c
    push    dest6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest6_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest6_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest6_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest6_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput6_0
#(js) }
    pop     _castXoutput6_1
#(js) }
    pop     _castXoutput6_2
#(js) }
    pop     _castXoutput6_3
#(js) }
    pop     _castXoutput6_4
#(js) }
    pop     _castXoutput6_5
#(js) }
    pop     _castXoutput6_s
    pop     _castXoutput6_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput6_c
    push    _castXoutput6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput6_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput6_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput6_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput6_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameBX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameBX3_0
#(js) }
    pop     nameBX3_1
#(js) }
    pop     nameBX3_2
#(js) }
    pop     nameBX3_3
#(js) }
    pop     nameBX3_4
#(js) }
    pop     nameBX3_5
#(js) }
    pop     nameBX3_s
    pop     nameBX3_c
#(end macro)        popvX(IP2,"nameBX"+_fp1)
        
#(begin macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
#(js) _sv5++;
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameA3_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameA3_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA3_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA3_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA3_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA3_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA3_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA3_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        pushvX(X,nameA)
    push    nameAX3_c
    push    nameAX3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX3_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX3_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX3_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX3_0
#(js) }
#(end macro)        pushvX(X,nameA)
#(begin macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameA3_0
#(js) }
    pop     mulvvvXabsNameA3_1
#(js) }
    pop     mulvvvXabsNameA3_2
#(js) }
    pop     mulvvvXabsNameA3_3
#(js) }
    pop     mulvvvXabsNameA3_4
#(js) }
    pop     mulvvvXabsNameA3_5
#(js) }
    pop     mulvvvXabsNameA3_s
    pop     mulvvvXabsNameA3_c
#(end macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        lvar("mulvvvXsA" + _sv5, 0)
    push 0
    sbm mulvvvXsA3
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsA" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
    push    mulvvvXabsNameA3_s
#(end macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
        pop mulvvvXsA3
#(begin macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
    push    0
    pop     mulvvvXabsNameA3_s
#(end macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
        
#(begin macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameB3_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameB3_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB3_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB3_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB3_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB3_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB3_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB3_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        pushvX(X,nameB)
    push    nameBX3_c
    push    nameBX3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX3_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX3_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX3_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX3_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameB3_0
#(js) }
    pop     mulvvvXabsNameB3_1
#(js) }
    pop     mulvvvXabsNameB3_2
#(js) }
    pop     mulvvvXabsNameB3_3
#(js) }
    pop     mulvvvXabsNameB3_4
#(js) }
    pop     mulvvvXabsNameB3_5
#(js) }
    pop     mulvvvXabsNameB3_s
    pop     mulvvvXabsNameB3_c
#(end macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        lvar("mulvvvXsB" + _sv5, 0)
    push 0
    sbm mulvvvXsB3
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsB" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
    push    mulvvvXabsNameB3_s
#(end macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
        pop mulvvvXsB3
#(begin macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
    push    0
    pop     mulvvvXabsNameB3_s
#(end macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
        
#(begin macro)        resetvX(X,name)
    at resultX3_0
#(begin macro)        resetX(X)
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf [-]
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
#(end macro)        resetX(X)
    ta
#(end macro)        resetvX(X,name)

        push    1
        sbm mulvvvX_loop3
        while
#(begin macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx = 0 ; xx < X; xx++) {
    push mulvvvXabsNameB3_0
    bool
#(js) }
    push mulvvvXabsNameB3_1
    bool
#(js) }
    push mulvvvXabsNameB3_2
    bool
#(js) }
    push mulvvvXabsNameB3_3
    bool
#(js) }
    push mulvvvXabsNameB3_4
    bool
#(js) }
    push mulvvvXabsNameB3_5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
            if  # absNameB is not zero
#(begin macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)    addvvvX(X,name, name, nameA)
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    resultX3_c
    push    resultX3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     resultX3_0
#(js) }
    pop     resultX3_1
#(js) }
    pop     resultX3_2
#(js) }
    pop     resultX3_3
#(js) }
    pop     resultX3_4
#(js) }
    pop     resultX3_5
#(js) }
    pop     resultX3_s
    pop     resultX3_c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_4_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_4_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_4_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_4_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_4_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_4_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_4_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_4_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    mulvvvXabsNameA3_c
    push    mulvvvXabsNameA3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA3_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA3_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA3_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA3_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_4_0
#(js) }
    pop     addvvvXgX_4_1
#(js) }
    pop     addvvvXgX_4_2
#(js) }
    pop     addvvvXgX_4_3
#(js) }
    pop     addvvvXgX_4_4
#(js) }
    pop     addvvvXgX_4_5
#(js) }
    pop     addvvvXgX_4_s
    pop     addvvvXgX_4_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_4_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    mulvvvXabsNameA3_s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop4
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_4_c
    push    addvvvXgX_4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_4_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_4_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_4_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push resultX3_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX3_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at resultX3_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop4
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop4
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_4_c
    push    addvvvXgX_4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_4_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_4_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_4_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_4_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_4_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_4_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_4_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push resultX3_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX3_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX3_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX3_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at resultX3_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    resultX3_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX3_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX3_1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX3_2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX3_3
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX3_4
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX3_5
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at resultX3_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop4
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,name, name, nameA)
#(end macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push mulvvvXabsNameB3_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB3_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB3_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB3_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB3_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB3_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB3_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at mulvvvXabsNameB3_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB3_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB3_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB3_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB3_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB3_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB3_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB3_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at mulvvvXabsNameB3_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
            else 
#(begin macro)                at_reset("mulvvvX_loop"+_sv5)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvX_loop3
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                at_reset("mulvvvX_loop"+_sv5)
            fi
        wend        
        # resolve sign
        push mulvvvXsA3
        push mulvvvXsB3
        diff    # if sign(nameA) <> sign(nameB) then name is negative
        if
#(begin macro)            at_set(name +"_s",1)
#(begin macro)    at_2("set",a,b)
    at resultX3_s
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)            at_set(name +"_s",1)
        fi        
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
        
#(begin macro)        pushvX(IP2,"resultX"+_fp1)
    push    resultX3_c
    push    resultX3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX3_0
#(js) }
#(end macro)        pushvX(IP2,"resultX"+_fp1)
#(begin macro)        castFP(I+I,P+P, I,P)
#(js) _sv8++; 
#(js) var I1P1; I1P1 = I1+P1;
#(js) var I2P2; I2P2 = I2+P2;
#(begin macro)    varX(I1P1,"_instack" +_sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _instack9_0    # 0 byte of _instack9
#(js) }
    var _instack9_1    # 1 byte of _instack9
#(js) }
    var _instack9_2    # 2 byte of _instack9
#(js) }
    var _instack9_3    # 3 byte of _instack9
#(js) }
    var _instack9_4    # 4 byte of _instack9
#(js) }
    var _instack9_5    # 5 byte of _instack9
#(js) }
    var _instack9_s    # Sign of _instack9
    var _instack9_c    # carry of _instack9 
#(end macro)    varX(I1P1,"_instack" +_sv8)
#(begin macro)    varX(I2P2,"_outstack" + _sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _outstack9_0    # 0 byte of _outstack9
#(js) }
    var _outstack9_1    # 1 byte of _outstack9
#(js) }
    var _outstack9_2    # 2 byte of _outstack9
#(js) }
    var _outstack9_s    # Sign of _outstack9
    var _outstack9_c    # carry of _outstack9 
#(end macro)    varX(I2P2,"_outstack" + _sv8)
    
#(begin macro)    popvX(I1P1,"_instack" + _sv8)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _instack9_0
#(js) }
    pop     _instack9_1
#(js) }
    pop     _instack9_2
#(js) }
    pop     _instack9_3
#(js) }
    pop     _instack9_4
#(js) }
    pop     _instack9_5
#(js) }
    pop     _instack9_s
    pop     _instack9_c
#(end macro)    popvX(I1P1,"_instack" + _sv8)
    # reset outstack
#(begin macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    at _outstack9_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    # sign
    push _instack9_s
    pop _outstack9_s
    # integer part
#(js) if (I1 >= I2) {
#(js) for (var xx = 0 ; xx < I2; xx++) {
            push _instack9_4
            pop _outstack9_2
#(js) }
#(js) } else { // I1 < I2
    # fract part
#(js) if (P1 >= P2) {
#(js) for (var xx = 0 ; xx <P2; xx++) {
            push _instack9_3
            pop _outstack9_1
#(js) }
            push _instack9_2
            pop _outstack9_0
#(js) }
#(js) } else { // P1 < P2
#(begin macro)    pushvX(I2P2,"_outstack" + _sv8)
    push    _outstack9_c
    push    _outstack9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack9_0
#(js) }
#(end macro)    pushvX(I2P2,"_outstack" + _sv8)
#(end macro)        castFP(I+I,P+P, I,P)
#(begin macro)        popvX(IP,"nameA"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameA3_0
#(js) }
    pop     nameA3_1
#(js) }
    pop     nameA3_2
#(js) }
    pop     nameA3_s
    pop     nameA3_c
#(end macro)        popvX(IP,"nameA"+_fp1)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(IP) # drop nameB
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(IP) # drop nameB
#(end macro)        mulFP(FP_I,FP_P)
#(begin macro)        pushFP(FP_I,FP_P,moveX)
#(begin macro)    pushX(I*1+P*1,0)
    push    0
    push    0
#(js) var absImmValue; absImmValue = immValue>=0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(end macro)    pushX(I*1+P*1,0)
#(begin macro)    setFP(I*1,P*1,immValue) 
#(js) _sv8++; 
#(js) var IP; IP = I+P;
#(js) var _sign = immValue >=0?0:1;
#(js) var _abs = immValue>=0?immValue:-immValue;
#(js) var _int; _int = _abs | 0;
#(js) var _fra; _fra = ((_abs - _int) * Math.pow(256,P)) | 0;
#(js) var _fp; _fp = _int * Math.pow(256,P) + _fra; if (_sign ==1) _fp = -_fp;
#(begin macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _instack10_0 - 0
#(js) }
    sbm _instack10_1 - 1
#(js) }
    sbm _instack10_2 - 2
#(js) }
    sbm _instack10_s - 3
    sbm _instack10_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    setvX(IP,"_instack"+_sv8, _fp)
    at _instack10_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    128
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(IP,"_instack"+_sv8, _fp)
#(end macro)    setFP(I*1,P*1,immValue) 
#(end macro)        pushFP(FP_I,FP_P,moveX)
#(begin macro)        addX(FP)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "b__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24b___0
#(js) }
    pop     __tmp24b___1
#(js) }
    pop     __tmp24b___2
#(js) }
    pop     __tmp24b___s
    pop     __tmp24b___c
#(end macro)    popvX(X,"__tmp" + _xbits + "b__")
#(begin macro)    popvX(X,"__tmp" + _xbits + "a__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24a___0
#(js) }
    pop     __tmp24a___1
#(js) }
    pop     __tmp24a___2
#(js) }
    pop     __tmp24a___s
    pop     __tmp24a___c
#(end macro)    popvX(X,"__tmp" + _xbits + "a__")
#(begin macro)    addvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    __tmp24a___c
    push    __tmp24a___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24c___0
#(js) }
    pop     __tmp24c___1
#(js) }
    pop     __tmp24c___2
#(js) }
    pop     __tmp24c___s
    pop     __tmp24c___c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_5_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_5_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_5_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_5_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_5_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    __tmp24b___c
    push    __tmp24b___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_5_0
#(js) }
    pop     addvvvXgX_5_1
#(js) }
    pop     addvvvXgX_5_2
#(js) }
    pop     addvvvXgX_5_s
    pop     addvvvXgX_5_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_5_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    __tmp24b___s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop5
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_5_c
    push    addvvvXgX_5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_5_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_5_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_5_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_5_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_5_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_5_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_5_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_5_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_5_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_5_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push __tmp24c___s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop5
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop5
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_5_c
    push    addvvvXgX_5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_5_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_5_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_5_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_5_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_5_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_5_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_5_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_5_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_5_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_5_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_5_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push __tmp24c___s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    __tmp24c___s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop5
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(begin macro)    pushvX(X,"__tmp" + _xbits + "c__")
    push    __tmp24c___c
    push    __tmp24c___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___0
#(js) }
#(end macro)    pushvX(X,"__tmp" + _xbits + "c__")
#(end macro)        addX(FP)
#(begin macro)        popvX(FP,"pi")
#(js) for (var xx=0; xx < X; xx++) {
    pop     pi_0
#(js) }
    pop     pi_1
#(js) }
    pop     pi_2
#(js) }
    pop     pi_s
    pop     pi_c
#(end macro)        popvX(FP,"pi")
        # newRe = 0
#(begin macro)        setvX(FP,"newRe",0)
    at newRe_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(FP,"newRe",0)
        # newIm = 0
#(begin macro)        setvX(FP,"newIm",0)
    at newIm_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(FP,"newIm",0)
        # oldRe = 0
#(begin macro)        setvX(FP,"oldRe",0)
    at oldRe_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(FP,"oldRe",0)
        # oldIm = 0
#(begin macro)        setvX(FP,"oldIm",0)
    at oldIm_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(FP,"oldIm",0)
        # i = 0
#(begin macro)        at_reset("i")
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at i
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)        at_reset("i")
        # for (i =0 ; i < maxIte; i++) {
        push    1
        sbm     loop
        while
#(begin macro)            if_inf("i",maxIte)
    push i
    push 26
    inf
    if
#(end macro)            if_inf("i",maxIte)
            #    oldRe = newRe
#(begin macro)                pushvX(FP,"newRe")
    push    newRe_c
    push    newRe_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newRe_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newRe_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newRe_0
#(js) }
#(end macro)                pushvX(FP,"newRe")
#(begin macro)                popvX(FP,"oldRe")
#(js) for (var xx=0; xx < X; xx++) {
    pop     oldRe_0
#(js) }
    pop     oldRe_1
#(js) }
    pop     oldRe_2
#(js) }
    pop     oldRe_s
    pop     oldRe_c
#(end macro)                popvX(FP,"oldRe")
            #    oldIm = newIm
#(begin macro)                pushvX(FP,"newIm")
    push    newIm_c
    push    newIm_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newIm_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newIm_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newIm_0
#(js) }
#(end macro)                pushvX(FP,"newIm")
#(begin macro)                popvX(FP,"oldIm")
#(js) for (var xx=0; xx < X; xx++) {
    pop     oldIm_0
#(js) }
    pop     oldIm_1
#(js) }
    pop     oldIm_2
#(js) }
    pop     oldIm_s
    pop     oldIm_c
#(end macro)                popvX(FP,"oldIm")
            #    newRe = oldRe * oldRe - oldIm * oldIm + pr
#(begin macro)                pushvX(FP,"oldRe")
    push    oldRe_c
    push    oldRe_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldRe_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldRe_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldRe_0
#(js) }
#(end macro)                pushvX(FP,"oldRe")
#(begin macro)                pushvX(FP,"oldRe")
    push    oldRe_c
    push    oldRe_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldRe_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldRe_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldRe_0
#(js) }
#(end macro)                pushvX(FP,"oldRe")
#(begin macro)                mulFP(FP_I,FP_P)
#(js) _fp1++;
#(js) var IP ; IP = (I+P); 
#(js) var IP2 ; IP2 = 2 * IP;
#(begin macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameB4_0 - 0
#(js) }
    sbm nameB4_1 - 1
#(js) }
    sbm nameB4_2 - 2
#(js) }
    sbm nameB4_s - 3
    sbm nameB4_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameA4_0 - 5
#(js) }
    sbm nameA4_1 - 6
#(js) }
    sbm nameA4_2 - 7
#(js) }
    sbm nameA4_s - 8
    sbm nameA4_c - 9
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameAX4_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameAX4_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX4_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX4_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX4_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX4_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX4_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX4_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameBX4_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameBX4_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX4_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX4_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX4_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX4_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX4_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX4_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)        lvarX(IP2, "resultX" + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm resultX4_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm resultX4_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX4_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX4_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX4_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX4_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX4_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX4_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "resultX" + _fp1)
        
        # upcast nameA to nameAX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameA"+_fp1)
    push    nameA4_c
    push    nameA4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA4_0
#(js) }
#(end macro)        pushvX(IP,"nameA"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput7_0 - 0
#(js) }
    sbm _castXInput7_1 - 1
#(js) }
    sbm _castXInput7_2 - 2
#(js) }
    sbm _castXInput7_s - 3
    sbm _castXInput7_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput7_0    # 0 byte of _castXoutput7
#(js) }
    var _castXoutput7_1    # 1 byte of _castXoutput7
#(js) }
    var _castXoutput7_2    # 2 byte of _castXoutput7
#(js) }
    var _castXoutput7_3    # 3 byte of _castXoutput7
#(js) }
    var _castXoutput7_4    # 4 byte of _castXoutput7
#(js) }
    var _castXoutput7_5    # 5 byte of _castXoutput7
#(js) }
    var _castXoutput7_s    # Sign of _castXoutput7
    var _castXoutput7_c    # carry of _castXoutput7 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori7_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori7_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori7_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori7_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori7_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest7_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest7_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest7_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest7_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest7_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest7_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest7_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest7_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput7_c
    push    _castXInput7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput7_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori7_0
#(js) }
    pop     ori7_1
#(js) }
    pop     ori7_2
#(js) }
    pop     ori7_s
    pop     ori7_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori7_s   
        pop     dest7_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori7_0
                pop     dest7_0
#(js) }
                push    ori7_1
                pop     dest7_1
#(js) }
                push    ori7_2
                pop     dest7_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest7_3
#(js) } 
                push    0
                pop     dest7_4
#(js) } 
                push    0
                pop     dest7_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest7_c
    push    dest7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest7_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest7_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest7_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest7_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput7_0
#(js) }
    pop     _castXoutput7_1
#(js) }
    pop     _castXoutput7_2
#(js) }
    pop     _castXoutput7_3
#(js) }
    pop     _castXoutput7_4
#(js) }
    pop     _castXoutput7_5
#(js) }
    pop     _castXoutput7_s
    pop     _castXoutput7_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput7_c
    push    _castXoutput7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput7_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput7_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput7_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput7_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameAX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameAX4_0
#(js) }
    pop     nameAX4_1
#(js) }
    pop     nameAX4_2
#(js) }
    pop     nameAX4_3
#(js) }
    pop     nameAX4_4
#(js) }
    pop     nameAX4_5
#(js) }
    pop     nameAX4_s
    pop     nameAX4_c
#(end macro)        popvX(IP2,"nameAX"+_fp1)

        # upcast nameB to nameBX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameB"+_fp1)
    push    nameB4_c
    push    nameB4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB4_0
#(js) }
#(end macro)        pushvX(IP,"nameB"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput8_0 - 0
#(js) }
    sbm _castXInput8_1 - 1
#(js) }
    sbm _castXInput8_2 - 2
#(js) }
    sbm _castXInput8_s - 3
    sbm _castXInput8_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput8_0    # 0 byte of _castXoutput8
#(js) }
    var _castXoutput8_1    # 1 byte of _castXoutput8
#(js) }
    var _castXoutput8_2    # 2 byte of _castXoutput8
#(js) }
    var _castXoutput8_3    # 3 byte of _castXoutput8
#(js) }
    var _castXoutput8_4    # 4 byte of _castXoutput8
#(js) }
    var _castXoutput8_5    # 5 byte of _castXoutput8
#(js) }
    var _castXoutput8_s    # Sign of _castXoutput8
    var _castXoutput8_c    # carry of _castXoutput8 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori8_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori8_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori8_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori8_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori8_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest8_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest8_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest8_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest8_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest8_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest8_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest8_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest8_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput8_c
    push    _castXInput8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput8_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori8_0
#(js) }
    pop     ori8_1
#(js) }
    pop     ori8_2
#(js) }
    pop     ori8_s
    pop     ori8_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori8_s   
        pop     dest8_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori8_0
                pop     dest8_0
#(js) }
                push    ori8_1
                pop     dest8_1
#(js) }
                push    ori8_2
                pop     dest8_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest8_3
#(js) } 
                push    0
                pop     dest8_4
#(js) } 
                push    0
                pop     dest8_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest8_c
    push    dest8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest8_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest8_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest8_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest8_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput8_0
#(js) }
    pop     _castXoutput8_1
#(js) }
    pop     _castXoutput8_2
#(js) }
    pop     _castXoutput8_3
#(js) }
    pop     _castXoutput8_4
#(js) }
    pop     _castXoutput8_5
#(js) }
    pop     _castXoutput8_s
    pop     _castXoutput8_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput8_c
    push    _castXoutput8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput8_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput8_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput8_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput8_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameBX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameBX4_0
#(js) }
    pop     nameBX4_1
#(js) }
    pop     nameBX4_2
#(js) }
    pop     nameBX4_3
#(js) }
    pop     nameBX4_4
#(js) }
    pop     nameBX4_5
#(js) }
    pop     nameBX4_s
    pop     nameBX4_c
#(end macro)        popvX(IP2,"nameBX"+_fp1)
        
#(begin macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
#(js) _sv5++;
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameA4_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameA4_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA4_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA4_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA4_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA4_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA4_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA4_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        pushvX(X,nameA)
    push    nameAX4_c
    push    nameAX4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX4_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX4_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX4_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX4_0
#(js) }
#(end macro)        pushvX(X,nameA)
#(begin macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameA4_0
#(js) }
    pop     mulvvvXabsNameA4_1
#(js) }
    pop     mulvvvXabsNameA4_2
#(js) }
    pop     mulvvvXabsNameA4_3
#(js) }
    pop     mulvvvXabsNameA4_4
#(js) }
    pop     mulvvvXabsNameA4_5
#(js) }
    pop     mulvvvXabsNameA4_s
    pop     mulvvvXabsNameA4_c
#(end macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        lvar("mulvvvXsA" + _sv5, 0)
    push 0
    sbm mulvvvXsA4
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsA" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
    push    mulvvvXabsNameA4_s
#(end macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
        pop mulvvvXsA4
#(begin macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
    push    0
    pop     mulvvvXabsNameA4_s
#(end macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
        
#(begin macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameB4_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameB4_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB4_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB4_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB4_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB4_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB4_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB4_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        pushvX(X,nameB)
    push    nameBX4_c
    push    nameBX4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX4_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX4_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX4_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX4_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameB4_0
#(js) }
    pop     mulvvvXabsNameB4_1
#(js) }
    pop     mulvvvXabsNameB4_2
#(js) }
    pop     mulvvvXabsNameB4_3
#(js) }
    pop     mulvvvXabsNameB4_4
#(js) }
    pop     mulvvvXabsNameB4_5
#(js) }
    pop     mulvvvXabsNameB4_s
    pop     mulvvvXabsNameB4_c
#(end macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        lvar("mulvvvXsB" + _sv5, 0)
    push 0
    sbm mulvvvXsB4
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsB" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
    push    mulvvvXabsNameB4_s
#(end macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
        pop mulvvvXsB4
#(begin macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
    push    0
    pop     mulvvvXabsNameB4_s
#(end macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
        
#(begin macro)        resetvX(X,name)
    at resultX4_0
#(begin macro)        resetX(X)
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf [-]
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
#(end macro)        resetX(X)
    ta
#(end macro)        resetvX(X,name)

        push    1
        sbm mulvvvX_loop4
        while
#(begin macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx = 0 ; xx < X; xx++) {
    push mulvvvXabsNameB4_0
    bool
#(js) }
    push mulvvvXabsNameB4_1
    bool
#(js) }
    push mulvvvXabsNameB4_2
    bool
#(js) }
    push mulvvvXabsNameB4_3
    bool
#(js) }
    push mulvvvXabsNameB4_4
    bool
#(js) }
    push mulvvvXabsNameB4_5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
            if  # absNameB is not zero
#(begin macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)    addvvvX(X,name, name, nameA)
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    resultX4_c
    push    resultX4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     resultX4_0
#(js) }
    pop     resultX4_1
#(js) }
    pop     resultX4_2
#(js) }
    pop     resultX4_3
#(js) }
    pop     resultX4_4
#(js) }
    pop     resultX4_5
#(js) }
    pop     resultX4_s
    pop     resultX4_c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_6_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_6_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_6_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_6_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_6_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_6_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_6_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_6_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    mulvvvXabsNameA4_c
    push    mulvvvXabsNameA4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA4_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA4_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA4_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA4_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_6_0
#(js) }
    pop     addvvvXgX_6_1
#(js) }
    pop     addvvvXgX_6_2
#(js) }
    pop     addvvvXgX_6_3
#(js) }
    pop     addvvvXgX_6_4
#(js) }
    pop     addvvvXgX_6_5
#(js) }
    pop     addvvvXgX_6_s
    pop     addvvvXgX_6_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_6_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    mulvvvXabsNameA4_s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop6
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_6_c
    push    addvvvXgX_6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_6_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_6_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_6_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push resultX4_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX4_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at resultX4_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop6
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop6
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_6_c
    push    addvvvXgX_6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_6_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_6_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_6_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_6_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_6_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_6_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_6_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push resultX4_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX4_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX4_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX4_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at resultX4_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    resultX4_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX4_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX4_1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX4_2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX4_3
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX4_4
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX4_5
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at resultX4_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop6
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,name, name, nameA)
#(end macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push mulvvvXabsNameB4_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB4_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB4_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB4_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB4_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB4_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB4_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at mulvvvXabsNameB4_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB4_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB4_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB4_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB4_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB4_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB4_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB4_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at mulvvvXabsNameB4_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
            else 
#(begin macro)                at_reset("mulvvvX_loop"+_sv5)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvX_loop4
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                at_reset("mulvvvX_loop"+_sv5)
            fi
        wend        
        # resolve sign
        push mulvvvXsA4
        push mulvvvXsB4
        diff    # if sign(nameA) <> sign(nameB) then name is negative
        if
#(begin macro)            at_set(name +"_s",1)
#(begin macro)    at_2("set",a,b)
    at resultX4_s
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)            at_set(name +"_s",1)
        fi        
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
        
#(begin macro)        pushvX(IP2,"resultX"+_fp1)
    push    resultX4_c
    push    resultX4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX4_0
#(js) }
#(end macro)        pushvX(IP2,"resultX"+_fp1)
#(begin macro)        castFP(I+I,P+P, I,P)
#(js) _sv8++; 
#(js) var I1P1; I1P1 = I1+P1;
#(js) var I2P2; I2P2 = I2+P2;
#(begin macro)    varX(I1P1,"_instack" +_sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _instack11_0    # 0 byte of _instack11
#(js) }
    var _instack11_1    # 1 byte of _instack11
#(js) }
    var _instack11_2    # 2 byte of _instack11
#(js) }
    var _instack11_3    # 3 byte of _instack11
#(js) }
    var _instack11_4    # 4 byte of _instack11
#(js) }
    var _instack11_5    # 5 byte of _instack11
#(js) }
    var _instack11_s    # Sign of _instack11
    var _instack11_c    # carry of _instack11 
#(end macro)    varX(I1P1,"_instack" +_sv8)
#(begin macro)    varX(I2P2,"_outstack" + _sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _outstack11_0    # 0 byte of _outstack11
#(js) }
    var _outstack11_1    # 1 byte of _outstack11
#(js) }
    var _outstack11_2    # 2 byte of _outstack11
#(js) }
    var _outstack11_s    # Sign of _outstack11
    var _outstack11_c    # carry of _outstack11 
#(end macro)    varX(I2P2,"_outstack" + _sv8)
    
#(begin macro)    popvX(I1P1,"_instack" + _sv8)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _instack11_0
#(js) }
    pop     _instack11_1
#(js) }
    pop     _instack11_2
#(js) }
    pop     _instack11_3
#(js) }
    pop     _instack11_4
#(js) }
    pop     _instack11_5
#(js) }
    pop     _instack11_s
    pop     _instack11_c
#(end macro)    popvX(I1P1,"_instack" + _sv8)
    # reset outstack
#(begin macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    at _outstack11_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    # sign
    push _instack11_s
    pop _outstack11_s
    # integer part
#(js) if (I1 >= I2) {
#(js) for (var xx = 0 ; xx < I2; xx++) {
            push _instack11_4
            pop _outstack11_2
#(js) }
#(js) } else { // I1 < I2
    # fract part
#(js) if (P1 >= P2) {
#(js) for (var xx = 0 ; xx <P2; xx++) {
            push _instack11_3
            pop _outstack11_1
#(js) }
            push _instack11_2
            pop _outstack11_0
#(js) }
#(js) } else { // P1 < P2
#(begin macro)    pushvX(I2P2,"_outstack" + _sv8)
    push    _outstack11_c
    push    _outstack11_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack11_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack11_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack11_0
#(js) }
#(end macro)    pushvX(I2P2,"_outstack" + _sv8)
#(end macro)        castFP(I+I,P+P, I,P)
#(begin macro)        popvX(IP,"nameA"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameA4_0
#(js) }
    pop     nameA4_1
#(js) }
    pop     nameA4_2
#(js) }
    pop     nameA4_s
    pop     nameA4_c
#(end macro)        popvX(IP,"nameA"+_fp1)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(IP) # drop nameB
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(IP) # drop nameB
#(end macro)                mulFP(FP_I,FP_P)
#(begin macro)                pushvX(FP,"oldIm")
    push    oldIm_c
    push    oldIm_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldIm_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldIm_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldIm_0
#(js) }
#(end macro)                pushvX(FP,"oldIm")
#(begin macro)                pushvX(FP,"oldIm")
    push    oldIm_c
    push    oldIm_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldIm_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldIm_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldIm_0
#(js) }
#(end macro)                pushvX(FP,"oldIm")
#(begin macro)                mulFP(FP_I,FP_P)
#(js) _fp1++;
#(js) var IP ; IP = (I+P); 
#(js) var IP2 ; IP2 = 2 * IP;
#(begin macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameB5_0 - 0
#(js) }
    sbm nameB5_1 - 1
#(js) }
    sbm nameB5_2 - 2
#(js) }
    sbm nameB5_s - 3
    sbm nameB5_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameA5_0 - 5
#(js) }
    sbm nameA5_1 - 6
#(js) }
    sbm nameA5_2 - 7
#(js) }
    sbm nameA5_s - 8
    sbm nameA5_c - 9
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameAX5_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameAX5_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX5_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX5_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX5_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX5_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX5_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX5_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameBX5_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameBX5_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX5_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX5_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX5_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX5_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX5_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX5_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)        lvarX(IP2, "resultX" + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm resultX5_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm resultX5_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX5_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX5_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX5_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX5_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX5_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX5_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "resultX" + _fp1)
        
        # upcast nameA to nameAX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameA"+_fp1)
    push    nameA5_c
    push    nameA5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA5_0
#(js) }
#(end macro)        pushvX(IP,"nameA"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput9_0 - 0
#(js) }
    sbm _castXInput9_1 - 1
#(js) }
    sbm _castXInput9_2 - 2
#(js) }
    sbm _castXInput9_s - 3
    sbm _castXInput9_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput9_0    # 0 byte of _castXoutput9
#(js) }
    var _castXoutput9_1    # 1 byte of _castXoutput9
#(js) }
    var _castXoutput9_2    # 2 byte of _castXoutput9
#(js) }
    var _castXoutput9_3    # 3 byte of _castXoutput9
#(js) }
    var _castXoutput9_4    # 4 byte of _castXoutput9
#(js) }
    var _castXoutput9_5    # 5 byte of _castXoutput9
#(js) }
    var _castXoutput9_s    # Sign of _castXoutput9
    var _castXoutput9_c    # carry of _castXoutput9 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori9_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori9_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori9_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori9_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori9_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest9_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest9_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest9_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest9_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest9_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest9_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest9_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest9_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput9_c
    push    _castXInput9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput9_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori9_0
#(js) }
    pop     ori9_1
#(js) }
    pop     ori9_2
#(js) }
    pop     ori9_s
    pop     ori9_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori9_s   
        pop     dest9_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori9_0
                pop     dest9_0
#(js) }
                push    ori9_1
                pop     dest9_1
#(js) }
                push    ori9_2
                pop     dest9_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest9_3
#(js) } 
                push    0
                pop     dest9_4
#(js) } 
                push    0
                pop     dest9_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest9_c
    push    dest9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest9_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest9_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest9_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest9_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput9_0
#(js) }
    pop     _castXoutput9_1
#(js) }
    pop     _castXoutput9_2
#(js) }
    pop     _castXoutput9_3
#(js) }
    pop     _castXoutput9_4
#(js) }
    pop     _castXoutput9_5
#(js) }
    pop     _castXoutput9_s
    pop     _castXoutput9_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput9_c
    push    _castXoutput9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput9_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput9_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput9_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput9_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameAX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameAX5_0
#(js) }
    pop     nameAX5_1
#(js) }
    pop     nameAX5_2
#(js) }
    pop     nameAX5_3
#(js) }
    pop     nameAX5_4
#(js) }
    pop     nameAX5_5
#(js) }
    pop     nameAX5_s
    pop     nameAX5_c
#(end macro)        popvX(IP2,"nameAX"+_fp1)

        # upcast nameB to nameBX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameB"+_fp1)
    push    nameB5_c
    push    nameB5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB5_0
#(js) }
#(end macro)        pushvX(IP,"nameB"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput10_0 - 0
#(js) }
    sbm _castXInput10_1 - 1
#(js) }
    sbm _castXInput10_2 - 2
#(js) }
    sbm _castXInput10_s - 3
    sbm _castXInput10_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput10_0    # 0 byte of _castXoutput10
#(js) }
    var _castXoutput10_1    # 1 byte of _castXoutput10
#(js) }
    var _castXoutput10_2    # 2 byte of _castXoutput10
#(js) }
    var _castXoutput10_3    # 3 byte of _castXoutput10
#(js) }
    var _castXoutput10_4    # 4 byte of _castXoutput10
#(js) }
    var _castXoutput10_5    # 5 byte of _castXoutput10
#(js) }
    var _castXoutput10_s    # Sign of _castXoutput10
    var _castXoutput10_c    # carry of _castXoutput10 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori10_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori10_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori10_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori10_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori10_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest10_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest10_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest10_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest10_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest10_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest10_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest10_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest10_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput10_c
    push    _castXInput10_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput10_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput10_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput10_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori10_0
#(js) }
    pop     ori10_1
#(js) }
    pop     ori10_2
#(js) }
    pop     ori10_s
    pop     ori10_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori10_s   
        pop     dest10_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori10_0
                pop     dest10_0
#(js) }
                push    ori10_1
                pop     dest10_1
#(js) }
                push    ori10_2
                pop     dest10_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest10_3
#(js) } 
                push    0
                pop     dest10_4
#(js) } 
                push    0
                pop     dest10_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest10_c
    push    dest10_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest10_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest10_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest10_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest10_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest10_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest10_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput10_0
#(js) }
    pop     _castXoutput10_1
#(js) }
    pop     _castXoutput10_2
#(js) }
    pop     _castXoutput10_3
#(js) }
    pop     _castXoutput10_4
#(js) }
    pop     _castXoutput10_5
#(js) }
    pop     _castXoutput10_s
    pop     _castXoutput10_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput10_c
    push    _castXoutput10_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput10_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput10_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput10_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput10_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput10_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput10_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameBX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameBX5_0
#(js) }
    pop     nameBX5_1
#(js) }
    pop     nameBX5_2
#(js) }
    pop     nameBX5_3
#(js) }
    pop     nameBX5_4
#(js) }
    pop     nameBX5_5
#(js) }
    pop     nameBX5_s
    pop     nameBX5_c
#(end macro)        popvX(IP2,"nameBX"+_fp1)
        
#(begin macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
#(js) _sv5++;
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameA5_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameA5_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA5_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA5_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA5_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA5_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA5_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA5_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        pushvX(X,nameA)
    push    nameAX5_c
    push    nameAX5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX5_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX5_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX5_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX5_0
#(js) }
#(end macro)        pushvX(X,nameA)
#(begin macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameA5_0
#(js) }
    pop     mulvvvXabsNameA5_1
#(js) }
    pop     mulvvvXabsNameA5_2
#(js) }
    pop     mulvvvXabsNameA5_3
#(js) }
    pop     mulvvvXabsNameA5_4
#(js) }
    pop     mulvvvXabsNameA5_5
#(js) }
    pop     mulvvvXabsNameA5_s
    pop     mulvvvXabsNameA5_c
#(end macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        lvar("mulvvvXsA" + _sv5, 0)
    push 0
    sbm mulvvvXsA5
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsA" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
    push    mulvvvXabsNameA5_s
#(end macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
        pop mulvvvXsA5
#(begin macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
    push    0
    pop     mulvvvXabsNameA5_s
#(end macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
        
#(begin macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameB5_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameB5_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB5_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB5_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB5_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB5_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB5_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB5_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        pushvX(X,nameB)
    push    nameBX5_c
    push    nameBX5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX5_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX5_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX5_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX5_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameB5_0
#(js) }
    pop     mulvvvXabsNameB5_1
#(js) }
    pop     mulvvvXabsNameB5_2
#(js) }
    pop     mulvvvXabsNameB5_3
#(js) }
    pop     mulvvvXabsNameB5_4
#(js) }
    pop     mulvvvXabsNameB5_5
#(js) }
    pop     mulvvvXabsNameB5_s
    pop     mulvvvXabsNameB5_c
#(end macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        lvar("mulvvvXsB" + _sv5, 0)
    push 0
    sbm mulvvvXsB5
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsB" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
    push    mulvvvXabsNameB5_s
#(end macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
        pop mulvvvXsB5
#(begin macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
    push    0
    pop     mulvvvXabsNameB5_s
#(end macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
        
#(begin macro)        resetvX(X,name)
    at resultX5_0
#(begin macro)        resetX(X)
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf [-]
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
#(end macro)        resetX(X)
    ta
#(end macro)        resetvX(X,name)

        push    1
        sbm mulvvvX_loop5
        while
#(begin macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx = 0 ; xx < X; xx++) {
    push mulvvvXabsNameB5_0
    bool
#(js) }
    push mulvvvXabsNameB5_1
    bool
#(js) }
    push mulvvvXabsNameB5_2
    bool
#(js) }
    push mulvvvXabsNameB5_3
    bool
#(js) }
    push mulvvvXabsNameB5_4
    bool
#(js) }
    push mulvvvXabsNameB5_5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
            if  # absNameB is not zero
#(begin macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)    addvvvX(X,name, name, nameA)
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    resultX5_c
    push    resultX5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     resultX5_0
#(js) }
    pop     resultX5_1
#(js) }
    pop     resultX5_2
#(js) }
    pop     resultX5_3
#(js) }
    pop     resultX5_4
#(js) }
    pop     resultX5_5
#(js) }
    pop     resultX5_s
    pop     resultX5_c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_7_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_7_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_7_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_7_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_7_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_7_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_7_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_7_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    mulvvvXabsNameA5_c
    push    mulvvvXabsNameA5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA5_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA5_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA5_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA5_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_7_0
#(js) }
    pop     addvvvXgX_7_1
#(js) }
    pop     addvvvXgX_7_2
#(js) }
    pop     addvvvXgX_7_3
#(js) }
    pop     addvvvXgX_7_4
#(js) }
    pop     addvvvXgX_7_5
#(js) }
    pop     addvvvXgX_7_s
    pop     addvvvXgX_7_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_7_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    mulvvvXabsNameA5_s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop7
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_7_c
    push    addvvvXgX_7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_7_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_7_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_7_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push resultX5_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX5_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at resultX5_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop7
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop7
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_7_c
    push    addvvvXgX_7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_7_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_7_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_7_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_7_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_7_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_7_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_7_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push resultX5_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX5_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX5_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX5_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at resultX5_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    resultX5_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX5_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX5_1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX5_2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX5_3
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX5_4
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX5_5
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at resultX5_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop7
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,name, name, nameA)
#(end macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push mulvvvXabsNameB5_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB5_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB5_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB5_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB5_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB5_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB5_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at mulvvvXabsNameB5_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB5_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB5_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB5_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB5_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB5_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB5_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB5_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at mulvvvXabsNameB5_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
            else 
#(begin macro)                at_reset("mulvvvX_loop"+_sv5)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvX_loop5
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                at_reset("mulvvvX_loop"+_sv5)
            fi
        wend        
        # resolve sign
        push mulvvvXsA5
        push mulvvvXsB5
        diff    # if sign(nameA) <> sign(nameB) then name is negative
        if
#(begin macro)            at_set(name +"_s",1)
#(begin macro)    at_2("set",a,b)
    at resultX5_s
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)            at_set(name +"_s",1)
        fi        
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
        
#(begin macro)        pushvX(IP2,"resultX"+_fp1)
    push    resultX5_c
    push    resultX5_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX5_0
#(js) }
#(end macro)        pushvX(IP2,"resultX"+_fp1)
#(begin macro)        castFP(I+I,P+P, I,P)
#(js) _sv8++; 
#(js) var I1P1; I1P1 = I1+P1;
#(js) var I2P2; I2P2 = I2+P2;
#(begin macro)    varX(I1P1,"_instack" +_sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _instack12_0    # 0 byte of _instack12
#(js) }
    var _instack12_1    # 1 byte of _instack12
#(js) }
    var _instack12_2    # 2 byte of _instack12
#(js) }
    var _instack12_3    # 3 byte of _instack12
#(js) }
    var _instack12_4    # 4 byte of _instack12
#(js) }
    var _instack12_5    # 5 byte of _instack12
#(js) }
    var _instack12_s    # Sign of _instack12
    var _instack12_c    # carry of _instack12 
#(end macro)    varX(I1P1,"_instack" +_sv8)
#(begin macro)    varX(I2P2,"_outstack" + _sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _outstack12_0    # 0 byte of _outstack12
#(js) }
    var _outstack12_1    # 1 byte of _outstack12
#(js) }
    var _outstack12_2    # 2 byte of _outstack12
#(js) }
    var _outstack12_s    # Sign of _outstack12
    var _outstack12_c    # carry of _outstack12 
#(end macro)    varX(I2P2,"_outstack" + _sv8)
    
#(begin macro)    popvX(I1P1,"_instack" + _sv8)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _instack12_0
#(js) }
    pop     _instack12_1
#(js) }
    pop     _instack12_2
#(js) }
    pop     _instack12_3
#(js) }
    pop     _instack12_4
#(js) }
    pop     _instack12_5
#(js) }
    pop     _instack12_s
    pop     _instack12_c
#(end macro)    popvX(I1P1,"_instack" + _sv8)
    # reset outstack
#(begin macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    at _outstack12_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    # sign
    push _instack12_s
    pop _outstack12_s
    # integer part
#(js) if (I1 >= I2) {
#(js) for (var xx = 0 ; xx < I2; xx++) {
            push _instack12_4
            pop _outstack12_2
#(js) }
#(js) } else { // I1 < I2
    # fract part
#(js) if (P1 >= P2) {
#(js) for (var xx = 0 ; xx <P2; xx++) {
            push _instack12_3
            pop _outstack12_1
#(js) }
            push _instack12_2
            pop _outstack12_0
#(js) }
#(js) } else { // P1 < P2
#(begin macro)    pushvX(I2P2,"_outstack" + _sv8)
    push    _outstack12_c
    push    _outstack12_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack12_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack12_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack12_0
#(js) }
#(end macro)    pushvX(I2P2,"_outstack" + _sv8)
#(end macro)        castFP(I+I,P+P, I,P)
#(begin macro)        popvX(IP,"nameA"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameA5_0
#(js) }
    pop     nameA5_1
#(js) }
    pop     nameA5_2
#(js) }
    pop     nameA5_s
    pop     nameA5_c
#(end macro)        popvX(IP,"nameA"+_fp1)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(IP) # drop nameB
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(IP) # drop nameB
#(end macro)                mulFP(FP_I,FP_P)
#(begin macro)                subX(FP)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "b__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24b___0
#(js) }
    pop     __tmp24b___1
#(js) }
    pop     __tmp24b___2
#(js) }
    pop     __tmp24b___s
    pop     __tmp24b___c
#(end macro)    popvX(X,"__tmp" + _xbits + "b__")
#(begin macro)    popvX(X,"__tmp" + _xbits + "a__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24a___0
#(js) }
    pop     __tmp24a___1
#(js) }
    pop     __tmp24a___2
#(js) }
    pop     __tmp24a___s
    pop     __tmp24a___c
#(end macro)    popvX(X,"__tmp" + _xbits + "a__")
#(begin macro)    subvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(js) _sv4++;
#(begin macro)    pushvX(X,nameA)
    push    __tmp24a___c
    push    __tmp24a___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24c___0
#(js) }
    pop     __tmp24c___1
#(js) }
    pop     __tmp24c___2
#(js) }
    pop     __tmp24c___s
    pop     __tmp24c___c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"subvvvXgX_" + _sv4)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm subvvvXgX_3_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm subvvvXgX_3_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_3_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_3_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_3_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"subvvvXgX_" + _sv4)
#(begin macro)        pushvX(X,nameB)
    push    __tmp24b___c
    push    __tmp24b___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"subvvvXgX_" + _sv4)
#(js) for (var xx=0; xx < X; xx++) {
    pop     subvvvXgX_3_0
#(js) }
    pop     subvvvXgX_3_1
#(js) }
    pop     subvvvXgX_3_2
#(js) }
    pop     subvvvXgX_3_s
    pop     subvvvXgX_3_c
#(end macro)        popvX(X,"subvvvXgX_" + _sv4)
        push 0
#(begin macro)        popsvX(X,"subvvvXgX_" + _sv4) # absolute number (always positive)
    POP    subvvvXgX_3_s
#(end macro)        popsvX(X,"subvvvXgX_" + _sv4) # absolute number (always positive)
        
        push    __tmp24b___s
        if    # nameB is negative 
            push    1
            sbm subvvvX_loop3
            while
#(begin macro)                pushvX(X,"subvvvXgX_"+ _sv4)
    push    subvvvXgX_3_c
    push    subvvvXgX_3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_3_0
#(js) }
#(end macro)                pushvX(X,"subvvvXgX_"+ _sv4)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push subvvvXgX_3_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_3_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_3_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_3_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at subvvvXgX_3_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_3_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_3_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_3_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at subvvvXgX_3_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push __tmp24c___s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    __tmp24c___s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("subvvvX_loop"+_sv4)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvX_loop3
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("subvvvX_loop"+_sv4)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm subvvvX_loop3
            while
#(begin macro)                pushvX(X,"subvvvXgX_"+ _sv4)
    push    subvvvXgX_3_c
    push    subvvvXgX_3_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_3_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_3_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_3_0
#(js) }
#(end macro)                pushvX(X,"subvvvXgX_"+ _sv4)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push subvvvXgX_3_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_3_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_3_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_3_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at subvvvXgX_3_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_3_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_3_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_3_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_3_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at subvvvXgX_3_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)                    decvX(X, name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push __tmp24c___s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X, name)
                else
#(begin macro)                    at_reset("subvvvX_loop"+_sv4)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvX_loop3
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("subvvvX_loop"+_sv4)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    subvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(begin macro)    pushvX(X,"__tmp" + _xbits + "c__")
    push    __tmp24c___c
    push    __tmp24c___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___0
#(js) }
#(end macro)    pushvX(X,"__tmp" + _xbits + "c__")
#(end macro)                subX(FP)
#(begin macro)                pushvX(FP,"pr")
    push    pr_c
    push    pr_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    pr_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    pr_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    pr_0
#(js) }
#(end macro)                pushvX(FP,"pr")
#(begin macro)                addX(FP)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "b__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24b___0
#(js) }
    pop     __tmp24b___1
#(js) }
    pop     __tmp24b___2
#(js) }
    pop     __tmp24b___s
    pop     __tmp24b___c
#(end macro)    popvX(X,"__tmp" + _xbits + "b__")
#(begin macro)    popvX(X,"__tmp" + _xbits + "a__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24a___0
#(js) }
    pop     __tmp24a___1
#(js) }
    pop     __tmp24a___2
#(js) }
    pop     __tmp24a___s
    pop     __tmp24a___c
#(end macro)    popvX(X,"__tmp" + _xbits + "a__")
#(begin macro)    addvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    __tmp24a___c
    push    __tmp24a___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24c___0
#(js) }
    pop     __tmp24c___1
#(js) }
    pop     __tmp24c___2
#(js) }
    pop     __tmp24c___s
    pop     __tmp24c___c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_8_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_8_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_8_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_8_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_8_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    __tmp24b___c
    push    __tmp24b___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_8_0
#(js) }
    pop     addvvvXgX_8_1
#(js) }
    pop     addvvvXgX_8_2
#(js) }
    pop     addvvvXgX_8_s
    pop     addvvvXgX_8_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_8_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    __tmp24b___s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop8
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_8_c
    push    addvvvXgX_8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_8_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_8_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_8_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_8_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_8_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_8_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_8_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_8_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_8_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_8_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push __tmp24c___s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop8
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop8
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_8_c
    push    addvvvXgX_8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_8_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_8_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_8_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_8_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_8_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_8_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_8_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_8_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_8_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_8_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_8_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push __tmp24c___s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    __tmp24c___s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop8
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(begin macro)    pushvX(X,"__tmp" + _xbits + "c__")
    push    __tmp24c___c
    push    __tmp24c___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___0
#(js) }
#(end macro)    pushvX(X,"__tmp" + _xbits + "c__")
#(end macro)                addX(FP)
#(begin macro)                popvX(FP,"newRe")
#(js) for (var xx=0; xx < X; xx++) {
    pop     newRe_0
#(js) }
    pop     newRe_1
#(js) }
    pop     newRe_2
#(js) }
    pop     newRe_s
    pop     newRe_c
#(end macro)                popvX(FP,"newRe")
            #    newIm = 2 * oldRe * oldIm + pi
#(begin macro)                pushFP(FP_I,FP_P,2)
#(begin macro)    pushX(I*1+P*1,0)
    push    0
    push    0
#(js) var absImmValue; absImmValue = immValue>=0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(end macro)    pushX(I*1+P*1,0)
#(begin macro)    setFP(I*1,P*1,immValue) 
#(js) _sv8++; 
#(js) var IP; IP = I+P;
#(js) var _sign = immValue >=0?0:1;
#(js) var _abs = immValue>=0?immValue:-immValue;
#(js) var _int; _int = _abs | 0;
#(js) var _fra; _fra = ((_abs - _int) * Math.pow(256,P)) | 0;
#(js) var _fp; _fp = _int * Math.pow(256,P) + _fra; if (_sign ==1) _fp = -_fp;
#(begin macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _instack13_0 - 0
#(js) }
    sbm _instack13_1 - 1
#(js) }
    sbm _instack13_2 - 2
#(js) }
    sbm _instack13_s - 3
    sbm _instack13_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    setvX(IP,"_instack"+_sv8, _fp)
    at _instack13_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(IP,"_instack"+_sv8, _fp)
#(end macro)    setFP(I*1,P*1,immValue) 
#(end macro)                pushFP(FP_I,FP_P,2)
#(begin macro)                pushvX(FP,"oldRe")
    push    oldRe_c
    push    oldRe_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldRe_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldRe_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldRe_0
#(js) }
#(end macro)                pushvX(FP,"oldRe")
#(begin macro)                mulFP(FP_I,FP_P)
#(js) _fp1++;
#(js) var IP ; IP = (I+P); 
#(js) var IP2 ; IP2 = 2 * IP;
#(begin macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameB6_0 - 0
#(js) }
    sbm nameB6_1 - 1
#(js) }
    sbm nameB6_2 - 2
#(js) }
    sbm nameB6_s - 3
    sbm nameB6_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameA6_0 - 5
#(js) }
    sbm nameA6_1 - 6
#(js) }
    sbm nameA6_2 - 7
#(js) }
    sbm nameA6_s - 8
    sbm nameA6_c - 9
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameAX6_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameAX6_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX6_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX6_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX6_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX6_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX6_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX6_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameBX6_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameBX6_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX6_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX6_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX6_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX6_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX6_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX6_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)        lvarX(IP2, "resultX" + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm resultX6_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm resultX6_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX6_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX6_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX6_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX6_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX6_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX6_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "resultX" + _fp1)
        
        # upcast nameA to nameAX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameA"+_fp1)
    push    nameA6_c
    push    nameA6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA6_0
#(js) }
#(end macro)        pushvX(IP,"nameA"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput11_0 - 0
#(js) }
    sbm _castXInput11_1 - 1
#(js) }
    sbm _castXInput11_2 - 2
#(js) }
    sbm _castXInput11_s - 3
    sbm _castXInput11_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput11_0    # 0 byte of _castXoutput11
#(js) }
    var _castXoutput11_1    # 1 byte of _castXoutput11
#(js) }
    var _castXoutput11_2    # 2 byte of _castXoutput11
#(js) }
    var _castXoutput11_3    # 3 byte of _castXoutput11
#(js) }
    var _castXoutput11_4    # 4 byte of _castXoutput11
#(js) }
    var _castXoutput11_5    # 5 byte of _castXoutput11
#(js) }
    var _castXoutput11_s    # Sign of _castXoutput11
    var _castXoutput11_c    # carry of _castXoutput11 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori11_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori11_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori11_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori11_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori11_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest11_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest11_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest11_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest11_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest11_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest11_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest11_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest11_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput11_c
    push    _castXInput11_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput11_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput11_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput11_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori11_0
#(js) }
    pop     ori11_1
#(js) }
    pop     ori11_2
#(js) }
    pop     ori11_s
    pop     ori11_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori11_s   
        pop     dest11_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori11_0
                pop     dest11_0
#(js) }
                push    ori11_1
                pop     dest11_1
#(js) }
                push    ori11_2
                pop     dest11_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest11_3
#(js) } 
                push    0
                pop     dest11_4
#(js) } 
                push    0
                pop     dest11_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest11_c
    push    dest11_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest11_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest11_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest11_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest11_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest11_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest11_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput11_0
#(js) }
    pop     _castXoutput11_1
#(js) }
    pop     _castXoutput11_2
#(js) }
    pop     _castXoutput11_3
#(js) }
    pop     _castXoutput11_4
#(js) }
    pop     _castXoutput11_5
#(js) }
    pop     _castXoutput11_s
    pop     _castXoutput11_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput11_c
    push    _castXoutput11_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput11_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput11_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput11_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput11_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput11_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput11_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameAX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameAX6_0
#(js) }
    pop     nameAX6_1
#(js) }
    pop     nameAX6_2
#(js) }
    pop     nameAX6_3
#(js) }
    pop     nameAX6_4
#(js) }
    pop     nameAX6_5
#(js) }
    pop     nameAX6_s
    pop     nameAX6_c
#(end macro)        popvX(IP2,"nameAX"+_fp1)

        # upcast nameB to nameBX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameB"+_fp1)
    push    nameB6_c
    push    nameB6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB6_0
#(js) }
#(end macro)        pushvX(IP,"nameB"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput12_0 - 0
#(js) }
    sbm _castXInput12_1 - 1
#(js) }
    sbm _castXInput12_2 - 2
#(js) }
    sbm _castXInput12_s - 3
    sbm _castXInput12_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput12_0    # 0 byte of _castXoutput12
#(js) }
    var _castXoutput12_1    # 1 byte of _castXoutput12
#(js) }
    var _castXoutput12_2    # 2 byte of _castXoutput12
#(js) }
    var _castXoutput12_3    # 3 byte of _castXoutput12
#(js) }
    var _castXoutput12_4    # 4 byte of _castXoutput12
#(js) }
    var _castXoutput12_5    # 5 byte of _castXoutput12
#(js) }
    var _castXoutput12_s    # Sign of _castXoutput12
    var _castXoutput12_c    # carry of _castXoutput12 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori12_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori12_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori12_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori12_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori12_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest12_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest12_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest12_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest12_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest12_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest12_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest12_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest12_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput12_c
    push    _castXInput12_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput12_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput12_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput12_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori12_0
#(js) }
    pop     ori12_1
#(js) }
    pop     ori12_2
#(js) }
    pop     ori12_s
    pop     ori12_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori12_s   
        pop     dest12_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori12_0
                pop     dest12_0
#(js) }
                push    ori12_1
                pop     dest12_1
#(js) }
                push    ori12_2
                pop     dest12_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest12_3
#(js) } 
                push    0
                pop     dest12_4
#(js) } 
                push    0
                pop     dest12_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest12_c
    push    dest12_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest12_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest12_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest12_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest12_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest12_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest12_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput12_0
#(js) }
    pop     _castXoutput12_1
#(js) }
    pop     _castXoutput12_2
#(js) }
    pop     _castXoutput12_3
#(js) }
    pop     _castXoutput12_4
#(js) }
    pop     _castXoutput12_5
#(js) }
    pop     _castXoutput12_s
    pop     _castXoutput12_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput12_c
    push    _castXoutput12_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput12_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput12_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput12_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput12_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput12_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput12_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameBX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameBX6_0
#(js) }
    pop     nameBX6_1
#(js) }
    pop     nameBX6_2
#(js) }
    pop     nameBX6_3
#(js) }
    pop     nameBX6_4
#(js) }
    pop     nameBX6_5
#(js) }
    pop     nameBX6_s
    pop     nameBX6_c
#(end macro)        popvX(IP2,"nameBX"+_fp1)
        
#(begin macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
#(js) _sv5++;
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameA6_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameA6_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA6_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA6_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA6_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA6_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA6_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA6_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        pushvX(X,nameA)
    push    nameAX6_c
    push    nameAX6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX6_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX6_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX6_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX6_0
#(js) }
#(end macro)        pushvX(X,nameA)
#(begin macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameA6_0
#(js) }
    pop     mulvvvXabsNameA6_1
#(js) }
    pop     mulvvvXabsNameA6_2
#(js) }
    pop     mulvvvXabsNameA6_3
#(js) }
    pop     mulvvvXabsNameA6_4
#(js) }
    pop     mulvvvXabsNameA6_5
#(js) }
    pop     mulvvvXabsNameA6_s
    pop     mulvvvXabsNameA6_c
#(end macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        lvar("mulvvvXsA" + _sv5, 0)
    push 0
    sbm mulvvvXsA6
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsA" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
    push    mulvvvXabsNameA6_s
#(end macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
        pop mulvvvXsA6
#(begin macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
    push    0
    pop     mulvvvXabsNameA6_s
#(end macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
        
#(begin macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameB6_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameB6_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB6_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB6_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB6_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB6_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB6_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB6_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        pushvX(X,nameB)
    push    nameBX6_c
    push    nameBX6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX6_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX6_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX6_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX6_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameB6_0
#(js) }
    pop     mulvvvXabsNameB6_1
#(js) }
    pop     mulvvvXabsNameB6_2
#(js) }
    pop     mulvvvXabsNameB6_3
#(js) }
    pop     mulvvvXabsNameB6_4
#(js) }
    pop     mulvvvXabsNameB6_5
#(js) }
    pop     mulvvvXabsNameB6_s
    pop     mulvvvXabsNameB6_c
#(end macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        lvar("mulvvvXsB" + _sv5, 0)
    push 0
    sbm mulvvvXsB6
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsB" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
    push    mulvvvXabsNameB6_s
#(end macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
        pop mulvvvXsB6
#(begin macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
    push    0
    pop     mulvvvXabsNameB6_s
#(end macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
        
#(begin macro)        resetvX(X,name)
    at resultX6_0
#(begin macro)        resetX(X)
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf [-]
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
#(end macro)        resetX(X)
    ta
#(end macro)        resetvX(X,name)

        push    1
        sbm mulvvvX_loop6
        while
#(begin macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx = 0 ; xx < X; xx++) {
    push mulvvvXabsNameB6_0
    bool
#(js) }
    push mulvvvXabsNameB6_1
    bool
#(js) }
    push mulvvvXabsNameB6_2
    bool
#(js) }
    push mulvvvXabsNameB6_3
    bool
#(js) }
    push mulvvvXabsNameB6_4
    bool
#(js) }
    push mulvvvXabsNameB6_5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
            if  # absNameB is not zero
#(begin macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)    addvvvX(X,name, name, nameA)
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    resultX6_c
    push    resultX6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     resultX6_0
#(js) }
    pop     resultX6_1
#(js) }
    pop     resultX6_2
#(js) }
    pop     resultX6_3
#(js) }
    pop     resultX6_4
#(js) }
    pop     resultX6_5
#(js) }
    pop     resultX6_s
    pop     resultX6_c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_9_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_9_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_9_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_9_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_9_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_9_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_9_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_9_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    mulvvvXabsNameA6_c
    push    mulvvvXabsNameA6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA6_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA6_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA6_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA6_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_9_0
#(js) }
    pop     addvvvXgX_9_1
#(js) }
    pop     addvvvXgX_9_2
#(js) }
    pop     addvvvXgX_9_3
#(js) }
    pop     addvvvXgX_9_4
#(js) }
    pop     addvvvXgX_9_5
#(js) }
    pop     addvvvXgX_9_s
    pop     addvvvXgX_9_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_9_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    mulvvvXabsNameA6_s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop9
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_9_c
    push    addvvvXgX_9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_9_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_9_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_9_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push resultX6_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX6_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at resultX6_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop9
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop9
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_9_c
    push    addvvvXgX_9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_9_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_9_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_9_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_9_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_9_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_9_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_9_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push resultX6_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX6_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX6_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX6_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at resultX6_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    resultX6_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX6_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX6_1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX6_2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX6_3
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX6_4
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX6_5
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at resultX6_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop9
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,name, name, nameA)
#(end macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push mulvvvXabsNameB6_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB6_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB6_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB6_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB6_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB6_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB6_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at mulvvvXabsNameB6_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB6_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB6_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB6_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB6_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB6_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB6_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB6_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at mulvvvXabsNameB6_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
            else 
#(begin macro)                at_reset("mulvvvX_loop"+_sv5)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvX_loop6
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                at_reset("mulvvvX_loop"+_sv5)
            fi
        wend        
        # resolve sign
        push mulvvvXsA6
        push mulvvvXsB6
        diff    # if sign(nameA) <> sign(nameB) then name is negative
        if
#(begin macro)            at_set(name +"_s",1)
#(begin macro)    at_2("set",a,b)
    at resultX6_s
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)            at_set(name +"_s",1)
        fi        
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
        
#(begin macro)        pushvX(IP2,"resultX"+_fp1)
    push    resultX6_c
    push    resultX6_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX6_0
#(js) }
#(end macro)        pushvX(IP2,"resultX"+_fp1)
#(begin macro)        castFP(I+I,P+P, I,P)
#(js) _sv8++; 
#(js) var I1P1; I1P1 = I1+P1;
#(js) var I2P2; I2P2 = I2+P2;
#(begin macro)    varX(I1P1,"_instack" +_sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _instack14_0    # 0 byte of _instack14
#(js) }
    var _instack14_1    # 1 byte of _instack14
#(js) }
    var _instack14_2    # 2 byte of _instack14
#(js) }
    var _instack14_3    # 3 byte of _instack14
#(js) }
    var _instack14_4    # 4 byte of _instack14
#(js) }
    var _instack14_5    # 5 byte of _instack14
#(js) }
    var _instack14_s    # Sign of _instack14
    var _instack14_c    # carry of _instack14 
#(end macro)    varX(I1P1,"_instack" +_sv8)
#(begin macro)    varX(I2P2,"_outstack" + _sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _outstack14_0    # 0 byte of _outstack14
#(js) }
    var _outstack14_1    # 1 byte of _outstack14
#(js) }
    var _outstack14_2    # 2 byte of _outstack14
#(js) }
    var _outstack14_s    # Sign of _outstack14
    var _outstack14_c    # carry of _outstack14 
#(end macro)    varX(I2P2,"_outstack" + _sv8)
    
#(begin macro)    popvX(I1P1,"_instack" + _sv8)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _instack14_0
#(js) }
    pop     _instack14_1
#(js) }
    pop     _instack14_2
#(js) }
    pop     _instack14_3
#(js) }
    pop     _instack14_4
#(js) }
    pop     _instack14_5
#(js) }
    pop     _instack14_s
    pop     _instack14_c
#(end macro)    popvX(I1P1,"_instack" + _sv8)
    # reset outstack
#(begin macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    at _outstack14_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    # sign
    push _instack14_s
    pop _outstack14_s
    # integer part
#(js) if (I1 >= I2) {
#(js) for (var xx = 0 ; xx < I2; xx++) {
            push _instack14_4
            pop _outstack14_2
#(js) }
#(js) } else { // I1 < I2
    # fract part
#(js) if (P1 >= P2) {
#(js) for (var xx = 0 ; xx <P2; xx++) {
            push _instack14_3
            pop _outstack14_1
#(js) }
            push _instack14_2
            pop _outstack14_0
#(js) }
#(js) } else { // P1 < P2
#(begin macro)    pushvX(I2P2,"_outstack" + _sv8)
    push    _outstack14_c
    push    _outstack14_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack14_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack14_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack14_0
#(js) }
#(end macro)    pushvX(I2P2,"_outstack" + _sv8)
#(end macro)        castFP(I+I,P+P, I,P)
#(begin macro)        popvX(IP,"nameA"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameA6_0
#(js) }
    pop     nameA6_1
#(js) }
    pop     nameA6_2
#(js) }
    pop     nameA6_s
    pop     nameA6_c
#(end macro)        popvX(IP,"nameA"+_fp1)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(IP) # drop nameB
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(IP) # drop nameB
#(end macro)                mulFP(FP_I,FP_P)
#(begin macro)                pushvX(FP,"oldIm")
    push    oldIm_c
    push    oldIm_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldIm_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldIm_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    oldIm_0
#(js) }
#(end macro)                pushvX(FP,"oldIm")
#(begin macro)                mulFP(FP_I,FP_P)
#(js) _fp1++;
#(js) var IP ; IP = (I+P); 
#(js) var IP2 ; IP2 = 2 * IP;
#(begin macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameB7_0 - 0
#(js) }
    sbm nameB7_1 - 1
#(js) }
    sbm nameB7_2 - 2
#(js) }
    sbm nameB7_s - 3
    sbm nameB7_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameA7_0 - 5
#(js) }
    sbm nameA7_1 - 6
#(js) }
    sbm nameA7_2 - 7
#(js) }
    sbm nameA7_s - 8
    sbm nameA7_c - 9
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameAX7_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameAX7_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX7_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX7_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX7_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX7_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX7_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX7_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameBX7_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameBX7_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX7_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX7_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX7_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX7_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX7_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX7_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)        lvarX(IP2, "resultX" + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm resultX7_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm resultX7_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX7_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX7_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX7_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX7_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX7_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX7_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "resultX" + _fp1)
        
        # upcast nameA to nameAX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameA"+_fp1)
    push    nameA7_c
    push    nameA7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA7_0
#(js) }
#(end macro)        pushvX(IP,"nameA"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput13_0 - 0
#(js) }
    sbm _castXInput13_1 - 1
#(js) }
    sbm _castXInput13_2 - 2
#(js) }
    sbm _castXInput13_s - 3
    sbm _castXInput13_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput13_0    # 0 byte of _castXoutput13
#(js) }
    var _castXoutput13_1    # 1 byte of _castXoutput13
#(js) }
    var _castXoutput13_2    # 2 byte of _castXoutput13
#(js) }
    var _castXoutput13_3    # 3 byte of _castXoutput13
#(js) }
    var _castXoutput13_4    # 4 byte of _castXoutput13
#(js) }
    var _castXoutput13_5    # 5 byte of _castXoutput13
#(js) }
    var _castXoutput13_s    # Sign of _castXoutput13
    var _castXoutput13_c    # carry of _castXoutput13 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori13_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori13_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori13_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori13_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori13_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest13_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest13_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest13_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest13_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest13_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest13_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest13_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest13_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput13_c
    push    _castXInput13_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput13_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput13_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput13_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori13_0
#(js) }
    pop     ori13_1
#(js) }
    pop     ori13_2
#(js) }
    pop     ori13_s
    pop     ori13_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori13_s   
        pop     dest13_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori13_0
                pop     dest13_0
#(js) }
                push    ori13_1
                pop     dest13_1
#(js) }
                push    ori13_2
                pop     dest13_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest13_3
#(js) } 
                push    0
                pop     dest13_4
#(js) } 
                push    0
                pop     dest13_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest13_c
    push    dest13_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest13_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest13_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest13_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest13_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest13_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest13_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput13_0
#(js) }
    pop     _castXoutput13_1
#(js) }
    pop     _castXoutput13_2
#(js) }
    pop     _castXoutput13_3
#(js) }
    pop     _castXoutput13_4
#(js) }
    pop     _castXoutput13_5
#(js) }
    pop     _castXoutput13_s
    pop     _castXoutput13_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput13_c
    push    _castXoutput13_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput13_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput13_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput13_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput13_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput13_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput13_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameAX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameAX7_0
#(js) }
    pop     nameAX7_1
#(js) }
    pop     nameAX7_2
#(js) }
    pop     nameAX7_3
#(js) }
    pop     nameAX7_4
#(js) }
    pop     nameAX7_5
#(js) }
    pop     nameAX7_s
    pop     nameAX7_c
#(end macro)        popvX(IP2,"nameAX"+_fp1)

        # upcast nameB to nameBX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameB"+_fp1)
    push    nameB7_c
    push    nameB7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB7_0
#(js) }
#(end macro)        pushvX(IP,"nameB"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput14_0 - 0
#(js) }
    sbm _castXInput14_1 - 1
#(js) }
    sbm _castXInput14_2 - 2
#(js) }
    sbm _castXInput14_s - 3
    sbm _castXInput14_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput14_0    # 0 byte of _castXoutput14
#(js) }
    var _castXoutput14_1    # 1 byte of _castXoutput14
#(js) }
    var _castXoutput14_2    # 2 byte of _castXoutput14
#(js) }
    var _castXoutput14_3    # 3 byte of _castXoutput14
#(js) }
    var _castXoutput14_4    # 4 byte of _castXoutput14
#(js) }
    var _castXoutput14_5    # 5 byte of _castXoutput14
#(js) }
    var _castXoutput14_s    # Sign of _castXoutput14
    var _castXoutput14_c    # carry of _castXoutput14 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori14_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori14_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori14_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori14_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori14_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest14_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest14_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest14_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest14_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest14_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest14_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest14_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest14_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput14_c
    push    _castXInput14_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput14_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput14_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput14_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori14_0
#(js) }
    pop     ori14_1
#(js) }
    pop     ori14_2
#(js) }
    pop     ori14_s
    pop     ori14_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori14_s   
        pop     dest14_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori14_0
                pop     dest14_0
#(js) }
                push    ori14_1
                pop     dest14_1
#(js) }
                push    ori14_2
                pop     dest14_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest14_3
#(js) } 
                push    0
                pop     dest14_4
#(js) } 
                push    0
                pop     dest14_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest14_c
    push    dest14_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest14_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest14_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest14_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest14_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest14_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest14_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput14_0
#(js) }
    pop     _castXoutput14_1
#(js) }
    pop     _castXoutput14_2
#(js) }
    pop     _castXoutput14_3
#(js) }
    pop     _castXoutput14_4
#(js) }
    pop     _castXoutput14_5
#(js) }
    pop     _castXoutput14_s
    pop     _castXoutput14_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput14_c
    push    _castXoutput14_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput14_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput14_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput14_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput14_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput14_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput14_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameBX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameBX7_0
#(js) }
    pop     nameBX7_1
#(js) }
    pop     nameBX7_2
#(js) }
    pop     nameBX7_3
#(js) }
    pop     nameBX7_4
#(js) }
    pop     nameBX7_5
#(js) }
    pop     nameBX7_s
    pop     nameBX7_c
#(end macro)        popvX(IP2,"nameBX"+_fp1)
        
#(begin macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
#(js) _sv5++;
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameA7_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameA7_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA7_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA7_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA7_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA7_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA7_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA7_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        pushvX(X,nameA)
    push    nameAX7_c
    push    nameAX7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX7_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX7_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX7_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX7_0
#(js) }
#(end macro)        pushvX(X,nameA)
#(begin macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameA7_0
#(js) }
    pop     mulvvvXabsNameA7_1
#(js) }
    pop     mulvvvXabsNameA7_2
#(js) }
    pop     mulvvvXabsNameA7_3
#(js) }
    pop     mulvvvXabsNameA7_4
#(js) }
    pop     mulvvvXabsNameA7_5
#(js) }
    pop     mulvvvXabsNameA7_s
    pop     mulvvvXabsNameA7_c
#(end macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        lvar("mulvvvXsA" + _sv5, 0)
    push 0
    sbm mulvvvXsA7
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsA" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
    push    mulvvvXabsNameA7_s
#(end macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
        pop mulvvvXsA7
#(begin macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
    push    0
    pop     mulvvvXabsNameA7_s
#(end macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
        
#(begin macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameB7_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameB7_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB7_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB7_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB7_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB7_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB7_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB7_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        pushvX(X,nameB)
    push    nameBX7_c
    push    nameBX7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX7_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX7_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX7_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX7_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameB7_0
#(js) }
    pop     mulvvvXabsNameB7_1
#(js) }
    pop     mulvvvXabsNameB7_2
#(js) }
    pop     mulvvvXabsNameB7_3
#(js) }
    pop     mulvvvXabsNameB7_4
#(js) }
    pop     mulvvvXabsNameB7_5
#(js) }
    pop     mulvvvXabsNameB7_s
    pop     mulvvvXabsNameB7_c
#(end macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        lvar("mulvvvXsB" + _sv5, 0)
    push 0
    sbm mulvvvXsB7
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsB" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
    push    mulvvvXabsNameB7_s
#(end macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
        pop mulvvvXsB7
#(begin macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
    push    0
    pop     mulvvvXabsNameB7_s
#(end macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
        
#(begin macro)        resetvX(X,name)
    at resultX7_0
#(begin macro)        resetX(X)
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf [-]
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
#(end macro)        resetX(X)
    ta
#(end macro)        resetvX(X,name)

        push    1
        sbm mulvvvX_loop7
        while
#(begin macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx = 0 ; xx < X; xx++) {
    push mulvvvXabsNameB7_0
    bool
#(js) }
    push mulvvvXabsNameB7_1
    bool
#(js) }
    push mulvvvXabsNameB7_2
    bool
#(js) }
    push mulvvvXabsNameB7_3
    bool
#(js) }
    push mulvvvXabsNameB7_4
    bool
#(js) }
    push mulvvvXabsNameB7_5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
            if  # absNameB is not zero
#(begin macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)    addvvvX(X,name, name, nameA)
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    resultX7_c
    push    resultX7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     resultX7_0
#(js) }
    pop     resultX7_1
#(js) }
    pop     resultX7_2
#(js) }
    pop     resultX7_3
#(js) }
    pop     resultX7_4
#(js) }
    pop     resultX7_5
#(js) }
    pop     resultX7_s
    pop     resultX7_c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_10_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_10_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_10_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_10_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_10_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_10_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_10_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_10_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    mulvvvXabsNameA7_c
    push    mulvvvXabsNameA7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA7_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA7_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA7_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA7_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_10_0
#(js) }
    pop     addvvvXgX_10_1
#(js) }
    pop     addvvvXgX_10_2
#(js) }
    pop     addvvvXgX_10_3
#(js) }
    pop     addvvvXgX_10_4
#(js) }
    pop     addvvvXgX_10_5
#(js) }
    pop     addvvvXgX_10_s
    pop     addvvvXgX_10_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_10_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    mulvvvXabsNameA7_s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop10
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_10_c
    push    addvvvXgX_10_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_10_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_10_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_10_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push resultX7_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX7_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at resultX7_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop10
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop10
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_10_c
    push    addvvvXgX_10_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_10_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_10_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_10_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_10_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_10_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_10_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_10_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push resultX7_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX7_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX7_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX7_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at resultX7_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    resultX7_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX7_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX7_1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX7_2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX7_3
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX7_4
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX7_5
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at resultX7_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop10
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,name, name, nameA)
#(end macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push mulvvvXabsNameB7_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB7_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB7_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB7_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB7_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB7_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB7_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at mulvvvXabsNameB7_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB7_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB7_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB7_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB7_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB7_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB7_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB7_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at mulvvvXabsNameB7_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
            else 
#(begin macro)                at_reset("mulvvvX_loop"+_sv5)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvX_loop7
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                at_reset("mulvvvX_loop"+_sv5)
            fi
        wend        
        # resolve sign
        push mulvvvXsA7
        push mulvvvXsB7
        diff    # if sign(nameA) <> sign(nameB) then name is negative
        if
#(begin macro)            at_set(name +"_s",1)
#(begin macro)    at_2("set",a,b)
    at resultX7_s
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)            at_set(name +"_s",1)
        fi        
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
        
#(begin macro)        pushvX(IP2,"resultX"+_fp1)
    push    resultX7_c
    push    resultX7_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX7_0
#(js) }
#(end macro)        pushvX(IP2,"resultX"+_fp1)
#(begin macro)        castFP(I+I,P+P, I,P)
#(js) _sv8++; 
#(js) var I1P1; I1P1 = I1+P1;
#(js) var I2P2; I2P2 = I2+P2;
#(begin macro)    varX(I1P1,"_instack" +_sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _instack15_0    # 0 byte of _instack15
#(js) }
    var _instack15_1    # 1 byte of _instack15
#(js) }
    var _instack15_2    # 2 byte of _instack15
#(js) }
    var _instack15_3    # 3 byte of _instack15
#(js) }
    var _instack15_4    # 4 byte of _instack15
#(js) }
    var _instack15_5    # 5 byte of _instack15
#(js) }
    var _instack15_s    # Sign of _instack15
    var _instack15_c    # carry of _instack15 
#(end macro)    varX(I1P1,"_instack" +_sv8)
#(begin macro)    varX(I2P2,"_outstack" + _sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _outstack15_0    # 0 byte of _outstack15
#(js) }
    var _outstack15_1    # 1 byte of _outstack15
#(js) }
    var _outstack15_2    # 2 byte of _outstack15
#(js) }
    var _outstack15_s    # Sign of _outstack15
    var _outstack15_c    # carry of _outstack15 
#(end macro)    varX(I2P2,"_outstack" + _sv8)
    
#(begin macro)    popvX(I1P1,"_instack" + _sv8)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _instack15_0
#(js) }
    pop     _instack15_1
#(js) }
    pop     _instack15_2
#(js) }
    pop     _instack15_3
#(js) }
    pop     _instack15_4
#(js) }
    pop     _instack15_5
#(js) }
    pop     _instack15_s
    pop     _instack15_c
#(end macro)    popvX(I1P1,"_instack" + _sv8)
    # reset outstack
#(begin macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    at _outstack15_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    # sign
    push _instack15_s
    pop _outstack15_s
    # integer part
#(js) if (I1 >= I2) {
#(js) for (var xx = 0 ; xx < I2; xx++) {
            push _instack15_4
            pop _outstack15_2
#(js) }
#(js) } else { // I1 < I2
    # fract part
#(js) if (P1 >= P2) {
#(js) for (var xx = 0 ; xx <P2; xx++) {
            push _instack15_3
            pop _outstack15_1
#(js) }
            push _instack15_2
            pop _outstack15_0
#(js) }
#(js) } else { // P1 < P2
#(begin macro)    pushvX(I2P2,"_outstack" + _sv8)
    push    _outstack15_c
    push    _outstack15_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack15_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack15_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack15_0
#(js) }
#(end macro)    pushvX(I2P2,"_outstack" + _sv8)
#(end macro)        castFP(I+I,P+P, I,P)
#(begin macro)        popvX(IP,"nameA"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameA7_0
#(js) }
    pop     nameA7_1
#(js) }
    pop     nameA7_2
#(js) }
    pop     nameA7_s
    pop     nameA7_c
#(end macro)        popvX(IP,"nameA"+_fp1)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(IP) # drop nameB
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(IP) # drop nameB
#(end macro)                mulFP(FP_I,FP_P)
#(begin macro)                pushvX(FP,"pi")
    push    pi_c
    push    pi_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    pi_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    pi_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    pi_0
#(js) }
#(end macro)                pushvX(FP,"pi")
#(begin macro)                addX(FP)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "b__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24b___0
#(js) }
    pop     __tmp24b___1
#(js) }
    pop     __tmp24b___2
#(js) }
    pop     __tmp24b___s
    pop     __tmp24b___c
#(end macro)    popvX(X,"__tmp" + _xbits + "b__")
#(begin macro)    popvX(X,"__tmp" + _xbits + "a__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24a___0
#(js) }
    pop     __tmp24a___1
#(js) }
    pop     __tmp24a___2
#(js) }
    pop     __tmp24a___s
    pop     __tmp24a___c
#(end macro)    popvX(X,"__tmp" + _xbits + "a__")
#(begin macro)    addvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    __tmp24a___c
    push    __tmp24a___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24c___0
#(js) }
    pop     __tmp24c___1
#(js) }
    pop     __tmp24c___2
#(js) }
    pop     __tmp24c___s
    pop     __tmp24c___c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_11_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_11_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_11_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_11_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_11_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    __tmp24b___c
    push    __tmp24b___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_11_0
#(js) }
    pop     addvvvXgX_11_1
#(js) }
    pop     addvvvXgX_11_2
#(js) }
    pop     addvvvXgX_11_s
    pop     addvvvXgX_11_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_11_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    __tmp24b___s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop11
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_11_c
    push    addvvvXgX_11_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_11_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_11_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_11_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_11_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_11_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_11_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_11_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_11_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_11_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_11_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_11_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_11_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push __tmp24c___s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop11
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop11
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_11_c
    push    addvvvXgX_11_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_11_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_11_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_11_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_11_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_11_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_11_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_11_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_11_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_11_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_11_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_11_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_11_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_11_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push __tmp24c___s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    __tmp24c___s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop11
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(begin macro)    pushvX(X,"__tmp" + _xbits + "c__")
    push    __tmp24c___c
    push    __tmp24c___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___0
#(js) }
#(end macro)    pushvX(X,"__tmp" + _xbits + "c__")
#(end macro)                addX(FP)
#(begin macro)                popvX(FP,"newIm")
#(js) for (var xx=0; xx < X; xx++) {
    pop     newIm_0
#(js) }
    pop     newIm_1
#(js) }
    pop     newIm_2
#(js) }
    pop     newIm_s
    pop     newIm_c
#(end macro)                popvX(FP,"newIm")
            #    if (newRe *  newRe +  newIm * newIm) > 4 break for
                ## newRe *  newRe +  newIm * newIm
#(begin macro)                pushvX(FP,"newRe")
    push    newRe_c
    push    newRe_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newRe_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newRe_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newRe_0
#(js) }
#(end macro)                pushvX(FP,"newRe")
#(begin macro)                pushvX(FP,"newRe")
    push    newRe_c
    push    newRe_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newRe_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newRe_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newRe_0
#(js) }
#(end macro)                pushvX(FP,"newRe")
#(begin macro)                mulFP(FP_I,FP_P)                
#(js) _fp1++;
#(js) var IP ; IP = (I+P); 
#(js) var IP2 ; IP2 = 2 * IP;
#(begin macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameB8_0 - 0
#(js) }
    sbm nameB8_1 - 1
#(js) }
    sbm nameB8_2 - 2
#(js) }
    sbm nameB8_s - 3
    sbm nameB8_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameA8_0 - 5
#(js) }
    sbm nameA8_1 - 6
#(js) }
    sbm nameA8_2 - 7
#(js) }
    sbm nameA8_s - 8
    sbm nameA8_c - 9
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameAX8_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameAX8_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX8_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX8_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX8_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX8_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX8_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX8_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameBX8_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameBX8_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX8_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX8_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX8_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX8_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX8_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX8_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)        lvarX(IP2, "resultX" + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm resultX8_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm resultX8_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX8_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX8_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX8_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX8_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX8_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX8_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "resultX" + _fp1)
        
        # upcast nameA to nameAX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameA"+_fp1)
    push    nameA8_c
    push    nameA8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA8_0
#(js) }
#(end macro)        pushvX(IP,"nameA"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput15_0 - 0
#(js) }
    sbm _castXInput15_1 - 1
#(js) }
    sbm _castXInput15_2 - 2
#(js) }
    sbm _castXInput15_s - 3
    sbm _castXInput15_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput15_0    # 0 byte of _castXoutput15
#(js) }
    var _castXoutput15_1    # 1 byte of _castXoutput15
#(js) }
    var _castXoutput15_2    # 2 byte of _castXoutput15
#(js) }
    var _castXoutput15_3    # 3 byte of _castXoutput15
#(js) }
    var _castXoutput15_4    # 4 byte of _castXoutput15
#(js) }
    var _castXoutput15_5    # 5 byte of _castXoutput15
#(js) }
    var _castXoutput15_s    # Sign of _castXoutput15
    var _castXoutput15_c    # carry of _castXoutput15 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori15_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori15_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori15_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori15_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori15_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest15_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest15_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest15_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest15_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest15_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest15_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest15_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest15_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput15_c
    push    _castXInput15_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput15_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput15_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput15_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori15_0
#(js) }
    pop     ori15_1
#(js) }
    pop     ori15_2
#(js) }
    pop     ori15_s
    pop     ori15_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori15_s   
        pop     dest15_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori15_0
                pop     dest15_0
#(js) }
                push    ori15_1
                pop     dest15_1
#(js) }
                push    ori15_2
                pop     dest15_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest15_3
#(js) } 
                push    0
                pop     dest15_4
#(js) } 
                push    0
                pop     dest15_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest15_c
    push    dest15_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest15_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest15_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest15_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest15_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest15_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest15_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput15_0
#(js) }
    pop     _castXoutput15_1
#(js) }
    pop     _castXoutput15_2
#(js) }
    pop     _castXoutput15_3
#(js) }
    pop     _castXoutput15_4
#(js) }
    pop     _castXoutput15_5
#(js) }
    pop     _castXoutput15_s
    pop     _castXoutput15_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput15_c
    push    _castXoutput15_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput15_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput15_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput15_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput15_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput15_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput15_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameAX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameAX8_0
#(js) }
    pop     nameAX8_1
#(js) }
    pop     nameAX8_2
#(js) }
    pop     nameAX8_3
#(js) }
    pop     nameAX8_4
#(js) }
    pop     nameAX8_5
#(js) }
    pop     nameAX8_s
    pop     nameAX8_c
#(end macro)        popvX(IP2,"nameAX"+_fp1)

        # upcast nameB to nameBX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameB"+_fp1)
    push    nameB8_c
    push    nameB8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB8_0
#(js) }
#(end macro)        pushvX(IP,"nameB"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput16_0 - 0
#(js) }
    sbm _castXInput16_1 - 1
#(js) }
    sbm _castXInput16_2 - 2
#(js) }
    sbm _castXInput16_s - 3
    sbm _castXInput16_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput16_0    # 0 byte of _castXoutput16
#(js) }
    var _castXoutput16_1    # 1 byte of _castXoutput16
#(js) }
    var _castXoutput16_2    # 2 byte of _castXoutput16
#(js) }
    var _castXoutput16_3    # 3 byte of _castXoutput16
#(js) }
    var _castXoutput16_4    # 4 byte of _castXoutput16
#(js) }
    var _castXoutput16_5    # 5 byte of _castXoutput16
#(js) }
    var _castXoutput16_s    # Sign of _castXoutput16
    var _castXoutput16_c    # carry of _castXoutput16 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori16_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori16_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori16_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori16_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori16_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest16_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest16_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest16_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest16_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest16_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest16_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest16_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest16_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput16_c
    push    _castXInput16_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput16_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput16_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput16_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori16_0
#(js) }
    pop     ori16_1
#(js) }
    pop     ori16_2
#(js) }
    pop     ori16_s
    pop     ori16_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori16_s   
        pop     dest16_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori16_0
                pop     dest16_0
#(js) }
                push    ori16_1
                pop     dest16_1
#(js) }
                push    ori16_2
                pop     dest16_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest16_3
#(js) } 
                push    0
                pop     dest16_4
#(js) } 
                push    0
                pop     dest16_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest16_c
    push    dest16_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest16_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest16_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest16_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest16_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest16_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest16_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput16_0
#(js) }
    pop     _castXoutput16_1
#(js) }
    pop     _castXoutput16_2
#(js) }
    pop     _castXoutput16_3
#(js) }
    pop     _castXoutput16_4
#(js) }
    pop     _castXoutput16_5
#(js) }
    pop     _castXoutput16_s
    pop     _castXoutput16_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput16_c
    push    _castXoutput16_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput16_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput16_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput16_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput16_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput16_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput16_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameBX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameBX8_0
#(js) }
    pop     nameBX8_1
#(js) }
    pop     nameBX8_2
#(js) }
    pop     nameBX8_3
#(js) }
    pop     nameBX8_4
#(js) }
    pop     nameBX8_5
#(js) }
    pop     nameBX8_s
    pop     nameBX8_c
#(end macro)        popvX(IP2,"nameBX"+_fp1)
        
#(begin macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
#(js) _sv5++;
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameA8_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameA8_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA8_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA8_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA8_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA8_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA8_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA8_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        pushvX(X,nameA)
    push    nameAX8_c
    push    nameAX8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX8_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX8_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX8_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX8_0
#(js) }
#(end macro)        pushvX(X,nameA)
#(begin macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameA8_0
#(js) }
    pop     mulvvvXabsNameA8_1
#(js) }
    pop     mulvvvXabsNameA8_2
#(js) }
    pop     mulvvvXabsNameA8_3
#(js) }
    pop     mulvvvXabsNameA8_4
#(js) }
    pop     mulvvvXabsNameA8_5
#(js) }
    pop     mulvvvXabsNameA8_s
    pop     mulvvvXabsNameA8_c
#(end macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        lvar("mulvvvXsA" + _sv5, 0)
    push 0
    sbm mulvvvXsA8
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsA" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
    push    mulvvvXabsNameA8_s
#(end macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
        pop mulvvvXsA8
#(begin macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
    push    0
    pop     mulvvvXabsNameA8_s
#(end macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
        
#(begin macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameB8_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameB8_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB8_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB8_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB8_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB8_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB8_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB8_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        pushvX(X,nameB)
    push    nameBX8_c
    push    nameBX8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX8_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX8_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX8_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX8_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameB8_0
#(js) }
    pop     mulvvvXabsNameB8_1
#(js) }
    pop     mulvvvXabsNameB8_2
#(js) }
    pop     mulvvvXabsNameB8_3
#(js) }
    pop     mulvvvXabsNameB8_4
#(js) }
    pop     mulvvvXabsNameB8_5
#(js) }
    pop     mulvvvXabsNameB8_s
    pop     mulvvvXabsNameB8_c
#(end macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        lvar("mulvvvXsB" + _sv5, 0)
    push 0
    sbm mulvvvXsB8
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsB" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
    push    mulvvvXabsNameB8_s
#(end macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
        pop mulvvvXsB8
#(begin macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
    push    0
    pop     mulvvvXabsNameB8_s
#(end macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
        
#(begin macro)        resetvX(X,name)
    at resultX8_0
#(begin macro)        resetX(X)
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf [-]
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
#(end macro)        resetX(X)
    ta
#(end macro)        resetvX(X,name)

        push    1
        sbm mulvvvX_loop8
        while
#(begin macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx = 0 ; xx < X; xx++) {
    push mulvvvXabsNameB8_0
    bool
#(js) }
    push mulvvvXabsNameB8_1
    bool
#(js) }
    push mulvvvXabsNameB8_2
    bool
#(js) }
    push mulvvvXabsNameB8_3
    bool
#(js) }
    push mulvvvXabsNameB8_4
    bool
#(js) }
    push mulvvvXabsNameB8_5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
            if  # absNameB is not zero
#(begin macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)    addvvvX(X,name, name, nameA)
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    resultX8_c
    push    resultX8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     resultX8_0
#(js) }
    pop     resultX8_1
#(js) }
    pop     resultX8_2
#(js) }
    pop     resultX8_3
#(js) }
    pop     resultX8_4
#(js) }
    pop     resultX8_5
#(js) }
    pop     resultX8_s
    pop     resultX8_c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_12_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_12_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_12_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_12_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_12_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_12_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_12_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_12_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    mulvvvXabsNameA8_c
    push    mulvvvXabsNameA8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA8_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA8_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA8_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA8_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_12_0
#(js) }
    pop     addvvvXgX_12_1
#(js) }
    pop     addvvvXgX_12_2
#(js) }
    pop     addvvvXgX_12_3
#(js) }
    pop     addvvvXgX_12_4
#(js) }
    pop     addvvvXgX_12_5
#(js) }
    pop     addvvvXgX_12_s
    pop     addvvvXgX_12_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_12_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    mulvvvXabsNameA8_s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop12
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_12_c
    push    addvvvXgX_12_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_12_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_12_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_12_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push resultX8_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX8_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at resultX8_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop12
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop12
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_12_c
    push    addvvvXgX_12_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_12_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_12_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_12_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_12_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_12_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_12_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_12_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push resultX8_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX8_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX8_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX8_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at resultX8_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    resultX8_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX8_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX8_1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX8_2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX8_3
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX8_4
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX8_5
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at resultX8_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop12
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,name, name, nameA)
#(end macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push mulvvvXabsNameB8_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB8_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB8_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB8_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB8_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB8_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB8_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at mulvvvXabsNameB8_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB8_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB8_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB8_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB8_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB8_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB8_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB8_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at mulvvvXabsNameB8_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
            else 
#(begin macro)                at_reset("mulvvvX_loop"+_sv5)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvX_loop8
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                at_reset("mulvvvX_loop"+_sv5)
            fi
        wend        
        # resolve sign
        push mulvvvXsA8
        push mulvvvXsB8
        diff    # if sign(nameA) <> sign(nameB) then name is negative
        if
#(begin macro)            at_set(name +"_s",1)
#(begin macro)    at_2("set",a,b)
    at resultX8_s
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)            at_set(name +"_s",1)
        fi        
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
        
#(begin macro)        pushvX(IP2,"resultX"+_fp1)
    push    resultX8_c
    push    resultX8_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX8_0
#(js) }
#(end macro)        pushvX(IP2,"resultX"+_fp1)
#(begin macro)        castFP(I+I,P+P, I,P)
#(js) _sv8++; 
#(js) var I1P1; I1P1 = I1+P1;
#(js) var I2P2; I2P2 = I2+P2;
#(begin macro)    varX(I1P1,"_instack" +_sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _instack16_0    # 0 byte of _instack16
#(js) }
    var _instack16_1    # 1 byte of _instack16
#(js) }
    var _instack16_2    # 2 byte of _instack16
#(js) }
    var _instack16_3    # 3 byte of _instack16
#(js) }
    var _instack16_4    # 4 byte of _instack16
#(js) }
    var _instack16_5    # 5 byte of _instack16
#(js) }
    var _instack16_s    # Sign of _instack16
    var _instack16_c    # carry of _instack16 
#(end macro)    varX(I1P1,"_instack" +_sv8)
#(begin macro)    varX(I2P2,"_outstack" + _sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _outstack16_0    # 0 byte of _outstack16
#(js) }
    var _outstack16_1    # 1 byte of _outstack16
#(js) }
    var _outstack16_2    # 2 byte of _outstack16
#(js) }
    var _outstack16_s    # Sign of _outstack16
    var _outstack16_c    # carry of _outstack16 
#(end macro)    varX(I2P2,"_outstack" + _sv8)
    
#(begin macro)    popvX(I1P1,"_instack" + _sv8)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _instack16_0
#(js) }
    pop     _instack16_1
#(js) }
    pop     _instack16_2
#(js) }
    pop     _instack16_3
#(js) }
    pop     _instack16_4
#(js) }
    pop     _instack16_5
#(js) }
    pop     _instack16_s
    pop     _instack16_c
#(end macro)    popvX(I1P1,"_instack" + _sv8)
    # reset outstack
#(begin macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    at _outstack16_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    # sign
    push _instack16_s
    pop _outstack16_s
    # integer part
#(js) if (I1 >= I2) {
#(js) for (var xx = 0 ; xx < I2; xx++) {
            push _instack16_4
            pop _outstack16_2
#(js) }
#(js) } else { // I1 < I2
    # fract part
#(js) if (P1 >= P2) {
#(js) for (var xx = 0 ; xx <P2; xx++) {
            push _instack16_3
            pop _outstack16_1
#(js) }
            push _instack16_2
            pop _outstack16_0
#(js) }
#(js) } else { // P1 < P2
#(begin macro)    pushvX(I2P2,"_outstack" + _sv8)
    push    _outstack16_c
    push    _outstack16_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack16_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack16_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack16_0
#(js) }
#(end macro)    pushvX(I2P2,"_outstack" + _sv8)
#(end macro)        castFP(I+I,P+P, I,P)
#(begin macro)        popvX(IP,"nameA"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameA8_0
#(js) }
    pop     nameA8_1
#(js) }
    pop     nameA8_2
#(js) }
    pop     nameA8_s
    pop     nameA8_c
#(end macro)        popvX(IP,"nameA"+_fp1)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(IP) # drop nameB
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(IP) # drop nameB
#(end macro)                mulFP(FP_I,FP_P)                
#(begin macro)                pushvX(FP,"newIm")
    push    newIm_c
    push    newIm_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newIm_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newIm_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newIm_0
#(js) }
#(end macro)                pushvX(FP,"newIm")
#(begin macro)                pushvX(FP,"newIm")
    push    newIm_c
    push    newIm_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newIm_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newIm_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    newIm_0
#(js) }
#(end macro)                pushvX(FP,"newIm")
#(begin macro)                mulFP(FP_I,FP_P)
#(js) _fp1++;
#(js) var IP ; IP = (I+P); 
#(js) var IP2 ; IP2 = 2 * IP;
#(begin macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameB9_0 - 0
#(js) }
    sbm nameB9_1 - 1
#(js) }
    sbm nameB9_2 - 2
#(js) }
    sbm nameB9_s - 3
    sbm nameB9_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameB"+_fp1,0)
#(begin macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm nameA9_0 - 5
#(js) }
    sbm nameA9_1 - 6
#(js) }
    sbm nameA9_2 - 7
#(js) }
    sbm nameA9_s - 8
    sbm nameA9_c - 9
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP, "nameA"+_fp1,1)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameAX9_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameAX9_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX9_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX9_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX9_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX9_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX9_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameAX9_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameAX"  + _fp1)
#(begin macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm nameBX9_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm nameBX9_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX9_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX9_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX9_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX9_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX9_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm nameBX9_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "nameBX"  + _fp1)
#(begin macro)        lvarX(IP2, "resultX" + _fp1)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm resultX9_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm resultX9_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX9_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX9_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX9_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX9_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX9_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm resultX9_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(IP2, "resultX" + _fp1)
        
        # upcast nameA to nameAX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameA"+_fp1)
    push    nameA9_c
    push    nameA9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameA9_0
#(js) }
#(end macro)        pushvX(IP,"nameA"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput17_0 - 0
#(js) }
    sbm _castXInput17_1 - 1
#(js) }
    sbm _castXInput17_2 - 2
#(js) }
    sbm _castXInput17_s - 3
    sbm _castXInput17_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput17_0    # 0 byte of _castXoutput17
#(js) }
    var _castXoutput17_1    # 1 byte of _castXoutput17
#(js) }
    var _castXoutput17_2    # 2 byte of _castXoutput17
#(js) }
    var _castXoutput17_3    # 3 byte of _castXoutput17
#(js) }
    var _castXoutput17_4    # 4 byte of _castXoutput17
#(js) }
    var _castXoutput17_5    # 5 byte of _castXoutput17
#(js) }
    var _castXoutput17_s    # Sign of _castXoutput17
    var _castXoutput17_c    # carry of _castXoutput17 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori17_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori17_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori17_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori17_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori17_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest17_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest17_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest17_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest17_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest17_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest17_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest17_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest17_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput17_c
    push    _castXInput17_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput17_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput17_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput17_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori17_0
#(js) }
    pop     ori17_1
#(js) }
    pop     ori17_2
#(js) }
    pop     ori17_s
    pop     ori17_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori17_s   
        pop     dest17_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori17_0
                pop     dest17_0
#(js) }
                push    ori17_1
                pop     dest17_1
#(js) }
                push    ori17_2
                pop     dest17_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest17_3
#(js) } 
                push    0
                pop     dest17_4
#(js) } 
                push    0
                pop     dest17_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest17_c
    push    dest17_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest17_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest17_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest17_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest17_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest17_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest17_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput17_0
#(js) }
    pop     _castXoutput17_1
#(js) }
    pop     _castXoutput17_2
#(js) }
    pop     _castXoutput17_3
#(js) }
    pop     _castXoutput17_4
#(js) }
    pop     _castXoutput17_5
#(js) }
    pop     _castXoutput17_s
    pop     _castXoutput17_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput17_c
    push    _castXoutput17_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput17_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput17_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput17_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput17_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput17_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput17_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameAX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameAX9_0
#(js) }
    pop     nameAX9_1
#(js) }
    pop     nameAX9_2
#(js) }
    pop     nameAX9_3
#(js) }
    pop     nameAX9_4
#(js) }
    pop     nameAX9_5
#(js) }
    pop     nameAX9_s
    pop     nameAX9_c
#(end macro)        popvX(IP2,"nameAX"+_fp1)

        # upcast nameB to nameBX (from I+P to (I+P) * 2)
#(begin macro)        pushvX(IP,"nameB"+_fp1)
    push    nameB9_c
    push    nameB9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameB9_0
#(js) }
#(end macro)        pushvX(IP,"nameB"+_fp1)
#(begin macro)        castX(IP,IP2)
#(js) if (X1 != X2 && X1 > 0 && X2 > 0) {
#(js) _sv9++;
#(begin macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _castXInput18_0 - 0
#(js) }
    sbm _castXInput18_1 - 1
#(js) }
    sbm _castXInput18_2 - 2
#(js) }
    sbm _castXInput18_s - 3
    sbm _castXInput18_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(X1,"_castXInput"+_sv9,0)
#(begin macro)    varX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _castXoutput18_0    # 0 byte of _castXoutput18
#(js) }
    var _castXoutput18_1    # 1 byte of _castXoutput18
#(js) }
    var _castXoutput18_2    # 2 byte of _castXoutput18
#(js) }
    var _castXoutput18_3    # 3 byte of _castXoutput18
#(js) }
    var _castXoutput18_4    # 4 byte of _castXoutput18
#(js) }
    var _castXoutput18_5    # 5 byte of _castXoutput18
#(js) }
    var _castXoutput18_s    # Sign of _castXoutput18
    var _castXoutput18_c    # carry of _castXoutput18 
#(end macro)    varX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm ori18_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm ori18_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori18_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori18_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm ori18_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X1,"ori" + _sv9)
#(begin macro)        lvarX(X2,"dest" + _sv9)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm dest18_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm dest18_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest18_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest18_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest18_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest18_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest18_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm dest18_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X2,"dest" + _sv9)

#(begin macro)        pushvX(X1,"_castXInput"+_sv9)       
    push    _castXInput18_c
    push    _castXInput18_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput18_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput18_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXInput18_0
#(js) }
#(end macro)        pushvX(X1,"_castXInput"+_sv9)       
#(begin macro)        popvX(X1,"ori" + _sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     ori18_0
#(js) }
    pop     ori18_1
#(js) }
    pop     ori18_2
#(js) }
    pop     ori18_s
    pop     ori18_c
#(end macro)        popvX(X1,"ori" + _sv9)
        push    ori18_s   
        pop     dest18_s  # keep sign
#(js) if (X1 < X2) {
#(js) for (var xx = 0 ; xx < X1; xx++) {
                push    ori18_0
                pop     dest18_0
#(js) }
                push    ori18_1
                pop     dest18_1
#(js) }
                push    ori18_2
                pop     dest18_2
#(js) }
#(js) for (var xx = X1; xx < X2 ; xx++ ) {
                push    0
                pop     dest18_3
#(js) } 
                push    0
                pop     dest18_4
#(js) } 
                push    0
                pop     dest18_5
#(js) } 
#(js) } else { // if X1 > X2
#(begin macro)        pushvX(X2,"dest"+_sv9)
    push    dest18_c
    push    dest18_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest18_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest18_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest18_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest18_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest18_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    dest18_0
#(js) }
#(end macro)        pushvX(X2,"dest"+_sv9)
#(begin macro)        popvX(X2,"_castXoutput"+_sv9)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _castXoutput18_0
#(js) }
    pop     _castXoutput18_1
#(js) }
    pop     _castXoutput18_2
#(js) }
    pop     _castXoutput18_3
#(js) }
    pop     _castXoutput18_4
#(js) }
    pop     _castXoutput18_5
#(js) }
    pop     _castXoutput18_s
    pop     _castXoutput18_c
#(end macro)        popvX(X2,"_castXoutput"+_sv9)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(X1)
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(X1)
#(begin macro)    pushvX(X2,"_castXoutput"+_sv9) 
    push    _castXoutput18_c
    push    _castXoutput18_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput18_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput18_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput18_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput18_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput18_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _castXoutput18_0
#(js) }
#(end macro)    pushvX(X2,"_castXoutput"+_sv9) 
#(js) }
#(end macro)        castX(IP,IP2)
#(begin macro)        popvX(IP2,"nameBX"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameBX9_0
#(js) }
    pop     nameBX9_1
#(js) }
    pop     nameBX9_2
#(js) }
    pop     nameBX9_3
#(js) }
    pop     nameBX9_4
#(js) }
    pop     nameBX9_5
#(js) }
    pop     nameBX9_s
    pop     nameBX9_c
#(end macro)        popvX(IP2,"nameBX"+_fp1)
        
#(begin macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
#(js) _sv5++;
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameA9_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameA9_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA9_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA9_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA9_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA9_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA9_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameA9_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        pushvX(X,nameA)
    push    nameAX9_c
    push    nameAX9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX9_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX9_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX9_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameAX9_0
#(js) }
#(end macro)        pushvX(X,nameA)
#(begin macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameA9_0
#(js) }
    pop     mulvvvXabsNameA9_1
#(js) }
    pop     mulvvvXabsNameA9_2
#(js) }
    pop     mulvvvXabsNameA9_3
#(js) }
    pop     mulvvvXabsNameA9_4
#(js) }
    pop     mulvvvXabsNameA9_5
#(js) }
    pop     mulvvvXabsNameA9_s
    pop     mulvvvXabsNameA9_c
#(end macro)        popvX(X,"mulvvvXabsNameA" + _sv5)
#(begin macro)        lvar("mulvvvXsA" + _sv5, 0)
    push 0
    sbm mulvvvXsA9
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsA" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
    push    mulvvvXabsNameA9_s
#(end macro)        pushsvX(X,"mulvvvXabsNameA" + _sv5)
        pop mulvvvXsA9
#(begin macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
    push    0
    pop     mulvvvXabsNameA9_s
#(end macro)        absvX(X,"mulvvvXabsNameA" + _sv5)   # absNameA = abs(nameA)
        
#(begin macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm mulvvvXabsNameB9_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm mulvvvXabsNameB9_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB9_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB9_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB9_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB9_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB9_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm mulvvvXabsNameB9_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        pushvX(X,nameB)
    push    nameBX9_c
    push    nameBX9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX9_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX9_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX9_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    nameBX9_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx=0; xx < X; xx++) {
    pop     mulvvvXabsNameB9_0
#(js) }
    pop     mulvvvXabsNameB9_1
#(js) }
    pop     mulvvvXabsNameB9_2
#(js) }
    pop     mulvvvXabsNameB9_3
#(js) }
    pop     mulvvvXabsNameB9_4
#(js) }
    pop     mulvvvXabsNameB9_5
#(js) }
    pop     mulvvvXabsNameB9_s
    pop     mulvvvXabsNameB9_c
#(end macro)        popvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)        lvar("mulvvvXsB" + _sv5, 0)
    push 0
    sbm mulvvvXsB9
#(js) __scope[__scope.length-1]++; 
#(end macro)        lvar("mulvvvXsB" + _sv5, 0)
#(begin macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
    push    mulvvvXabsNameB9_s
#(end macro)        pushsvX(X,"mulvvvXabsNameB" + _sv5)
        pop mulvvvXsB9
#(begin macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
    push    0
    pop     mulvvvXabsNameB9_s
#(end macro)        absvX(X,"mulvvvXabsNameB" + _sv5)   # absNameB = abs(nameB)
        
#(begin macro)        resetvX(X,name)
    at resultX9_0
#(begin macro)        resetX(X)
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf [-]
#(js) for (var xx= 0; xx < X+1 ; xx++) {
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
    bf >[-]
#(js) }
#(end macro)        resetX(X)
    ta
#(end macro)        resetvX(X,name)

        push    1
        sbm mulvvvX_loop9
        while
#(begin macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
#(js) for (var xx = 0 ; xx < X; xx++) {
    push mulvvvXabsNameB9_0
    bool
#(js) }
    push mulvvvXabsNameB9_1
    bool
#(js) }
    push mulvvvXabsNameB9_2
    bool
#(js) }
    push mulvvvXabsNameB9_3
    bool
#(js) }
    push mulvvvXabsNameB9_4
    bool
#(js) }
    push mulvvvXabsNameB9_5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)            boolvX(X,"mulvvvXabsNameB" + _sv5)
            if  # absNameB is not zero
#(begin macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)    addvvvX(X,name, name, nameA)
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    resultX9_c
    push    resultX9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     resultX9_0
#(js) }
    pop     resultX9_1
#(js) }
    pop     resultX9_2
#(js) }
    pop     resultX9_3
#(js) }
    pop     resultX9_4
#(js) }
    pop     resultX9_5
#(js) }
    pop     resultX9_s
    pop     resultX9_c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_13_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_13_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_13_5
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_13_4
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_13_3
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_13_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_13_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_13_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    mulvvvXabsNameA9_c
    push    mulvvvXabsNameA9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA9_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA9_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA9_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    mulvvvXabsNameA9_0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_13_0
#(js) }
    pop     addvvvXgX_13_1
#(js) }
    pop     addvvvXgX_13_2
#(js) }
    pop     addvvvXgX_13_3
#(js) }
    pop     addvvvXgX_13_4
#(js) }
    pop     addvvvXgX_13_5
#(js) }
    pop     addvvvXgX_13_s
    pop     addvvvXgX_13_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_13_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    mulvvvXabsNameA9_s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop13
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_13_c
    push    addvvvXgX_13_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_13_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_13_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_13_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push resultX9_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX9_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at resultX9_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop13
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop13
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_13_c
    push    addvvvXgX_13_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_13_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp48___0
#(js) }
    pop     __tmp48___1
#(js) }
    pop     __tmp48___2
#(js) }
    pop     __tmp48___3
#(js) }
    pop     __tmp48___4
#(js) }
    pop     __tmp48___5
#(js) }
    pop     __tmp48___s
    pop     __tmp48___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp48___0
    bool
#(js) }
    push __tmp48___1
    bool
#(js) }
    push __tmp48___2
    bool
#(js) }
    push __tmp48___3
    bool
#(js) }
    push __tmp48___4
    bool
#(js) }
    push __tmp48___5
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_13_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_13_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_13_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_13_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_13_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_13_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push resultX9_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push resultX9_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at resultX9_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push resultX9_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at resultX9_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    resultX9_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX9_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX9_1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX9_2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX9_3
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX9_4
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push resultX9_5
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at resultX9_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop13
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,name, name, nameA)
#(end macro)                addvvX(X,name,"mulvvvXabsNameA" + _sv5)
#(begin macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push mulvvvXabsNameB9_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB9_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB9_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB9_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_3
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB9_3
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_4
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB9_4
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_5
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push mulvvvXabsNameB9_5
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at mulvvvXabsNameB9_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB9_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB9_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB9_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_3
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB9_3
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_4
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB9_4
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvXabsNameB9_5
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push mulvvvXabsNameB9_5
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at mulvvvXabsNameB9_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                decvX(X,"mulvvvXabsNameB" + _sv5)
            else 
#(begin macro)                at_reset("mulvvvX_loop"+_sv5)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at mulvvvX_loop9
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                at_reset("mulvvvX_loop"+_sv5)
            fi
        wend        
        # resolve sign
        push mulvvvXsA9
        push mulvvvXsB9
        diff    # if sign(nameA) <> sign(nameB) then name is negative
        if
#(begin macro)            at_set(name +"_s",1)
#(begin macro)    at_2("set",a,b)
    at resultX9_s
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)            at_set(name +"_s",1)
        fi        
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)        mulvvvX(IP2,"resultX"+_fp1, "nameAX"+_fp1, "nameBX"+_fp1)
        
#(begin macro)        pushvX(IP2,"resultX"+_fp1)
    push    resultX9_c
    push    resultX9_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_5
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_3
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    resultX9_0
#(js) }
#(end macro)        pushvX(IP2,"resultX"+_fp1)
#(begin macro)        castFP(I+I,P+P, I,P)
#(js) _sv8++; 
#(js) var I1P1; I1P1 = I1+P1;
#(js) var I2P2; I2P2 = I2+P2;
#(begin macro)    varX(I1P1,"_instack" +_sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _instack17_0    # 0 byte of _instack17
#(js) }
    var _instack17_1    # 1 byte of _instack17
#(js) }
    var _instack17_2    # 2 byte of _instack17
#(js) }
    var _instack17_3    # 3 byte of _instack17
#(js) }
    var _instack17_4    # 4 byte of _instack17
#(js) }
    var _instack17_5    # 5 byte of _instack17
#(js) }
    var _instack17_s    # Sign of _instack17
    var _instack17_c    # carry of _instack17 
#(end macro)    varX(I1P1,"_instack" +_sv8)
#(begin macro)    varX(I2P2,"_outstack" + _sv8)
#(js) for (var xx=0 ; xx < X ; xx++) {
    var _outstack17_0    # 0 byte of _outstack17
#(js) }
    var _outstack17_1    # 1 byte of _outstack17
#(js) }
    var _outstack17_2    # 2 byte of _outstack17
#(js) }
    var _outstack17_s    # Sign of _outstack17
    var _outstack17_c    # carry of _outstack17 
#(end macro)    varX(I2P2,"_outstack" + _sv8)
    
#(begin macro)    popvX(I1P1,"_instack" + _sv8)
#(js) for (var xx=0; xx < X; xx++) {
    pop     _instack17_0
#(js) }
    pop     _instack17_1
#(js) }
    pop     _instack17_2
#(js) }
    pop     _instack17_3
#(js) }
    pop     _instack17_4
#(js) }
    pop     _instack17_5
#(js) }
    pop     _instack17_s
    pop     _instack17_c
#(end macro)    popvX(I1P1,"_instack" + _sv8)
    # reset outstack
#(begin macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    at _outstack17_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(I2P2, "_outstack" +_sv8, 0)
    # sign
    push _instack17_s
    pop _outstack17_s
    # integer part
#(js) if (I1 >= I2) {
#(js) for (var xx = 0 ; xx < I2; xx++) {
            push _instack17_4
            pop _outstack17_2
#(js) }
#(js) } else { // I1 < I2
    # fract part
#(js) if (P1 >= P2) {
#(js) for (var xx = 0 ; xx <P2; xx++) {
            push _instack17_3
            pop _outstack17_1
#(js) }
            push _instack17_2
            pop _outstack17_0
#(js) }
#(js) } else { // P1 < P2
#(begin macro)    pushvX(I2P2,"_outstack" + _sv8)
    push    _outstack17_c
    push    _outstack17_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack17_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack17_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    _outstack17_0
#(js) }
#(end macro)    pushvX(I2P2,"_outstack" + _sv8)
#(end macro)        castFP(I+I,P+P, I,P)
#(begin macro)        popvX(IP,"nameA"+_fp1)
#(js) for (var xx=0; xx < X; xx++) {
    pop     nameA9_0
#(js) }
    pop     nameA9_1
#(js) }
    pop     nameA9_2
#(js) }
    pop     nameA9_s
    pop     nameA9_c
#(end macro)        popvX(IP,"nameA"+_fp1)
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(begin macro)    dropX(IP) # drop nameB
#(js) for (var xx = 0; xx < X+2 ; xx++) {
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
    drop
#(js) }
#(end macro)    dropX(IP) # drop nameB
#(end macro)                mulFP(FP_I,FP_P)
#(begin macro)                addX(FP)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "b__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24b___0
#(js) }
    pop     __tmp24b___1
#(js) }
    pop     __tmp24b___2
#(js) }
    pop     __tmp24b___s
    pop     __tmp24b___c
#(end macro)    popvX(X,"__tmp" + _xbits + "b__")
#(begin macro)    popvX(X,"__tmp" + _xbits + "a__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24a___0
#(js) }
    pop     __tmp24a___1
#(js) }
    pop     __tmp24a___2
#(js) }
    pop     __tmp24a___s
    pop     __tmp24a___c
#(end macro)    popvX(X,"__tmp" + _xbits + "a__")
#(begin macro)    addvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(js) _sv3++;
#(begin macro)    pushvX(X,nameA)
    push    __tmp24a___c
    push    __tmp24a___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24c___0
#(js) }
    pop     __tmp24c___1
#(js) }
    pop     __tmp24c___2
#(js) }
    pop     __tmp24c___s
    pop     __tmp24c___c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm addvvvXgX_14_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm addvvvXgX_14_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_14_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_14_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm addvvvXgX_14_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"addvvvXgX_" + _sv3)
#(begin macro)        pushvX(X,nameB)
    push    __tmp24b___c
    push    __tmp24b___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"addvvvXgX_" + _sv3)
#(js) for (var xx=0; xx < X; xx++) {
    pop     addvvvXgX_14_0
#(js) }
    pop     addvvvXgX_14_1
#(js) }
    pop     addvvvXgX_14_2
#(js) }
    pop     addvvvXgX_14_s
    pop     addvvvXgX_14_c
#(end macro)        popvX(X,"addvvvXgX_" + _sv3)
        push 0
#(begin macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
    POP    addvvvXgX_14_s
#(end macro)        popsvX(X,"addvvvXgX_" + _sv3) # absolute number (always positive)
        
        push    __tmp24b___s
        if    # nameB is negative 
            push    1
            sbm addvvvX_loop14
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_14_c
    push    addvvvXgX_14_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_14_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_14_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_14_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_14_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_14_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_14_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_14_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_14_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_14_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_14_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_14_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_14_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    decvX(X,name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push __tmp24c___s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop14
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm addvvvX_loop14
            while
#(begin macro)                pushvX(X,"addvvvXgX_"+ _sv3)
    push    addvvvXgX_14_c
    push    addvvvXgX_14_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_14_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_14_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    addvvvXgX_14_0
#(js) }
#(end macro)                pushvX(X,"addvvvXgX_"+ _sv3)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push addvvvXgX_14_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_14_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_14_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push addvvvXgX_14_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at addvvvXgX_14_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_14_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_14_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvXgX_14_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push addvvvXgX_14_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at addvvvXgX_14_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"addvvvXgX_"+_sv3)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push __tmp24c___s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    __tmp24c___s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("addvvvX_loop"+_sv3)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at addvvvX_loop14
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("addvvvX_loop"+_sv3)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    addvvvX(X,"__tmp" + _xbits + "c__", "__tmp" + _xbits + "a__", "__tmp" + _xbits + "b__")
#(begin macro)    pushvX(X,"__tmp" + _xbits + "c__")
    push    __tmp24c___c
    push    __tmp24c___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24c___0
#(js) }
#(end macro)    pushvX(X,"__tmp" + _xbits + "c__")
#(end macro)                addX(FP)
                ## if stack FP > 4 break               
#(begin macro)                pushFP(FP_I,FP_P, 4)
#(begin macro)    pushX(I*1+P*1,0)
    push    0
    push    0
#(js) var absImmValue; absImmValue = immValue>=0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    push    0
#(js) }
#(end macro)    pushX(I*1+P*1,0)
#(begin macro)    setFP(I*1,P*1,immValue) 
#(js) _sv8++; 
#(js) var IP; IP = I+P;
#(js) var _sign = immValue >=0?0:1;
#(js) var _abs = immValue>=0?immValue:-immValue;
#(js) var _int; _int = _abs | 0;
#(js) var _fra; _fra = ((_abs - _int) * Math.pow(256,P)) | 0;
#(js) var _fp; _fp = _int * Math.pow(256,P) + _fra; if (_sign ==1) _fp = -_fp;
#(begin macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    sbmX2(X,name,backward,0)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _instack18_0 - 0
#(js) }
    sbm _instack18_1 - 1
#(js) }
    sbm _instack18_2 - 2
#(js) }
    sbm _instack18_s - 3
    sbm _instack18_c - 4
#(end macro)    sbmX2(X,name,backward,0)
#(end macro)    sbmX(IP,"_instack"+_sv8,0)
#(begin macro)    setvX(IP,"_instack"+_sv8, _fp)
    at _instack18_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    4
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(IP,"_instack"+_sv8, _fp)
#(end macro)    setFP(I*1,P*1,immValue) 
#(end macro)                pushFP(FP_I,FP_P, 4)
#(begin macro)                supX(FP)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "b__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24b___0
#(js) }
    pop     __tmp24b___1
#(js) }
    pop     __tmp24b___2
#(js) }
    pop     __tmp24b___s
    pop     __tmp24b___c
#(end macro)    popvX(X,"__tmp" + _xbits + "b__")
#(begin macro)    popvX(X,"__tmp" + _xbits + "a__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24a___0
#(js) }
    pop     __tmp24a___1
#(js) }
    pop     __tmp24a___2
#(js) }
    pop     __tmp24a___s
    pop     __tmp24a___c
#(end macro)    popvX(X,"__tmp" + _xbits + "a__")
#(begin macro)    supvvX(X,"__tmp" + _xbits + "a__","__tmp" + _xbits + "b__")
#(begin macro)    infvvX(X,nameB, nameA)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    subvvvX(X,"__tmp" + _xbits + "c__", nameA, nameB)
#(js) _sv4++;
#(begin macro)    pushvX(X,nameA)
    push    __tmp24b___c
    push    __tmp24b___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24b___0
#(js) }
#(end macro)    pushvX(X,nameA)
#(begin macro)    popvX(X,name)    # name = nameA
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24c___0
#(js) }
    pop     __tmp24c___1
#(js) }
    pop     __tmp24c___2
#(js) }
    pop     __tmp24c___s
    pop     __tmp24c___c
#(end macro)    popvX(X,name)    # name = nameA
#(begin macro)    scope_begin()
#(js) __scope.push(0);
#(end macro)    scope_begin()
#(begin macro)        lvarX(X,"subvvvXgX_" + _sv4)
#(begin macro)    lvar(name + "_c",0)
    push 0
    sbm subvvvXgX_4_c
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_c",0)
#(begin macro)    lvar(name + "_s",0)
    push 0
    sbm subvvvXgX_4_s
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_s",0)
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_4_2
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_4_1
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(begin macro)    lvar(name + "_"+ xx1,0)
    push 0
    sbm subvvvXgX_4_0
#(js) __scope[__scope.length-1]++; 
#(end macro)    lvar(name + "_"+ xx1,0)
#(js) }
#(end macro)        lvarX(X,"subvvvXgX_" + _sv4)
#(begin macro)        pushvX(X,nameB)
    push    __tmp24a___c
    push    __tmp24a___s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    __tmp24a___0
#(js) }
#(end macro)        pushvX(X,nameB)
#(begin macro)        popvX(X,"subvvvXgX_" + _sv4)
#(js) for (var xx=0; xx < X; xx++) {
    pop     subvvvXgX_4_0
#(js) }
    pop     subvvvXgX_4_1
#(js) }
    pop     subvvvXgX_4_2
#(js) }
    pop     subvvvXgX_4_s
    pop     subvvvXgX_4_c
#(end macro)        popvX(X,"subvvvXgX_" + _sv4)
        push 0
#(begin macro)        popsvX(X,"subvvvXgX_" + _sv4) # absolute number (always positive)
    POP    subvvvXgX_4_s
#(end macro)        popsvX(X,"subvvvXgX_" + _sv4) # absolute number (always positive)
        
        push    __tmp24a___s
        if    # nameB is negative 
            push    1
            sbm subvvvX_loop4
            while
#(begin macro)                pushvX(X,"subvvvXgX_"+ _sv4)
    push    subvvvXgX_4_c
    push    subvvvXgX_4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_4_0
#(js) }
#(end macro)                pushvX(X,"subvvvXgX_"+ _sv4)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push subvvvXgX_4_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_4_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_4_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_4_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at subvvvXgX_4_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_4_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_4_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_4_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at subvvvXgX_4_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)                    incvX(X,name)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push __tmp24c___s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    __tmp24c___s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)        if_equal(name +"_" + xx, 0)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)                    incvX(X,name)
                else
#(begin macro)                    at_reset("subvvvX_loop"+_sv4)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvX_loop4
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("subvvvX_loop"+_sv4)
                fi
            wend
        else  # nameB is positive
            push    1
            sbm subvvvX_loop4
            while
#(begin macro)                pushvX(X,"subvvvXgX_"+ _sv4)
    push    subvvvXgX_4_c
    push    subvvvXgX_4_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_4_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_4_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    subvvvXgX_4_0
#(js) }
#(end macro)                pushvX(X,"subvvvXgX_"+ _sv4)
#(begin macro)                boolX(X)
#(js) var _xbits; _xbits = X * 8;
#(begin macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx=0; xx < X; xx++) {
    pop     __tmp24___0
#(js) }
    pop     __tmp24___1
#(js) }
    pop     __tmp24___2
#(js) }
    pop     __tmp24___s
    pop     __tmp24___c
#(end macro)    popvX(X,"__tmp" + _xbits + "__")
#(js) for (var xx = 0 ; xx < X ; xx++) { 
    push __tmp24___0
    bool
#(js) }
    push __tmp24___1
    bool
#(js) }
    push __tmp24___2
    bool
#(js) }
#(js) for (var xx = 0 ; xx < X-1 ; xx++) {
    or
#(js) }
    or
#(js) }
#(end macro)                boolX(X)
                if
#(begin macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push subvvvXgX_4_s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_4_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_4_1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push subvvvXgX_4_2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at subvvvXgX_4_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_4_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_4_1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvXgX_4_2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push subvvvXgX_4_2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at subvvvXgX_4_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X,"subvvvXgX_"+_sv4)
#(begin macro)                    decvX(X, name)
#(begin macro)    if_equal(name +"_s",1)  # negative number
    push __tmp24c___s
    push 1
    equal
    if
#(end macro)    if_equal(name +"_s",1)  # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___1
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push __tmp24c___2
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at __tmp24c___c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
            fi
#(js) }        
            fi
#(js) }        
    else    # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___1
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___1
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at __tmp24c___2
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push __tmp24c___2
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,-1)
    at __tmp24c___0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 1
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,-1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
        fi
#(js) }
        fi
#(js) }
    fi
#(end macro)                    decvX(X, name)
                else
#(begin macro)                    at_reset("subvvvX_loop"+_sv4)
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at subvvvX_loop4
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("subvvvX_loop"+_sv4)
                fi
            wend
        fi
#(begin macro)    scope_end()
#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
    drop
#(js) } 
#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
#(end macro)    scope_end()
#(end macro)    subvvvX(X,"__tmp" + _xbits + "c__", nameA, nameB)
    push __tmp24c___s
#(end macro)    infvvX(X,nameB, nameA)
#(end macro)    supvvX(X,"__tmp" + _xbits + "a__","__tmp" + _xbits + "b__")
#(end macro)                supX(FP)
                if
#(begin macro)                    at_reset("loop")
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at loop
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                    at_reset("loop")
                else                                
#(begin macro)                    at_inc("i")
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at i
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)                    at_inc("i")
                fi
            else
#(begin macro)                at_reset("loop")
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at loop
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)                at_reset("loop")
            fi
        # }
        wend
        # if (i >= maxIte) black point (inside mandel)
#(begin macro)        if_equal("i", maxIte)
    push i
    push 26
    equal
    if
#(end macro)        if_equal("i", maxIte)
#(begin macro)            print("*")
    push    0
#(js) var __prev; __prev = 0;
#(js) for (var istr=0; istr < aString.length ; istr++) {
#(js) var __ascii; __ascii = aString[istr].charCodeAt(0);
#(js) var __move; __move = __ascii - __prev;
#(js) var __dist ; __dist = (__move > 0)?__move:-__move;
#(js) if (__dist < __ascii) { // shorter to move
    set     42    
#(js) }
    out             # '*'
#(js) __prev  = __ascii;
#(js) }
    drop
#(end macro)            print("*")
        # else // outside mandel
        else
#(begin macro)            print(".")
    push    0
#(js) var __prev; __prev = 0;
#(js) for (var istr=0; istr < aString.length ; istr++) {
#(js) var __ascii; __ascii = aString[istr].charCodeAt(0);
#(js) var __move; __move = __ascii - __prev;
#(js) var __dist ; __dist = (__move > 0)?__move:-__move;
#(js) if (__dist < __ascii) { // shorter to move
    set     46    
#(js) }
    out             # '.'
#(js) __prev  = __ascii;
#(js) }
    drop
#(end macro)            print(".")
        fi
        # x++
#(begin macro)        pushvX(FP,"x")
    push    x_c
    push    x_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    x_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    x_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    x_0
#(js) }
#(end macro)        pushvX(FP,"x")
#(begin macro)        incFP(FP_I,FP_P)
#(js) _fp2++;
#(begin macro)    sbmX2(I,"_incFPinput"+_fp2,0,P)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _incFPinput1_0 - 2
#(js) }
    sbm _incFPinput1_s - 3
    sbm _incFPinput1_c - 4
#(end macro)    sbmX2(I,"_incFPinput"+_fp2,0,P)
#(begin macro)    incvX(I,"_incFPinput"+_fp2)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push _incFPinput1_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at _incFPinput1_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push _incFPinput1_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at _incFPinput1_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at _incFPinput1_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push _incFPinput1_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at _incFPinput1_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    _incFPinput1_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push _incFPinput1_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at _incFPinput1_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)    incvX(I,"_incFPinput"+_fp2)
#(end macro)        incFP(FP_I,FP_P)
#(begin macro)        popvX(FP,"x")
#(js) for (var xx=0; xx < X; xx++) {
    pop     x_0
#(js) }
    pop     x_1
#(js) }
    pop     x_2
#(js) }
    pop     x_s
    pop     x_c
#(end macro)        popvX(FP,"x")
        # addvvvX(FP,"x","x","ONE")
    endloop
    # x = 0
#(begin macro)    setvX(FP,"x",0)
    at x_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    0
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)    setvX(FP,"x",0)
    # y++
#(begin macro)    pushvX(FP,"y")
    push    y_c
    push    y_s
#(js) for (var xx =0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    y_2
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    y_1
#(js) }
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
    push    y_0
#(js) }
#(end macro)    pushvX(FP,"y")
#(begin macro)    incFP(FP_I,FP_P)
#(js) _fp2++;
#(begin macro)    sbmX2(I,"_incFPinput"+_fp2,0,P)
#(js) for (var xx=0; xx <X ; xx++) {
    sbm _incFPinput2_0 - 2
#(js) }
    sbm _incFPinput2_s - 3
    sbm _incFPinput2_c - 4
#(end macro)    sbmX2(I,"_incFPinput"+_fp2,0,P)
#(begin macro)    incvX(I,"_incFPinput"+_fp2)
#(begin macro)    if_equal(name +"_s",0)  # positive number
    push _incFPinput2_s
    push 0
    equal
    if
#(end macro)    if_equal(name +"_s",0)  # positive number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)            at_inc(name + "_" + xx)
#(begin macro)    at_1("inc",a)
#(begin macro)    at_2(ope,a,"")
    at _incFPinput2_0
    inc 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("inc",a)
#(end macro)            at_inc(name + "_" + xx)
#(begin macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
    push _incFPinput2_0
    push 0
    equal
    if
#(end macro)            if_equal( name + "_" + xx,0) # reach zero (roll over)
#(js) }
#(begin macro)           setcvX(X, name) ## set carry (overflow)
#(begin macro)    at_set(name+"_c",1)
#(begin macro)    at_2("set",a,b)
    at _incFPinput2_c
    set 1
    ta
#(end macro)    at_2("set",a,b)
#(end macro)    at_set(name+"_c",1)
#(end macro)           setcvX(X, name) ## set carry (overflow)
#(js) for (var xx=0; xx < X; xx++) {
            fi
#(js) }        
    else    # negative number
#(js) for (var xx=0; xx < X; xx++) {
#(begin macro)        at_dec(name + "_" + xx)
#(begin macro)    at_1("dec",a)
#(begin macro)    at_2(ope,a,"")
    at _incFPinput2_0
    dec 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("dec",a)
#(end macro)        at_dec(name + "_" + xx)
#(begin macro)        if_equal(name +"_" + xx,255) # reduced
    push _incFPinput2_0
    push 255
    equal
    if
#(end macro)        if_equal(name +"_" + xx,255) # reduced
#(js) }
#(begin macro)        setvX(X,name,1)
    at _incFPinput2_0
#(begin macro)        setX(X,immValue)
#(js) for (var xx=0; xx < X+1; xx++) {
    bf <
#(js) }
    bf <
#(js) }
    reset
    bf  >
    set 0
#(js) var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(js) var xx1; xx1 = X-xx-1; // X-1 to 0
#(js) absImmValue = absImmValue % Math.pow(256,xx1+1);
    bf >
    set    1
#(js) }
#(end macro)        setX(X,immValue)
    ta
#(end macro)        setvX(X,name,1)
#(js) for (var xx=0; xx < X; xx++) {
        fi
#(js) }
#(begin macro)        fixsvX(X,name)    
    push    _incFPinput2_s
    if    # if name is negative
#(js) for (var xx = 0 ; xx < X ; xx++) {
#(begin macro)        if_equal(name +"_" + xx, 0)
    push _incFPinput2_0
    push 0
    equal
    if
#(end macro)        if_equal(name +"_" + xx, 0)
#(js) }
#(begin macro)            at_reset(name + "_s")   # set sign to positive
#(begin macro)    at_1("reset",a)
#(begin macro)    at_2(ope,a,"")
    at _incFPinput2_s
    reset 
    ta
#(end macro)    at_2(ope,a,"")
#(end macro)    at_1("reset",a)
#(end macro)            at_reset(name + "_s")   # set sign to positive
#(js) for (var xx = 0 ; xx < X ; xx++) {
        fi
#(js) }
    fi
#(end macro)        fixsvX(X,name)    
    fi
#(end macro)    incvX(I,"_incFPinput"+_fp2)
#(end macro)    incFP(FP_I,FP_P)
#(begin macro)    popvX(FP,"y")
#(js) for (var xx=0; xx < X; xx++) {
    pop     y_0
#(js) }
    pop     y_1
#(js) }
    pop     y_2
#(js) }
    pop     y_s
    pop     y_c
#(end macro)    popvX(FP,"y")
    #  addvvvX(FP,"y","y","ONE")
#(begin macro)    print("\n")
    push    0
#(js) var __prev; __prev = 0;
#(js) for (var istr=0; istr < aString.length ; istr++) {
#(js) var __ascii; __ascii = aString[istr].charCodeAt(0);
#(js) var __move; __move = __ascii - __prev;
#(js) var __dist ; __dist = (__move > 0)?__move:-__move;
#(js) if (__dist < __ascii) { // shorter to move
    set     10    
#(js) }
    out             # 
#(js) __prev  = __ascii;
#(js) }
    drop
#(end macro)    print("\n")
endloop  


