var __blockLevel__; __blockLevel__ = 0;
var __context__; __context__=[];
function __context() { var __result; __result='';
for (var _i=__context__.length-1; _i>=0 ; _i--) __result+=__context__[_i];
 return __result;}
function __indent() { var __result; __result = '';
for (var _i=0 ; _i < __blockLevel__ ; _i++) __result+= '  ';
 return __result;}
var __main; __main=0;
var _main = function(){
 __main++;
var _str_main; 
_str_main='';
if (arguments.length != 0) throw 'Too much arguments provided to macro _main()[' + [] +']';
_str_main+=__indent() +'#    ____  _____   _         ____  _____ #@(main@1)'+ __context() + '\n';
_str_main+=__indent() +'#   | __ )|  ___| (_)_ __   | __ )|  ___| #@(main@2)'+ __context() + '\n';
_str_main+=__indent() +'#   |  _ \\| |_    | | \'_ \\  |  _ \\| |_ #@(main@3)'+ __context() + '\n';
_str_main+=__indent() +'#   | |_) |  _|   | | | | | | |_) |  _| #@(main@4)'+ __context() + '\n';
_str_main+=__indent() +'#   |____/|_|     |_|_| |_| |____/|_| #@(main@5)'+ __context() + '\n';
_str_main+=__indent() +'# #@(main@6)'+ __context() + '\n';
_str_main+=__indent() +'# bf in bf : by using bf assembler language #@(main@7)'+ __context() + '\n';
var MAXCODE;MAXCODE='255'; MAXCODE=(isNaN(MAXCODE*1))?(MAXCODE):(MAXCODE*1); 
var MIDCODE;MIDCODE='127'; MIDCODE=(isNaN(MIDCODE*1))?(MIDCODE):(MIDCODE*1); 
var MAXDATA;MAXDATA='255'; MAXDATA=(isNaN(MAXDATA*1))?(MAXDATA):(MAXDATA*1); 
var ENDOFCODE;ENDOFCODE='\'!\''; ENDOFCODE=(isNaN(ENDOFCODE*1))?(ENDOFCODE):(ENDOFCODE*1); 
var BF_INC;BF_INC='1'; BF_INC=(isNaN(BF_INC*1))?(BF_INC):(BF_INC*1); 
var BF_DEC;BF_DEC='3'; BF_DEC=(isNaN(BF_DEC*1))?(BF_DEC):(BF_DEC*1); 
var BF_LEFT;BF_LEFT='18'; BF_LEFT=(isNaN(BF_LEFT*1))?(BF_LEFT):(BF_LEFT*1); 
var BF_RIGHT;BF_RIGHT='20'; BF_RIGHT=(isNaN(BF_RIGHT*1))?(BF_RIGHT):(BF_RIGHT*1); 
var BF_IN;BF_IN='2'; BF_IN=(isNaN(BF_IN*1))?(BF_IN):(BF_IN*1); 
var BF_OUT;BF_OUT='4'; BF_OUT=(isNaN(BF_OUT*1))?(BF_OUT):(BF_OUT*1); 
var BF_OBRACKET;BF_OBRACKET='49'; BF_OBRACKET=(isNaN(BF_OBRACKET*1))?(BF_OBRACKET):(BF_OBRACKET*1); 
var BF_CBRACKET;BF_CBRACKET='51'; BF_CBRACKET=(isNaN(BF_CBRACKET*1))?(BF_CBRACKET):(BF_CBRACKET*1); 
_str_main+=__indent() +' #@(main@20)'+ __context() + '\n';
_str_main+=__indent() +'#(begin include)../include/macro.inc' + '\n';
_str_main+=__indent() +'# Common macros #@(macro_inc@1)'+ __context() + '\n';
_str_main+=__indent() +'# scope variables #@(macro_inc@2)'+ __context() + '\n';
var __scope; var __idx;
__scope=[0]; __idx = 0;
_str_main+=__indent() +' #@(macro_inc@5)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@6)'+ __context() + '\n';
_str_main+=__indent() +'# macro scope_begin : start a new scope for local variable (usage of macro lvar) #@(macro_inc@7)'+ __context() + '\n';
var _scope_begin; _scope_begin=0;
var scope_begin = function(){
 _scope_begin++;
var _strscope_begin; 
_strscope_begin='';
if (arguments.length != 0) throw 'Too much arguments provided to macro scope_begin()[' + [] +']';
__scope.push(0);
return _strscope_begin;
}
_str_main+=__indent() +' #@(macro_inc@11)'+ __context() + '\n';
_str_main+=__indent() +'# macro scope_end : end a scope , then drop scoped local variables (drop) (usage of lvar) #@(macro_inc@12)'+ __context() + '\n';
var _scope_end; _scope_end=0;
var scope_end = function(){
 _scope_end++;
var _strscope_end; 
_strscope_end='';
if (arguments.length != 0) throw 'Too much arguments provided to macro scope_end()[' + [] +']';
if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
_strscope_end+=__indent() +'drop #@(macro_inc@15)'+ __context() + '\n';
}
if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
return _strscope_end;
}
_str_main+=__indent() +' #@(macro_inc@19)'+ __context() + '\n';
_str_main+=__indent() +'# macro lvar(vname,value) : declare  in scope, a local variable named vname with an assigned value (stored in stack) #@(macro_inc@20)'+ __context() + '\n';
var _lvar; _lvar=0;
var lvar = function(vname,value){
 _lvar++;
var _strlvar; 
_strlvar='';
if (typeof vname == 'undefined') throw 'Parameter vname is undefined in call of  macro lvar(vname,value)[' + [vname,value] +']';
if (typeof value == 'undefined') throw 'Parameter value is undefined in call of  macro lvar(vname,value)[' + [vname,value] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro lvar(vname,value)[' + [vname,value] +']';
_strlvar+=__indent() +'push    ' + (value) + ' #@(macro_inc@22)'+ __context() + '\n';
_strlvar+=__indent() +'sbm     ' + (vname) + ' #@(macro_inc@23)'+ __context() + '\n';
__scope[__scope.length-1]++;
return _strlvar;
}
_str_main+=__indent() +' #@(macro_inc@26)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_diff(a,b) : if (a != b) { #@(macro_inc@27)'+ __context() + '\n';
var _if_diff; _if_diff=0;
var if_diff = function(a,b){
 _if_diff++;
var _strif_diff; 
_strif_diff='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_diff(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_diff(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_diff(a,b)[' + [a,b] +']';
_strif_diff+=__indent() +'push    ' + (a) + ' #@(macro_inc@29)'+ __context() + '\n';
_strif_diff+=__indent() +'push    ' + (b) + ' #@(macro_inc@30)'+ __context() + '\n';
_strif_diff+=__indent() +'diff #@(macro_inc@31)'+ __context() + '\n';
_strif_diff+=__indent() +'if #@(macro_inc@32)'+ __context() + '\n';
__blockLevel__++;
return _strif_diff;
}
_str_main+=__indent() +' #@(macro_inc@34)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_equal(a,b) : if (a == b) { #@(macro_inc@35)'+ __context() + '\n';
var _if_equal; _if_equal=0;
var if_equal = function(a,b){
 _if_equal++;
var _strif_equal; 
_strif_equal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_equal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_equal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_equal(a,b)[' + [a,b] +']';
_strif_equal+=__indent() +'push    ' + (a) + ' #@(macro_inc@37)'+ __context() + '\n';
_strif_equal+=__indent() +'push    ' + (b) + ' #@(macro_inc@38)'+ __context() + '\n';
_strif_equal+=__indent() +'equal #@(macro_inc@39)'+ __context() + '\n';
_strif_equal+=__indent() +'if #@(macro_inc@40)'+ __context() + '\n';
__blockLevel__++;
return _strif_equal;
}
_str_main+=__indent() +' #@(macro_inc@42)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_sup(a,b) : if (a > b) { #@(macro_inc@43)'+ __context() + '\n';
var _if_sup; _if_sup=0;
var if_sup = function(a,b){
 _if_sup++;
var _strif_sup; 
_strif_sup='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_sup(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_sup(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_sup(a,b)[' + [a,b] +']';
_strif_sup+=__indent() +'push    ' + (a) + ' #@(macro_inc@45)'+ __context() + '\n';
_strif_sup+=__indent() +'push    ' + (b) + ' #@(macro_inc@46)'+ __context() + '\n';
_strif_sup+=__indent() +'sup #@(macro_inc@47)'+ __context() + '\n';
_strif_sup+=__indent() +'if #@(macro_inc@48)'+ __context() + '\n';
__blockLevel__++;
return _strif_sup;
}
_str_main+=__indent() +' #@(macro_inc@50)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_inf(a,b) : if (a < b) { #@(macro_inc@51)'+ __context() + '\n';
var _if_inf; _if_inf=0;
var if_inf = function(a,b){
 _if_inf++;
var _strif_inf; 
_strif_inf='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_inf(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_inf(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_inf(a,b)[' + [a,b] +']';
_strif_inf+=__indent() +'push    ' + (a) + ' #@(macro_inc@53)'+ __context() + '\n';
_strif_inf+=__indent() +'push    ' + (b) + ' #@(macro_inc@54)'+ __context() + '\n';
_strif_inf+=__indent() +'inf #@(macro_inc@55)'+ __context() + '\n';
_strif_inf+=__indent() +'if #@(macro_inc@56)'+ __context() + '\n';
__blockLevel__++;
return _strif_inf;
}
_str_main+=__indent() +' #@(macro_inc@58)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_supequal(a,b) : if (a >= b) { #@(macro_inc@59)'+ __context() + '\n';
var _if_supequal; _if_supequal=0;
var if_supequal = function(a,b){
 _if_supequal++;
var _strif_supequal; 
_strif_supequal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_supequal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_supequal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_supequal(a,b)[' + [a,b] +']';
_strif_supequal+=__indent() +'push    ' + (a) + ' #@(macro_inc@61)'+ __context() + '\n';
_strif_supequal+=__indent() +'push    ' + (b) + ' #@(macro_inc@62)'+ __context() + '\n';
_strif_supequal+=__indent() +'inf #@(macro_inc@63)'+ __context() + '\n';
_strif_supequal+=__indent() +'not #@(macro_inc@64)'+ __context() + '\n';
_strif_supequal+=__indent() +'if #@(macro_inc@65)'+ __context() + '\n';
__blockLevel__++;
return _strif_supequal;
}
_str_main+=__indent() +' #@(macro_inc@67)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_infequal(a,b) : if (a <= b) { #@(macro_inc@68)'+ __context() + '\n';
var _if_infequal; _if_infequal=0;
var if_infequal = function(a,b){
 _if_infequal++;
var _strif_infequal; 
_strif_infequal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_infequal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_infequal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_infequal(a,b)[' + [a,b] +']';
_strif_infequal+=__indent() +'push    ' + (a) + ' #@(macro_inc@70)'+ __context() + '\n';
_strif_infequal+=__indent() +'push    ' + (b) + ' #@(macro_inc@71)'+ __context() + '\n';
_strif_infequal+=__indent() +'sup #@(macro_inc@72)'+ __context() + '\n';
_strif_infequal+=__indent() +'not #@(macro_inc@73)'+ __context() + '\n';
_strif_infequal+=__indent() +'if #@(macro_inc@74)'+ __context() + '\n';
__blockLevel__++;
return _strif_infequal;
}
_str_main+=__indent() +' #@(macro_inc@76)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_2 #@(macro_inc@77)'+ __context() + '\n';
var _at_2; _at_2=0;
var at_2 = function(ope, a,b){
 _at_2++;
var _strat_2; 
_strat_2='';
if (typeof ope == 'undefined') throw 'Parameter ope is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro at_2(ope, a,b)[' + [ope, a,b] +']';
_strat_2+=__indent() +'at      ' + (a) + ' #@(macro_inc@79)'+ __context() + '\n';
__blockLevel__++;
_strat_2+=__indent() +'' + (ope) + '   ' + (b) + ' #@(macro_inc@80)' + __context() + '\n';
__blockLevel__--;
_strat_2+=__indent() +'ta #@(macro_inc@81)'+ __context() + '\n';
return _strat_2;
}
_str_main+=__indent() +' #@(macro_inc@83)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_1 #@(macro_inc@84)'+ __context() + '\n';
var _at_1; _at_1=0;
var at_1 = function(ope, a){
 _at_1++;
var _strat_1; 
_strat_1='';
if (typeof ope == 'undefined') throw 'Parameter ope is undefined in call of  macro at_1(ope, a)[' + [ope, a] +']';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_1(ope, a)[' + [ope, a] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_1(ope, a)[' + [ope, a] +']';
_strat_1+=__indent() +'#(begin macro)at_2(ope,a,"")' + '\n';
__context__.push('(macro_inc@86)');
_strat_1+=at_2(ope,a,"");
__context__.pop();
_strat_1+=__indent() +'#(end macro)at_2(ope,a,"")' + '\n';
return _strat_1;
}
_str_main+=__indent() +' #@(macro_inc@88)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_reset(a) : a=0 #@(macro_inc@89)'+ __context() + '\n';
var _at_reset; _at_reset=0;
var at_reset = function(a){
 _at_reset++;
var _strat_reset; 
_strat_reset='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_reset(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_reset(a)[' + [a] +']';
_strat_reset+=__indent() +'#(begin macro)at_1("reset",a)' + '\n';
__context__.push('(macro_inc@91)');
_strat_reset+=at_1("reset",a);
__context__.pop();
_strat_reset+=__indent() +'#(end macro)at_1("reset",a)' + '\n';
return _strat_reset;
}
_str_main+=__indent() +' #@(macro_inc@93)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_inc(a) : a++ #@(macro_inc@94)'+ __context() + '\n';
var _at_inc; _at_inc=0;
var at_inc = function(a){
 _at_inc++;
var _strat_inc; 
_strat_inc='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_inc(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_inc(a)[' + [a] +']';
_strat_inc+=__indent() +'#(begin macro)at_1("inc",a)' + '\n';
__context__.push('(macro_inc@96)');
_strat_inc+=at_1("inc",a);
__context__.pop();
_strat_inc+=__indent() +'#(end macro)at_1("inc",a)' + '\n';
return _strat_inc;
}
_str_main+=__indent() +' #@(macro_inc@98)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_dec(a) : a-- #@(macro_inc@99)'+ __context() + '\n';
var _at_dec; _at_dec=0;
var at_dec = function(a){
 _at_dec++;
var _strat_dec; 
_strat_dec='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_dec(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_dec(a)[' + [a] +']';
_strat_dec+=__indent() +'#(begin macro)at_1("dec",a)' + '\n';
__context__.push('(macro_inc@101)');
_strat_dec+=at_1("dec",a);
__context__.pop();
_strat_dec+=__indent() +'#(end macro)at_1("dec",a)' + '\n';
return _strat_dec;
}
_str_main+=__indent() +' #@(macro_inc@103)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_in(a)  : a= readchar() #@(macro_inc@104)'+ __context() + '\n';
var _at_in; _at_in=0;
var at_in = function(a){
 _at_in++;
var _strat_in; 
_strat_in='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_in(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_in(a)[' + [a] +']';
_strat_in+=__indent() +'#(begin macro)at_1("in",a)' + '\n';
__context__.push('(macro_inc@106)');
_strat_in+=at_1("in",a);
__context__.pop();
_strat_in+=__indent() +'#(end macro)at_1("in",a)' + '\n';
return _strat_in;
}
_str_main+=__indent() +' #@(macro_inc@108)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_out(a) : write(a) #@(macro_inc@109)'+ __context() + '\n';
var _at_out; _at_out=0;
var at_out = function(a){
 _at_out++;
var _strat_out; 
_strat_out='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_out(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_out(a)[' + [a] +']';
_strat_out+=__indent() +'#(begin macro)at_1("out",a)' + '\n';
__context__.push('(macro_inc@111)');
_strat_out+=at_1("out",a);
__context__.pop();
_strat_out+=__indent() +'#(end macro)at_1("out",a)' + '\n';
return _strat_out;
}
_str_main+=__indent() +' #@(macro_inc@113)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_add(a,b) : a += b (immediate) #@(macro_inc@114)'+ __context() + '\n';
var _at_add; _at_add=0;
var at_add = function(a,b){
 _at_add++;
var _strat_add; 
_strat_add='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_add(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_add(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_add(a,b)[' + [a,b] +']';
_strat_add+=__indent() +'#(begin macro)at_2("add",a,b)' + '\n';
__context__.push('(macro_inc@116)');
_strat_add+=at_2("add",a,b);
__context__.pop();
_strat_add+=__indent() +'#(end macro)at_2("add",a,b)' + '\n';
return _strat_add;
}
_str_main+=__indent() +' #@(macro_inc@118)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_sub(a,b) : a -= b (immediate) #@(macro_inc@119)'+ __context() + '\n';
var _at_sub; _at_sub=0;
var at_sub = function(a,b){
 _at_sub++;
var _strat_sub; 
_strat_sub='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_sub(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_sub(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_sub(a,b)[' + [a,b] +']';
_strat_sub+=__indent() +'#(begin macro)at_2("sub",a,b)' + '\n';
__context__.push('(macro_inc@121)');
_strat_sub+=at_2("sub",a,b);
__context__.pop();
_strat_sub+=__indent() +'#(end macro)at_2("sub",a,b)' + '\n';
return _strat_sub;
}
_str_main+=__indent() +' #@(macro_inc@123)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_set(a,b) : a = b (immediate) #@(macro_inc@124)'+ __context() + '\n';
var _at_set; _at_set=0;
var at_set = function(a,b){
 _at_set++;
var _strat_set; 
_strat_set='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_set(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_set(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_set(a,b)[' + [a,b] +']';
_strat_set+=__indent() +'#(begin macro)at_2("set",a,b)' + '\n';
__context__.push('(macro_inc@126)');
_strat_set+=at_2("set",a,b);
__context__.pop();
_strat_set+=__indent() +'#(end macro)at_2("set",a,b)' + '\n';
return _strat_set;
}
_str_main+=__indent() +' #@(macro_inc@128)'+ __context() + '\n';
var _write; _write=0;
var write = function(a){
 _write++;
var _strwrite; 
_strwrite='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro write(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro write(a)[' + [a] +']';
_strwrite+=__indent() +'push    ' + (a) + ' #@(macro_inc@130)'+ __context() + '\n';
_strwrite+=__indent() +'pop     out #@(macro_inc@131)'+ __context() + '\n';
return _strwrite;
}
_str_main+=__indent() +' #@(macro_inc@133)'+ __context() + '\n';
var _divide; _divide=0;
var divide = function(a,b,d,r){
 _divide++;
var _strdivide; 
_strdivide='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof d == 'undefined') throw 'Parameter d is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof r == 'undefined') throw 'Parameter r is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (arguments.length != 4) throw 'Too much arguments provided to macro divide(a,b,d,r)[' + [a,b,d,r] +']';
_strdivide+=__indent() +'push    ' + (a) + ' #@(macro_inc@135)'+ __context() + '\n';
_strdivide+=__indent() +'push    ' + (b) + ' #@(macro_inc@136)'+ __context() + '\n';
_strdivide+=__indent() +'div #@(macro_inc@137)'+ __context() + '\n';
_strdivide+=__indent() +'pop     ' + (d) + ' #@(macro_inc@138)'+ __context() + '\n';
_strdivide+=__indent() +'pop     ' + (r) + ' #@(macro_inc@139)'+ __context() + '\n';
return _strdivide;
}
_str_main+=__indent() +' #@(macro_inc@141)'+ __context() + '\n';
_str_main+=__indent() +'#macro addof() : push A, push B , replaced by Carry, A+B #@(macro_inc@142)'+ __context() + '\n';
var _addof; _addof=0;
var addof = function(){
 _addof++;
var _straddof; 
_straddof='';
if (arguments.length != 0) throw 'Too much arguments provided to macro addof()[' + [] +']';
_straddof+=__indent() +'sbm _addofb' + (_addof) + ' #@(macro_inc@144)'+ __context() + '\n';
_straddof+=__indent() +'sbm _addofa' + (_addof) + ' - 1 #@(macro_inc@145)'+ __context() + '\n';
_straddof+=__indent() +'#(begin macro)scope_begin()' + '\n';
__context__.push('(macro_inc@146)');
_straddof+=scope_begin();
__context__.pop();
_straddof+=__indent() +'#(end macro)scope_begin()' + '\n';
_straddof+=__indent() +'#(begin macro)lvar("_addofc"+_addof ,0)' + '\n';
__context__.push('(macro_inc@147)');
_straddof+=lvar("_addofc"+_addof ,0);
__context__.pop();
_straddof+=__indent() +'#(end macro)lvar("_addofc"+_addof ,0)' + '\n';
_straddof+=__indent() +'push 1 #@(macro_inc@148)'+ __context() + '\n';
_straddof+=__indent() +'sbm _loopao' + (_addof) + ' #@(macro_inc@149)'+ __context() + '\n';
_straddof+=__indent() +'while #@(macro_inc@150)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'push _addofa' + (_addof) + ' #@(macro_inc@151)'+ __context() + '\n';
_straddof+=__indent() +'if #@(macro_inc@152)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _addofa' + (_addof) + ' #@(macro_inc@153)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'dec #@(macro_inc@154)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@155)'+ __context() + '\n';
_straddof+=__indent() +'at _addofb' + (_addof) + ' #@(macro_inc@156)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'inc #@(macro_inc@157)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@158)'+ __context() + '\n';
_straddof+=__indent() +'push _addofb' + (_addof) + ' #@(macro_inc@159)'+ __context() + '\n';
_straddof+=__indent() +'not #@(macro_inc@160)'+ __context() + '\n';
_straddof+=__indent() +'if #@(macro_inc@161)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _addofc' + (_addof) + ' #@(macro_inc@162)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'set 1 #@(macro_inc@163)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@164)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'fi #@(macro_inc@165)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'else #@(macro_inc@166)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _loopao' + (_addof) + ' #@(macro_inc@167)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'reset #@(macro_inc@168)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@169)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'fi #@(macro_inc@170)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'wend #@(macro_inc@171)'+ __context() + '\n';
_straddof+=__indent() +'push _addofc' + (_addof) + ' #@(macro_inc@172)'+ __context() + '\n';
_straddof+=__indent() +'if #@(macro_inc@173)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _addofa' + (_addof) + ' #@(macro_inc@174)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'set 1 #@(macro_inc@175)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@176)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'fi #@(macro_inc@177)'+ __context() + '\n';
_straddof+=__indent() +'#(begin macro)scope_end()' + '\n';
__context__.push('(macro_inc@178)');
_straddof+=scope_end();
__context__.pop();
_straddof+=__indent() +'#(end macro)scope_end()' + '\n';
return _straddof;
}
_str_main+=__indent() +' #@(macro_inc@180)'+ __context() + '\n';
_str_main+=__indent() +'# macro subof() : push A, push B , replaced by Carry, A-B #@(macro_inc@181)'+ __context() + '\n';
var _subof; _subof=0;
var subof = function(){
 _subof++;
var _strsubof; 
_strsubof='';
if (arguments.length != 0) throw 'Too much arguments provided to macro subof()[' + [] +']';
_strsubof+=__indent() +'sbm _subofb' + (_subof) + ' #@(macro_inc@183)'+ __context() + '\n';
_strsubof+=__indent() +'sbm _subofa' + (_subof) + ' - 1 #@(macro_inc@184)'+ __context() + '\n';
_strsubof+=__indent() +'#(begin macro)scope_begin()' + '\n';
__context__.push('(macro_inc@185)');
_strsubof+=scope_begin();
__context__.pop();
_strsubof+=__indent() +'#(end macro)scope_begin()' + '\n';
_strsubof+=__indent() +'#(begin macro)lvar("_subofc"+_subof ,0)' + '\n';
__context__.push('(macro_inc@186)');
_strsubof+=lvar("_subofc"+_subof ,0);
__context__.pop();
_strsubof+=__indent() +'#(end macro)lvar("_subofc"+_subof ,0)' + '\n';
_strsubof+=__indent() +'push 1 #@(macro_inc@187)'+ __context() + '\n';
_strsubof+=__indent() +'sbm _loopso' + (_subof) + ' #@(macro_inc@188)'+ __context() + '\n';
_strsubof+=__indent() +'while #@(macro_inc@189)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'push _subofb' + (_subof) + ' #@(macro_inc@190)'+ __context() + '\n';
_strsubof+=__indent() +'if #@(macro_inc@191)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _subofb' + (_subof) + ' #@(macro_inc@192)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'dec #@(macro_inc@193)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@194)'+ __context() + '\n';
_strsubof+=__indent() +'at _subofa' + (_subof) + ' #@(macro_inc@195)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'dec #@(macro_inc@196)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@197)'+ __context() + '\n';
_strsubof+=__indent() +'push _subofa' + (_subof) + ' #@(macro_inc@198)'+ __context() + '\n';
_strsubof+=__indent() +'inc #@(macro_inc@199)'+ __context() + '\n';
_strsubof+=__indent() +'not #@(macro_inc@200)'+ __context() + '\n';
_strsubof+=__indent() +'if #@(macro_inc@201)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _subofc' + (_subof) + ' #@(macro_inc@202)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'set 1 #@(macro_inc@203)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@204)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'fi #@(macro_inc@205)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'else #@(macro_inc@206)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _loopso' + (_subof) + ' #@(macro_inc@207)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'reset #@(macro_inc@208)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@209)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'fi #@(macro_inc@210)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'wend #@(macro_inc@211)'+ __context() + '\n';
_strsubof+=__indent() +'push _subofc' + (_subof) + ' #@(macro_inc@212)'+ __context() + '\n';
_strsubof+=__indent() +'if #@(macro_inc@213)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _subofb' + (_subof) + ' #@(macro_inc@214)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'set 1 #@(macro_inc@215)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@216)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'fi #@(macro_inc@217)'+ __context() + '\n';
_strsubof+=__indent() +'#(begin macro)scope_end()' + '\n';
__context__.push('(macro_inc@218)');
_strsubof+=scope_end();
__context__.pop();
_strsubof+=__indent() +'#(end macro)scope_end()' + '\n';
_strsubof+=__indent() +'swap #@(macro_inc@219)'+ __context() + '\n';
return _strsubof;
}
_str_main+=__indent() +' #@(macro_inc@221)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulof() : A = stack-1, B= stack : stack-1 = A*B div 256, stack = A*B mod 256 #@(macro_inc@222)'+ __context() + '\n';
var _mulof; _mulof=0;
var mulof = function(){
 _mulof++;
var _strmulof; 
_strmulof='';
if (arguments.length != 0) throw 'Too much arguments provided to macro mulof()[' + [] +']';
_strmulof+=__indent() +'sbm     _mulofA' + (_mulof) + ' - 1 #@(macro_inc@224)'+ __context() + '\n';
_strmulof+=__indent() +'sbm     _mulofB' + (_mulof) + ' #@(macro_inc@225)'+ __context() + '\n';
_strmulof+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(macro_inc@226)');
_strmulof+=scope_begin();
__context__.pop();
_strmulof+=__indent() +'#(end macro)scope_begin' + '\n';
_strmulof+=__indent() +'#(begin macro)lvar    _mulofABdiv256' + (_mulof) + ',    0' + '\n';
__context__.push('(macro_inc@227)');
_strmulof+=lvar(((isNaN(('_mulofABdiv256' + (_mulof) + '')*1))?('_mulofABdiv256' + (_mulof) + ''):(('_mulofABdiv256' + (_mulof) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulof+=__indent() +'#(end macro)lvar    _mulofABdiv256' + (_mulof) + ',    0' + '\n';
_strmulof+=__indent() +'#(begin macro)lvar    _mulofABmod256' + (_mulof) + ',    0' + '\n';
__context__.push('(macro_inc@228)');
_strmulof+=lvar(((isNaN(('_mulofABmod256' + (_mulof) + '')*1))?('_mulofABmod256' + (_mulof) + ''):(('_mulofABmod256' + (_mulof) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulof+=__indent() +'#(end macro)lvar    _mulofABmod256' + (_mulof) + ',    0' + '\n';
_strmulof+=__indent() +'push    _mulofB' + (_mulof) + ' #@(macro_inc@229)'+ __context() + '\n';
_strmulof+=__indent() +'loop #@(macro_inc@230)'+ __context() + '\n';
__blockLevel__++;
_strmulof+=__indent() +'push    _mulofABmod256' + (_mulof) + ' #@(macro_inc@231)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofA' + (_mulof) + ' #@(macro_inc@232)'+ __context() + '\n';
_strmulof+=__indent() +'#(begin macro)addof' + '\n';
__context__.push('(macro_inc@233)');
_strmulof+=addof();
__context__.pop();
_strmulof+=__indent() +'#(end macro)addof' + '\n';
_strmulof+=__indent() +'pop     _mulofABmod256' + (_mulof) + ' #@(macro_inc@234)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofABdiv256' + (_mulof) + ' #@(macro_inc@235)'+ __context() + '\n';
_strmulof+=__indent() +'add #@(macro_inc@236)'+ __context() + '\n';
_strmulof+=__indent() +'pop     _mulofABdiv256' + (_mulof) + ' #@(macro_inc@237)'+ __context() + '\n';
__blockLevel__--;
_strmulof+=__indent() +'endloop #@(macro_inc@238)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofABmod256' + (_mulof) + ' #@(macro_inc@239)'+ __context() + '\n';
_strmulof+=__indent() +'pop     _mulofB' + (_mulof) + ' #@(macro_inc@240)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofABdiv256' + (_mulof) + ' #@(macro_inc@241)'+ __context() + '\n';
_strmulof+=__indent() +'pop     _mulofA' + (_mulof) + ' #@(macro_inc@242)'+ __context() + '\n';
_strmulof+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(macro_inc@243)');
_strmulof+=scope_end();
__context__.pop();
_strmulof+=__indent() +'#(end macro)scope_end' + '\n';
return _strmulof;
}
_str_main+=__indent() +' #@(macro_inc@245)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@246)'+ __context() + '\n';
var _left_rewind; _left_rewind=0;
var left_rewind = function(array){
 _left_rewind++;
var _strleft_rewind; 
_strleft_rewind='';
if (typeof array == 'undefined') throw 'Parameter array is undefined in call of  macro left_rewind(array)[' + [array] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro left_rewind(array)[' + [array] +']';
_strleft_rewind+=__indent() +'push    1 #@(macro_inc@248)'+ __context() + '\n';
_strleft_rewind+=__indent() +'sbm     __looprewind' + (_left_rewind) + ' #@(macro_inc@249)'+ __context() + '\n';
_strleft_rewind+=__indent() +'while #@(macro_inc@250)'+ __context() + '\n';
__blockLevel__++;
_strleft_rewind+=__indent() +'#(begin macro)if_diff ' + (array) + '.pos,    0' + '\n';
__context__.push('(macro_inc@251)');
_strleft_rewind+=if_diff(((isNaN(('' + (array) + '.pos')*1))?('' + (array) + '.pos'):(('' + (array) + '.pos')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strleft_rewind+=__indent() +'#(end macro)if_diff ' + (array) + '.pos,    0' + '\n';
_strleft_rewind+=__indent() +'arotl ' + (array) + ' #@(macro_inc@252)'+ __context() + '\n';
__blockLevel__--;
_strleft_rewind+=__indent() +'else #@(macro_inc@253)'+ __context() + '\n';
__blockLevel__++;
_strleft_rewind+=__indent() +'#(begin macro)at_reset    __looprewind' + (_left_rewind) + '' + '\n';
__context__.push('(macro_inc@254)');
_strleft_rewind+=at_reset(((isNaN(('__looprewind' + (_left_rewind) + '')*1))?('__looprewind' + (_left_rewind) + ''):(('__looprewind' + (_left_rewind) + '')*1)));
__context__.pop();
_strleft_rewind+=__indent() +'#(end macro)at_reset    __looprewind' + (_left_rewind) + '' + '\n';
__blockLevel__--;
_strleft_rewind+=__indent() +'fi #@(macro_inc@255)'+ __context() + '\n';
__blockLevel__--;
_strleft_rewind+=__indent() +'wend #@(macro_inc@256)'+ __context() + '\n';
return _strleft_rewind;
}
_str_main+=__indent() +' #@(macro_inc@258)'+ __context() + '\n';
var _right_rewind; _right_rewind=0;
var right_rewind = function(array){
 _right_rewind++;
var _strright_rewind; 
_strright_rewind='';
if (typeof array == 'undefined') throw 'Parameter array is undefined in call of  macro right_rewind(array)[' + [array] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro right_rewind(array)[' + [array] +']';
_strright_rewind+=__indent() +'push ' + (array) + '.pos #@(macro_inc@260)'+ __context() + '\n';
_strright_rewind+=__indent() +'loop #@(macro_inc@261)'+ __context() + '\n';
__blockLevel__++;
_strright_rewind+=__indent() +'arotr ' + (array) + ' #@(macro_inc@262)'+ __context() + '\n';
__blockLevel__--;
_strright_rewind+=__indent() +'endloop #@(macro_inc@263)'+ __context() + '\n';
return _strright_rewind;
}
_str_main+=__indent() +' #@(macro_inc@265)'+ __context() + '\n';
_str_main+=__indent() +'# macro popouthexa() : from head of stack value (from 0 to 15) write out hexa (from 0 to 9 and A to F) #@(macro_inc@266)'+ __context() + '\n';
var _popouthexa; _popouthexa=0;
var popouthexa = function(){
 _popouthexa++;
var _strpopouthexa; 
_strpopouthexa='';
if (arguments.length != 0) throw 'Too much arguments provided to macro popouthexa()[' + [] +']';
_strpopouthexa+=__indent() +'sbm     _input' + (_popouthexa) + ' #@(macro_inc@268)'+ __context() + '\n';
_strpopouthexa+=__indent() +'#(begin macro)if_sup  _input' + (_popouthexa) + ',    9' + '\n';
__context__.push('(macro_inc@269)');
_strpopouthexa+=if_sup(((isNaN(('_input' + (_popouthexa) + '')*1))?('_input' + (_popouthexa) + ''):(('_input' + (_popouthexa) + '')*1)),((isNaN(('9')*1))?('9'):(('9')*1)));
__context__.pop();
_strpopouthexa+=__indent() +'#(end macro)if_sup  _input' + (_popouthexa) + ',    9' + '\n';
_strpopouthexa+=__indent() +'#(begin macro)at_add("_input" + _popouthexa, "\'7\'")' + '\n';
__context__.push('(macro_inc@270)');
_strpopouthexa+=at_add("_input" + _popouthexa, "'7'");
__context__.pop();
_strpopouthexa+=__indent() +'#(end macro)at_add("_input" + _popouthexa, "\'7\'")' + '\n';
__blockLevel__--;
_strpopouthexa+=__indent() +'else #@(macro_inc@271)'+ __context() + '\n';
__blockLevel__++;
_strpopouthexa+=__indent() +'#(begin macro)at_add("_input" + _popouthexa, "\'0\'")' + '\n';
__context__.push('(macro_inc@272)');
_strpopouthexa+=at_add("_input" + _popouthexa, "'0'");
__context__.pop();
_strpopouthexa+=__indent() +'#(end macro)at_add("_input" + _popouthexa, "\'0\'")' + '\n';
__blockLevel__--;
_strpopouthexa+=__indent() +'fi #@(macro_inc@273)'+ __context() + '\n';
_strpopouthexa+=__indent() +'pop out #@(macro_inc@274)'+ __context() + '\n';
return _strpopouthexa;
}
_str_main+=__indent() +' #@(macro_inc@276)'+ __context() + '\n';
_str_main+=__indent() +'# macro popout8hexa() : from head of stack the 8 bit value is write out in hexa #@(macro_inc@277)'+ __context() + '\n';
var _popout8hexa; _popout8hexa=0;
var popout8hexa = function(){
 _popout8hexa++;
var _strpopout8hexa; 
_strpopout8hexa='';
if (arguments.length != 0) throw 'Too much arguments provided to macro popout8hexa()[' + [] +']';
_strpopout8hexa+=__indent() +'push    16 #@(macro_inc@279)'+ __context() + '\n';
_strpopout8hexa+=__indent() +'div #@(macro_inc@280)'+ __context() + '\n';
_strpopout8hexa+=__indent() +'#(begin macro)popouthexa # output most significant hexa character from head of stack value, then drop' + '\n';
__context__.push('(macro_inc@281)');
_strpopout8hexa+=popouthexa();
__context__.pop();
_strpopout8hexa+=__indent() +'#(end macro)popouthexa # output most significant hexa character from head of stack value, then drop' + '\n';
_strpopout8hexa+=__indent() +'#(begin macro)popouthexa # output less significant hexa character from head of stack value, then drop' + '\n';
__context__.push('(macro_inc@282)');
_strpopout8hexa+=popouthexa();
__context__.pop();
_strpopout8hexa+=__indent() +'#(end macro)popouthexa # output less significant hexa character from head of stack value, then drop' + '\n';
return _strpopout8hexa;
}
_str_main+=__indent() +' #@(macro_inc@284)'+ __context() + '\n';
_str_main+=__indent() +'# macro print(aString) : print out a string #@(macro_inc@285)'+ __context() + '\n';
var _print; _print=0;
var print = function(aString){
 _print++;
var _strprint; 
_strprint='';
if (typeof aString == 'undefined') throw 'Parameter aString is undefined in call of  macro print(aString)[' + [aString] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro print(aString)[' + [aString] +']';
_strprint+=__indent() +'push    0 #@(macro_inc@287)'+ __context() + '\n';
var __prev; __prev = 0;
for (var istr=0; istr < aString.length ; istr++) {
var __ascii; __ascii = aString[istr].charCodeAt(0);
var __move; __move = __ascii - __prev;
var __dist ; __dist = (__move > 0)?__move:-__move;
if (__dist < __ascii) { // shorter to move
if (__move > 0 ) {
_strprint+=__indent() +'add     ' + (__dist) + ' #@(macro_inc@295)'+ __context() + '\n';
} else {
if (__dist != 0) {
_strprint+=__indent() +'sub     ' + (__dist) + ' #@(macro_inc@298)'+ __context() + '\n';
}
}
} else {
_strprint+=__indent() +'set     ' + (__ascii) + ' #@(macro_inc@302)'+ __context() + '\n';
}
_strprint+=__indent() +'out             # ' + ((aString[istr].charCodeAt(0)>31?("\'"+aString[istr]+"\'"):"")) + ' #@(macro_inc@304)'+ __context() + '\n';
__prev  = __ascii;
}
_strprint+=__indent() +'drop #@(macro_inc@307)'+ __context() + '\n';
return _strprint;
}
_str_main+=__indent() +'#(end include)../include/macro.inc' + '\n';
_str_main+=__indent() +' #@(main@22)'+ __context() + '\n';
_str_main+=__indent() +'# declare global variables #@(main@23)'+ __context() + '\n';
_str_main+=__indent() +'var bfData*' + (MAXDATA) + ' #@(main@24)'+ __context() + '\n';
_str_main+=__indent() +'var bfCode*' + (MAXCODE) + ' #@(main@25)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@26)'+ __context() + '\n';
_str_main+=__indent() +'# read the BF code (stop when meet \'!\') #@(main@27)'+ __context() + '\n';
_str_main+=__indent() +'push 1 #@(main@28)'+ __context() + '\n';
_str_main+=__indent() +'sbm loopCounter #@(main@29)'+ __context() + '\n';
_str_main+=__indent() +'while #@(main@30)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(main@31)');
_str_main+=scope_begin();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_begin' + '\n';
_str_main+=__indent() +'#(begin macro)lvar    readchar,   in' + '\n';
__context__.push('(main@32)');
_str_main+=lvar(((isNaN(('readchar')*1))?('readchar'):(('readchar')*1)),((isNaN(('in')*1))?('in'):(('in')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar    readchar,   in' + '\n';
_str_main+=__indent() +'#(begin macro)if_diff readchar,   ' + (ENDOFCODE) + '' + '\n';
__context__.push('(main@33)');
_str_main+=if_diff(((isNaN(('readchar')*1))?('readchar'):(('readchar')*1)),((isNaN(('' + (ENDOFCODE) + '')*1))?('' + (ENDOFCODE) + ''):(('' + (ENDOFCODE) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_diff readchar,   ' + (ENDOFCODE) + '' + '\n';
_str_main+=__indent() +'push readchar #@(main@34)'+ __context() + '\n';
_str_main+=__indent() +'sub 42        # bf code - 42 , to have smaller value to compare during BF code interpretation #@(main@35)'+ __context() + '\n';
_str_main+=__indent() +'pop bfCode #@(main@36)'+ __context() + '\n';
_str_main+=__indent() +'arotl bfCode    # store readchar in bfCode #@(main@37)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@38)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)at_reset    loopCounter' + '\n';
__context__.push('(main@39)');
_str_main+=at_reset(((isNaN(('loopCounter')*1))?('loopCounter'):(('loopCounter')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_reset    loopCounter' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@40)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(main@41)');
_str_main+=scope_end();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_end' + '\n';
__blockLevel__--;
_str_main+=__indent() +'wend # loop for each input bf code #@(main@42)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@43)'+ __context() + '\n';
_str_main+=__indent() +'# rewind bfCode #@(main@44)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_sup  ' + (MIDCODE) + ',  bfCode.pos   # reverse rot to zero' + '\n';
__context__.push('(main@45)');
_str_main+=if_sup(((isNaN(('' + (MIDCODE) + '')*1))?('' + (MIDCODE) + ''):(('' + (MIDCODE) + '')*1)),((isNaN(('bfCode.pos')*1))?('bfCode.pos'):(('bfCode.pos')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_sup  ' + (MIDCODE) + ',  bfCode.pos   # reverse rot to zero' + '\n';
_str_main+=__indent() +'push bfCode.pos #@(main@46)'+ __context() + '\n';
_str_main+=__indent() +'loop #@(main@47)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'arotr bfCode #@(main@48)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'endloop #@(main@49)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'else # forward rot to zero #@(main@50)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'push 0 #@(main@51)'+ __context() + '\n';
_str_main+=__indent() +'push bfCode.pos #@(main@52)'+ __context() + '\n';
_str_main+=__indent() +'sub #@(main@53)'+ __context() + '\n';
_str_main+=__indent() +'loop #@(main@54)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'arotl bfCode #@(main@55)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'endloop #@(main@56)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@57)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@58)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@59)'+ __context() + '\n';
_str_main+=__indent() +'# interpret the BF code #@(main@60)'+ __context() + '\n';
_str_main+=__indent() +'push 1 #@(main@61)'+ __context() + '\n';
_str_main+=__indent() +'sbm loopCounter2 #@(main@62)'+ __context() + '\n';
_str_main+=__indent() +'while #@(main@63)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(main@64)');
_str_main+=scope_begin();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_begin' + '\n';
_str_main+=__indent() +'# local variables #@(main@65)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)lvar    bfD,    bfData' + '\n';
__context__.push('(main@66)');
_str_main+=lvar(((isNaN(('bfD')*1))?('bfD'):(('bfD')*1)),((isNaN(('bfData')*1))?('bfData'):(('bfData')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar    bfD,    bfData' + '\n';
_str_main+=__indent() +'#(begin macro)lvar    instr,  bfCode' + '\n';
__context__.push('(main@67)');
_str_main+=lvar(((isNaN(('instr')*1))?('instr'):(('instr')*1)),((isNaN(('bfCode')*1))?('bfCode'):(('bfCode')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar    instr,  bfCode' + '\n';
_str_main+=__indent() +' #@(main@68)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    instr,  0' + '\n';
__context__.push('(main@69)');
_str_main+=if_equal(((isNaN(('instr')*1))?('instr'):(('instr')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    instr,  0' + '\n';
_str_main+=__indent() +'#(begin macro)at_reset    loopCounter2' + '\n';
__context__.push('(main@70)');
_str_main+=at_reset(((isNaN(('loopCounter2')*1))?('loopCounter2'):(('loopCounter2')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_reset    loopCounter2' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@71)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)if_equal    instr,  ' + (BF_INC) + '' + '\n';
__context__.push('(main@72)');
_str_main+=if_equal(((isNaN(('instr')*1))?('instr'):(('instr')*1)),((isNaN(('' + (BF_INC) + '')*1))?('' + (BF_INC) + ''):(('' + (BF_INC) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    instr,  ' + (BF_INC) + '' + '\n';
_str_main+=__indent() +'#(begin macro)at_inc  bfData' + '\n';
__context__.push('(main@73)');
_str_main+=at_inc(((isNaN(('bfData')*1))?('bfData'):(('bfData')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_inc  bfData' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@74)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@75)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    instr,  ' + (BF_DEC) + '' + '\n';
__context__.push('(main@76)');
_str_main+=if_equal(((isNaN(('instr')*1))?('instr'):(('instr')*1)),((isNaN(('' + (BF_DEC) + '')*1))?('' + (BF_DEC) + ''):(('' + (BF_DEC) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    instr,  ' + (BF_DEC) + '' + '\n';
_str_main+=__indent() +'#(begin macro)at_dec  bfData' + '\n';
__context__.push('(main@77)');
_str_main+=at_dec(((isNaN(('bfData')*1))?('bfData'):(('bfData')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_dec  bfData' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@78)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@79)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    instr,  ' + (BF_OUT) + '' + '\n';
__context__.push('(main@80)');
_str_main+=if_equal(((isNaN(('instr')*1))?('instr'):(('instr')*1)),((isNaN(('' + (BF_OUT) + '')*1))?('' + (BF_OUT) + ''):(('' + (BF_OUT) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    instr,  ' + (BF_OUT) + '' + '\n';
_str_main+=__indent() +'#(begin macro)at_out("bfData")' + '\n';
__context__.push('(main@81)');
_str_main+=at_out("bfData");
__context__.pop();
_str_main+=__indent() +'#(end macro)at_out("bfData")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@82)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@83)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    instr,  ' + (BF_IN) + '' + '\n';
__context__.push('(main@84)');
_str_main+=if_equal(((isNaN(('instr')*1))?('instr'):(('instr')*1)),((isNaN(('' + (BF_IN) + '')*1))?('' + (BF_IN) + ''):(('' + (BF_IN) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    instr,  ' + (BF_IN) + '' + '\n';
_str_main+=__indent() +'#(begin macro)at_in   bfData' + '\n';
__context__.push('(main@85)');
_str_main+=at_in(((isNaN(('bfData')*1))?('bfData'):(('bfData')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_in   bfData' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@86)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@87)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    instr,  ' + (BF_LEFT) + '' + '\n';
__context__.push('(main@88)');
_str_main+=if_equal(((isNaN(('instr')*1))?('instr'):(('instr')*1)),((isNaN(('' + (BF_LEFT) + '')*1))?('' + (BF_LEFT) + ''):(('' + (BF_LEFT) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    instr,  ' + (BF_LEFT) + '' + '\n';
_str_main+=__indent() +'arotl bfData #@(main@89)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@90)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@91)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    instr,  ' + (BF_RIGHT) + '' + '\n';
__context__.push('(main@92)');
_str_main+=if_equal(((isNaN(('instr')*1))?('instr'):(('instr')*1)),((isNaN(('' + (BF_RIGHT) + '')*1))?('' + (BF_RIGHT) + ''):(('' + (BF_RIGHT) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    instr,  ' + (BF_RIGHT) + '' + '\n';
_str_main+=__indent() +'arotr bfData #@(main@93)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@94)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@95)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(main@96)');
_str_main+=scope_begin();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_begin' + '\n';
_str_main+=__indent() +'#(begin macro)lvar    countBracket,   0' + '\n';
__context__.push('(main@97)');
_str_main+=lvar(((isNaN(('countBracket')*1))?('countBracket'):(('countBracket')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar    countBracket,   0' + '\n';
_str_main+=__indent() +' #@(main@98)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    instr,  ' + (BF_OBRACKET) + '' + '\n';
__context__.push('(main@99)');
_str_main+=if_equal(((isNaN(('instr')*1))?('instr'):(('instr')*1)),((isNaN(('' + (BF_OBRACKET) + '')*1))?('' + (BF_OBRACKET) + ''):(('' + (BF_OBRACKET) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    instr,  ' + (BF_OBRACKET) + '' + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    bfD,    0      # if data is zero go to matching \']\'' + '\n';
__context__.push('(main@100)');
_str_main+=if_equal(((isNaN(('bfD')*1))?('bfD'):(('bfD')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    bfD,    0      # if data is zero go to matching \']\'' + '\n';
_str_main+=__indent() +'push    1 #@(main@101)'+ __context() + '\n';
_str_main+=__indent() +'sbm     g2mcbl # Go To Matching Closing Bracket Loop #@(main@102)'+ __context() + '\n';
_str_main+=__indent() +'while #@(main@103)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'arotl   bfCode   # go to next bfCode #@(main@104)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(main@105)');
_str_main+=scope_begin();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_begin' + '\n';
_str_main+=__indent() +'#(begin macro)lvar    tmpBfCode,  bfCode # local variable in scope' + '\n';
__context__.push('(main@106)');
_str_main+=lvar(((isNaN(('tmpBfCode')*1))?('tmpBfCode'):(('tmpBfCode')*1)),((isNaN(('bfCode')*1))?('bfCode'):(('bfCode')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar    tmpBfCode,  bfCode # local variable in scope' + '\n';
_str_main+=__indent() +' #@(main@107)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    tmpBfCode,  ' + (BF_OBRACKET) + '' + '\n';
__context__.push('(main@108)');
_str_main+=if_equal(((isNaN(('tmpBfCode')*1))?('tmpBfCode'):(('tmpBfCode')*1)),((isNaN(('' + (BF_OBRACKET) + '')*1))?('' + (BF_OBRACKET) + ''):(('' + (BF_OBRACKET) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    tmpBfCode,  ' + (BF_OBRACKET) + '' + '\n';
_str_main+=__indent() +'#(begin macro)at_inc  countBracket' + '\n';
__context__.push('(main@109)');
_str_main+=at_inc(((isNaN(('countBracket')*1))?('countBracket'):(('countBracket')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_inc  countBracket' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else       # if current bfCode != \'[\' #@(main@110)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)if_equal    tmpBfCode,  ' + (BF_CBRACKET) + '' + '\n';
__context__.push('(main@111)');
_str_main+=if_equal(((isNaN(('tmpBfCode')*1))?('tmpBfCode'):(('tmpBfCode')*1)),((isNaN(('' + (BF_CBRACKET) + '')*1))?('' + (BF_CBRACKET) + ''):(('' + (BF_CBRACKET) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    tmpBfCode,  ' + (BF_CBRACKET) + '' + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    countBracket,   0' + '\n';
__context__.push('(main@112)');
_str_main+=if_equal(((isNaN(('countBracket')*1))?('countBracket'):(('countBracket')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    countBracket,   0' + '\n';
_str_main+=__indent() +'#(begin macro)at_reset    g2mcbl' + '\n';
__context__.push('(main@113)');
_str_main+=at_reset(((isNaN(('g2mcbl')*1))?('g2mcbl'):(('g2mcbl')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_reset    g2mcbl' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else # if countBracket >0 then countBracket-- #@(main@114)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)at_dec  countBracket' + '\n';
__context__.push('(main@115)');
_str_main+=at_dec(((isNaN(('countBracket')*1))?('countBracket'):(('countBracket')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_dec  countBracket' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@116)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'else   # if current bfCode != \']\' #@(main@117)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)if_equal    tmpBfCode,  0' + '\n';
__context__.push('(main@118)');
_str_main+=if_equal(((isNaN(('tmpBfCode')*1))?('tmpBfCode'):(('tmpBfCode')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    tmpBfCode,  0' + '\n';
_str_main+=__indent() +'#(begin macro)at_reset    g2mcbl' + '\n';
__context__.push('(main@119)');
_str_main+=at_reset(((isNaN(('g2mcbl')*1))?('g2mcbl'):(('g2mcbl')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_reset    g2mcbl' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@120)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@121)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@122)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(main@123)');
_str_main+=scope_end();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_end' + '\n';
__blockLevel__--;
_str_main+=__indent() +'wend #@(main@124)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@125)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@126)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@127)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    instr,  ' + (BF_CBRACKET) + '' + '\n';
__context__.push('(main@128)');
_str_main+=if_equal(((isNaN(('instr')*1))?('instr'):(('instr')*1)),((isNaN(('' + (BF_CBRACKET) + '')*1))?('' + (BF_CBRACKET) + ''):(('' + (BF_CBRACKET) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    instr,  ' + (BF_CBRACKET) + '' + '\n';
_str_main+=__indent() +'#(begin macro)if_diff bfD,    0' + '\n';
__context__.push('(main@129)');
_str_main+=if_diff(((isNaN(('bfD')*1))?('bfD'):(('bfD')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_diff bfD,    0' + '\n';
_str_main+=__indent() +'push    1 #@(main@130)'+ __context() + '\n';
_str_main+=__indent() +'sbm     g2mobl # go to matching open bracket loop #@(main@131)'+ __context() + '\n';
_str_main+=__indent() +'while #@(main@132)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'arotr   bfCode    # go to previous bfCode #@(main@133)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(main@134)');
_str_main+=scope_begin();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_begin' + '\n';
_str_main+=__indent() +'#(begin macro)lvar    tmpBfCode,  bfCode # local variable in scope' + '\n';
__context__.push('(main@135)');
_str_main+=lvar(((isNaN(('tmpBfCode')*1))?('tmpBfCode'):(('tmpBfCode')*1)),((isNaN(('bfCode')*1))?('bfCode'):(('bfCode')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar    tmpBfCode,  bfCode # local variable in scope' + '\n';
_str_main+=__indent() +' #@(main@136)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    tmpBfCode,  ' + (BF_CBRACKET) + '' + '\n';
__context__.push('(main@137)');
_str_main+=if_equal(((isNaN(('tmpBfCode')*1))?('tmpBfCode'):(('tmpBfCode')*1)),((isNaN(('' + (BF_CBRACKET) + '')*1))?('' + (BF_CBRACKET) + ''):(('' + (BF_CBRACKET) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    tmpBfCode,  ' + (BF_CBRACKET) + '' + '\n';
_str_main+=__indent() +'#(begin macro)at_inc  countBracket' + '\n';
__context__.push('(main@138)');
_str_main+=at_inc(((isNaN(('countBracket')*1))?('countBracket'):(('countBracket')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_inc  countBracket' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else  # if current bfCode != \']\' #@(main@139)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)if_equal    tmpBfCode,  ' + (BF_OBRACKET) + '' + '\n';
__context__.push('(main@140)');
_str_main+=if_equal(((isNaN(('tmpBfCode')*1))?('tmpBfCode'):(('tmpBfCode')*1)),((isNaN(('' + (BF_OBRACKET) + '')*1))?('' + (BF_OBRACKET) + ''):(('' + (BF_OBRACKET) + '')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    tmpBfCode,  ' + (BF_OBRACKET) + '' + '\n';
_str_main+=__indent() +'#(begin macro)if_equal    countBracket,   0' + '\n';
__context__.push('(main@141)');
_str_main+=if_equal(((isNaN(('countBracket')*1))?('countBracket'):(('countBracket')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    countBracket,   0' + '\n';
_str_main+=__indent() +'arotr   bfCode #@(main@142)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)at_reset    g2mobl' + '\n';
__context__.push('(main@143)');
_str_main+=at_reset(((isNaN(('g2mobl')*1))?('g2mobl'):(('g2mobl')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_reset    g2mobl' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else # if count bracket > 0 then countBracket -- #@(main@144)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)at_dec  countBracket' + '\n';
__context__.push('(main@145)');
_str_main+=at_dec(((isNaN(('countBracket')*1))?('countBracket'):(('countBracket')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_dec  countBracket' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@146)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'else  # if current bfCode != \'[\' #@(main@147)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)if_equal    tmpBfCode,  0' + '\n';
__context__.push('(main@148)');
_str_main+=if_equal(((isNaN(('tmpBfCode')*1))?('tmpBfCode'):(('tmpBfCode')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal    tmpBfCode,  0' + '\n';
_str_main+=__indent() +'#(begin macro)at_reset    g2mobl' + '\n';
__context__.push('(main@149)');
_str_main+=at_reset(((isNaN(('g2mobl')*1))?('g2mobl'):(('g2mobl')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)at_reset    g2mobl' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@150)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@151)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@152)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(main@153)');
_str_main+=scope_end();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_end' + '\n';
__blockLevel__--;
_str_main+=__indent() +'wend #@(main@154)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@155)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@156)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(main@157)');
_str_main+=scope_end();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_end' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@158)'+ __context() + '\n';
_str_main+=__indent() +'arotl   bfCode #@(main@159)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@160)'+ __context() + '\n';
_str_main+=__indent() +'# destroy local variable #@(main@161)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(main@162)');
_str_main+=scope_end();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_end' + '\n';
__blockLevel__--;
_str_main+=__indent() +'wend #@(main@163)'+ __context() + '\n';
return _str_main;
}
_main();
