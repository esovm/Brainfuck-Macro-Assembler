var _main = function(){
var _str_main;
_str_main='';
_str_main+='#    ____  _____   _         ____  _____ ' + '\n';
_str_main+='#   | __ )|  ___| (_)_ __   | __ )|  ___|' + '\n';
_str_main+='#   |  _ \\| |_    | | \'_ \\  |  _ \\| |_   ' + '\n';
_str_main+='#   | |_) |  _|   | | | | | | |_) |  _|  ' + '\n';
_str_main+='#   |____/|_|     |_|_| |_| |____/|_|    ' + '\n';
_str_main+='#                                        ' + '\n';
_str_main+='# bf in bf : by using bf assembler language' + '\n';
var MAXCODE;MAXCODE='255';
var MIDCODE;MIDCODE='127';
var MAXDATA;MAXDATA='255';
var ENDOFCODE;ENDOFCODE='\'!\'';
var BF_INC;BF_INC='1';
var BF_DEC;BF_DEC='3';
var BF_LEFT;BF_LEFT='18';
var BF_RIGHT;BF_RIGHT='20';
var BF_IN;BF_IN='2';
var BF_OUT;BF_OUT='4';
var BF_OBRACKET;BF_OBRACKET='49';
var BF_CBRACKET;BF_CBRACKET='51';
_str_main+='' + '\n';
_str_main+='#(begin include)macro.inc' + '\n';
_str_main+='# Common macros' + '\n';
_str_main+='# scope variables' + '\n';
_str_main+='#(js) var __scope;' + '\n';
var __scope;
_str_main+='#(js) __scope=[0];' + '\n';
__scope=[0];
_str_main+='' + '\n';
_str_main+='# macro scope_begin : start a new scope for local variable (usage of macro lvar)' + '\n';
var scope_begin = function(){
var _strscope_begin;
_strscope_begin='';
_strscope_begin+='#(js) __scope.push(0);' + '\n';
__scope.push(0);
return _strscope_begin;
}
_str_main+='' + '\n';
_str_main+='# macro scope_end : end a scope , then drop scoped local variables (drop) (usage of lvar)' + '\n';
var scope_end = function(){
var _strscope_end;
_strscope_end='';
_strscope_end+='#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {' + '\n';
if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
_strscope_end+='    drop' + '\n';
_strscope_end+='#(js) } ' + '\n';
} 
_strscope_end+='#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);' + '\n';
if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
return _strscope_end;
}
_str_main+='' + '\n';
_str_main+='# macro lvar(vname,value) : declare  in scope, a local variable named vname with an assigned value (stored in stack)' + '\n';
var lvar = function(vname,value){
var _strlvar;
_strlvar='';
_strlvar+='    push ' + value + '' + '\n';
_strlvar+='    sbm ' + vname + '' + '\n';
_strlvar+='#(js) __scope[__scope.length-1]++; ' + '\n';
__scope[__scope.length-1]++; 
return _strlvar;
}
_str_main+='' + '\n';
_str_main+='# macro if_diff(a,b) : if (a != b) {' + '\n';
var if_diff = function(a,b){
var _strif_diff;
_strif_diff='';
_strif_diff+='    push ' + a + '' + '\n';
_strif_diff+='    push ' + b + '' + '\n';
_strif_diff+='    diff' + '\n';
_strif_diff+='    if' + '\n';
return _strif_diff;
}
_str_main+='' + '\n';
_str_main+='# macro if_equal(a,b) : if (a == b) {' + '\n';
var if_equal = function(a,b){
var _strif_equal;
_strif_equal='';
_strif_equal+='    push ' + a + '' + '\n';
_strif_equal+='    push ' + b + '' + '\n';
_strif_equal+='    equal' + '\n';
_strif_equal+='    if' + '\n';
return _strif_equal;
}
_str_main+='' + '\n';
_str_main+='# macro if_sup(a,b) : if (a > b) {' + '\n';
var if_sup = function(a,b){
var _strif_sup;
_strif_sup='';
_strif_sup+='    push ' + b + '' + '\n';
_strif_sup+='    push ' + a + '' + '\n';
_strif_sup+='    sup' + '\n';
_strif_sup+='    if' + '\n';
return _strif_sup;
}
_str_main+='' + '\n';
_str_main+='# macro if_inf(a,b) : if (a < b) {' + '\n';
var if_inf = function(a,b){
var _strif_inf;
_strif_inf='';
_strif_inf+='    push ' + b + '' + '\n';
_strif_inf+='    push ' + a + '' + '\n';
_strif_inf+='    inf' + '\n';
_strif_inf+='    if' + '\n';
return _strif_inf;
}
_str_main+='' + '\n';
_str_main+='# macro if_supequal(a,b) : if (a >= b) {' + '\n';
var if_inf = function(a,b){
var _strif_inf;
_strif_inf='';
_strif_inf+='    push ' + b + '' + '\n';
_strif_inf+='    push ' + a + '' + '\n';
_strif_inf+='    inf' + '\n';
_strif_inf+='    not' + '\n';
_strif_inf+='    if' + '\n';
return _strif_inf;
}
_str_main+='' + '\n';
_str_main+='# macro if_infequal(a,b) : if (a <= b) {' + '\n';
var if_inf = function(a,b){
var _strif_inf;
_strif_inf='';
_strif_inf+='    push ' + b + '' + '\n';
_strif_inf+='    push ' + a + '' + '\n';
_strif_inf+='    sup' + '\n';
_strif_inf+='    not' + '\n';
_strif_inf+='    if' + '\n';
return _strif_inf;
}
_str_main+='' + '\n';
_str_main+='# macro at_2' + '\n';
var at_2 = function(ope, a,b){
var _strat_2;
_strat_2='';
_strat_2+='    at ' + a + '' + '\n';
_strat_2+='    ' + ope + ' ' + b + '' + '\n';
_strat_2+='    ta' + '\n';
return _strat_2;
}
_str_main+='' + '\n';
_str_main+='# macro at_1' + '\n';
var at_1 = function(ope, a){
var _strat_1;
_strat_1='';
_strat_1+='#(begin macro)    at_2(ope,a,"")' + '\n';
_strat_1+=at_2(ope,a,"");
_strat_1+='#(end macro)    at_2(ope,a,"")' + '\n';
return _strat_1;
}
_str_main+='' + '\n';
_str_main+='# macro at_reset(a) : a=0' + '\n';
var at_reset = function(a){
var _strat_reset;
_strat_reset='';
_strat_reset+='#(begin macro)    at_1("reset",a)' + '\n';
_strat_reset+=at_1("reset",a);
_strat_reset+='#(end macro)    at_1("reset",a)' + '\n';
return _strat_reset;
}
_str_main+='' + '\n';
_str_main+='# macro at_inc(a) : a++' + '\n';
var at_inc = function(a){
var _strat_inc;
_strat_inc='';
_strat_inc+='#(begin macro)    at_1("inc",a)' + '\n';
_strat_inc+=at_1("inc",a);
_strat_inc+='#(end macro)    at_1("inc",a)' + '\n';
return _strat_inc;
}
_str_main+='' + '\n';
_str_main+='# macro at_dec(a) : a--' + '\n';
var at_dec = function(a){
var _strat_dec;
_strat_dec='';
_strat_dec+='#(begin macro)    at_1("dec",a)' + '\n';
_strat_dec+=at_1("dec",a);
_strat_dec+='#(end macro)    at_1("dec",a)' + '\n';
return _strat_dec;
}
_str_main+='' + '\n';
_str_main+='# macro at_in(a)  : a= readchar()' + '\n';
var at_in = function(a){
var _strat_in;
_strat_in='';
_strat_in+='#(begin macro)    at_1("in",a)' + '\n';
_strat_in+=at_1("in",a);
_strat_in+='#(end macro)    at_1("in",a)' + '\n';
return _strat_in;
}
_str_main+='' + '\n';
_str_main+='# macro at_out(a) : write(a)' + '\n';
var at_out = function(a){
var _strat_out;
_strat_out='';
_strat_out+='#(begin macro)    at_1("out",a)' + '\n';
_strat_out+=at_1("out",a);
_strat_out+='#(end macro)    at_1("out",a)' + '\n';
return _strat_out;
}
_str_main+='' + '\n';
_str_main+='# macro at_add(a,b) : a += b (immediate)' + '\n';
var at_add = function(a,b){
var _strat_add;
_strat_add='';
_strat_add+='#(begin macro)    at_2("add",a,b)' + '\n';
_strat_add+=at_2("add",a,b);
_strat_add+='#(end macro)    at_2("add",a,b)' + '\n';
return _strat_add;
}
_str_main+='' + '\n';
_str_main+='# macro at_sub(a,b) : a -= b (immediate)' + '\n';
var at_sub = function(a,b){
var _strat_sub;
_strat_sub='';
_strat_sub+='#(begin macro)    at_2("sub",a,b)' + '\n';
_strat_sub+=at_2("sub",a,b);
_strat_sub+='#(end macro)    at_2("sub",a,b)' + '\n';
return _strat_sub;
}
_str_main+='' + '\n';
_str_main+='# macro at_set(a,b) : a = b (immediate)' + '\n';
var at_set = function(a,b){
var _strat_set;
_strat_set='';
_strat_set+='#(begin macro)    at_2("set",a,b)' + '\n';
_strat_set+=at_2("set",a,b);
_strat_set+='#(end macro)    at_2("set",a,b)' + '\n';
return _strat_set;
}
_str_main+='' + '\n';
var left_rewind = function(array){
var _strleft_rewind;
_strleft_rewind='';
_strleft_rewind+='    push 1' + '\n';
_strleft_rewind+='    sbm __looprewind' + '\n';
_strleft_rewind+='    while' + '\n';
_strleft_rewind+='#(begin macro)        if_diff("' + array + '.pos",0)' + '\n';
_strleft_rewind+=if_diff("array.pos",0);
_strleft_rewind+='#(end macro)        if_diff("' + array + '.pos",0)' + '\n';
_strleft_rewind+='            arotl ' + array + '' + '\n';
_strleft_rewind+='        else' + '\n';
_strleft_rewind+='#(begin macro)            at_reset("__looprewind")' + '\n';
_strleft_rewind+=at_reset("__looprewind");
_strleft_rewind+='#(end macro)            at_reset("__looprewind")' + '\n';
_strleft_rewind+='        fi' + '\n';
_strleft_rewind+='    wend' + '\n';
return _strleft_rewind;
}
_str_main+='' + '\n';
var right_rewind = function(array){
var _strright_rewind;
_strright_rewind='';
_strright_rewind+='    push ' + array + '.pos' + '\n';
_strright_rewind+='    loop' + '\n';
_strright_rewind+='        arotr ' + array + '' + '\n';
_strright_rewind+='    endloop' + '\n';
return _strright_rewind;
}
_str_main+='#(end include)macro.inc' + '\n';
_str_main+='' + '\n';
_str_main+='# declare global variables' + '\n';
_str_main+='var bfData*' + MAXDATA + '' + '\n';
_str_main+='var bfCode*' + MAXCODE + '' + '\n';
_str_main+='' + '\n';
_str_main+='# read the BF code (stop when meet \'!\')' + '\n';
_str_main+='push 1              ' + '\n';
_str_main+='sbm loopCounter' + '\n';
_str_main+='while' + '\n';
_str_main+='#(begin macro)    scope_begin()' + '\n';
_str_main+=scope_begin();
_str_main+='#(end macro)    scope_begin()' + '\n';
_str_main+='#(begin macro)        lvar("readchar","in")' + '\n';
_str_main+=lvar("readchar","in");
_str_main+='#(end macro)        lvar("readchar","in")' + '\n';
_str_main+='#(begin macro)        if_diff("readchar",ENDOFCODE) ' + '\n';
_str_main+=if_diff("readchar",ENDOFCODE);
_str_main+='#(end macro)        if_diff("readchar",ENDOFCODE) ' + '\n';
_str_main+='            push readchar' + '\n';
_str_main+='            sub 42        # bf code - 42 , to have smaller value to compare during BF code interpretation' + '\n';
_str_main+='            pop bfCode' + '\n';
_str_main+='            arotl bfCode    # store readchar in bfCode' + '\n';
_str_main+='        else' + '\n';
_str_main+='#(begin macro)            at_reset("loopCounter")' + '\n';
_str_main+=at_reset("loopCounter");
_str_main+='#(end macro)            at_reset("loopCounter")' + '\n';
_str_main+='        fi' + '\n';
_str_main+='#(begin macro)    scope_end()' + '\n';
_str_main+=scope_end();
_str_main+='#(end macro)    scope_end()' + '\n';
_str_main+='wend # loop for each input bf code     ' + '\n';
_str_main+='' + '\n';
_str_main+='# rewind bfCode' + '\n';
_str_main+='#(begin macro)if_sup(MIDCODE,"bfCode.pos")   # reverse rot to zero' + '\n';
_str_main+=if_sup(MIDCODE,"bfCode.pos");
_str_main+='#(end macro)if_sup(MIDCODE,"bfCode.pos")   # reverse rot to zero' + '\n';
_str_main+='    push bfCode.pos' + '\n';
_str_main+='    loop' + '\n';
_str_main+='        arotr bfCode' + '\n';
_str_main+='    endloop' + '\n';
_str_main+='else # forward rot to zero' + '\n';
_str_main+='    push 0' + '\n';
_str_main+='    push bfCode.pos' + '\n';
_str_main+='    sub' + '\n';
_str_main+='    loop' + '\n';
_str_main+='        arotl bfCode' + '\n';
_str_main+='    endloop' + '\n';
_str_main+='fi' + '\n';
_str_main+='' + '\n';
_str_main+='' + '\n';
_str_main+='# interpret the BF code' + '\n';
_str_main+='push 1' + '\n';
_str_main+='sbm loopCounter2' + '\n';
_str_main+='while' + '\n';
_str_main+='#(begin macro)    scope_begin()' + '\n';
_str_main+=scope_begin();
_str_main+='#(end macro)    scope_begin()' + '\n';
_str_main+='        # local variables' + '\n';
_str_main+='#(begin macro)        lvar("bfD","bfData")' + '\n';
_str_main+=lvar("bfD","bfData");
_str_main+='#(end macro)        lvar("bfD","bfData")' + '\n';
_str_main+='#(begin macro)        lvar("instr","bfCode")' + '\n';
_str_main+=lvar("instr","bfCode");
_str_main+='#(end macro)        lvar("instr","bfCode")' + '\n';
_str_main+='        ' + '\n';
_str_main+='#(begin macro)        if_equal("instr",0)' + '\n';
_str_main+=if_equal("instr",0);
_str_main+='#(end macro)        if_equal("instr",0)' + '\n';
_str_main+='#(begin macro)            at_reset("loopCounter2")' + '\n';
_str_main+=at_reset("loopCounter2");
_str_main+='#(end macro)            at_reset("loopCounter2")' + '\n';
_str_main+='        else ' + '\n';
_str_main+='#(begin macro)            if_equal("instr",BF_INC)' + '\n';
_str_main+=if_equal("instr",BF_INC);
_str_main+='#(end macro)            if_equal("instr",BF_INC)' + '\n';
_str_main+='#(begin macro)                at_inc("bfData") ' + '\n';
_str_main+=at_inc("bfData");
_str_main+='#(end macro)                at_inc("bfData") ' + '\n';
_str_main+='            fi' + '\n';
_str_main+='    ' + '\n';
_str_main+='#(begin macro)            if_equal("instr",BF_DEC)' + '\n';
_str_main+=if_equal("instr",BF_DEC);
_str_main+='#(end macro)            if_equal("instr",BF_DEC)' + '\n';
_str_main+='#(begin macro)                at_dec("bfData")' + '\n';
_str_main+=at_dec("bfData");
_str_main+='#(end macro)                at_dec("bfData")' + '\n';
_str_main+='            fi' + '\n';
_str_main+='    ' + '\n';
_str_main+='#(begin macro)            if_equal("instr",BF_OUT)' + '\n';
_str_main+=if_equal("instr",BF_OUT);
_str_main+='#(end macro)            if_equal("instr",BF_OUT)' + '\n';
_str_main+='#(begin macro)                at_out("bfData")' + '\n';
_str_main+=at_out("bfData");
_str_main+='#(end macro)                at_out("bfData")' + '\n';
_str_main+='            fi' + '\n';
_str_main+='    ' + '\n';
_str_main+='#(begin macro)            if_equal("instr",BF_IN)' + '\n';
_str_main+=if_equal("instr",BF_IN);
_str_main+='#(end macro)            if_equal("instr",BF_IN)' + '\n';
_str_main+='#(begin macro)                at_in("bfData") ' + '\n';
_str_main+=at_in("bfData");
_str_main+='#(end macro)                at_in("bfData") ' + '\n';
_str_main+='            fi' + '\n';
_str_main+='    ' + '\n';
_str_main+='#(begin macro)            if_equal("instr",BF_LEFT) ' + '\n';
_str_main+=if_equal("instr",BF_LEFT);
_str_main+='#(end macro)            if_equal("instr",BF_LEFT) ' + '\n';
_str_main+='                arotl bfData' + '\n';
_str_main+='            fi' + '\n';
_str_main+='    ' + '\n';
_str_main+='#(begin macro)            if_equal("instr",BF_RIGHT) ' + '\n';
_str_main+=if_equal("instr",BF_RIGHT);
_str_main+='#(end macro)            if_equal("instr",BF_RIGHT) ' + '\n';
_str_main+='                arotr bfData' + '\n';
_str_main+='            fi' + '\n';
_str_main+='            ' + '\n';
_str_main+='#(begin macro)            scope_begin()' + '\n';
_str_main+=scope_begin();
_str_main+='#(end macro)            scope_begin()' + '\n';
_str_main+='#(begin macro)                lvar("countBracket",0)' + '\n';
_str_main+=lvar("countBracket",0);
_str_main+='#(end macro)                lvar("countBracket",0)' + '\n';
_str_main+='                ' + '\n';
_str_main+='#(begin macro)                if_equal("instr",BF_OBRACKET) ' + '\n';
_str_main+=if_equal("instr",BF_OBRACKET);
_str_main+='#(end macro)                if_equal("instr",BF_OBRACKET) ' + '\n';
_str_main+='#(begin macro)                    if_equal("bfD",0)      # if data is zero go to matching \']\'' + '\n';
_str_main+=if_equal("bfD",0);
_str_main+='#(end macro)                    if_equal("bfD",0)      # if data is zero go to matching \']\'' + '\n';
_str_main+='                        push 1' + '\n';
_str_main+='                        sbm g2mcbl # Go To Matching Closing Bracket Loop' + '\n';
_str_main+='                        while' + '\n';
_str_main+='                            arotl   bfCode   # go to next bfCode' + '\n';
_str_main+='#(begin macro)                            scope_begin()' + '\n';
_str_main+=scope_begin();
_str_main+='#(end macro)                            scope_begin()' + '\n';
_str_main+='#(begin macro)                                lvar("tmpBfCode","bfCode") # local variable in scope' + '\n';
_str_main+=lvar("tmpBfCode","bfCode");
_str_main+='#(end macro)                                lvar("tmpBfCode","bfCode") # local variable in scope' + '\n';
_str_main+='                                ' + '\n';
_str_main+='#(begin macro)                                if_equal("tmpBfCode",BF_OBRACKET)' + '\n';
_str_main+=if_equal("tmpBfCode",BF_OBRACKET);
_str_main+='#(end macro)                                if_equal("tmpBfCode",BF_OBRACKET)' + '\n';
_str_main+='#(begin macro)                                    at_inc("countBracket")' + '\n';
_str_main+=at_inc("countBracket");
_str_main+='#(end macro)                                    at_inc("countBracket")' + '\n';
_str_main+='                                else       # if current bfCode != \'[\'' + '\n';
_str_main+='#(begin macro)                                    if_equal("tmpBfCode",BF_CBRACKET)' + '\n';
_str_main+=if_equal("tmpBfCode",BF_CBRACKET);
_str_main+='#(end macro)                                    if_equal("tmpBfCode",BF_CBRACKET)' + '\n';
_str_main+='#(begin macro)                                        if_equal("countBracket",0)' + '\n';
_str_main+=if_equal("countBracket",0);
_str_main+='#(end macro)                                        if_equal("countBracket",0)' + '\n';
_str_main+='#(begin macro)                                            at_reset("g2mcbl")' + '\n';
_str_main+=at_reset("g2mcbl");
_str_main+='#(end macro)                                            at_reset("g2mcbl")' + '\n';
_str_main+='                                        else # if countBracket >0 then countBracket--' + '\n';
_str_main+='#(begin macro)                                            at_dec("countBracket")' + '\n';
_str_main+=at_dec("countBracket");
_str_main+='#(end macro)                                            at_dec("countBracket")' + '\n';
_str_main+='                                        fi' + '\n';
_str_main+='                                    else   # if current bfCode != \']\'' + '\n';
_str_main+='#(begin macro)                                        if_equal("tmpBfCode",0)' + '\n';
_str_main+=if_equal("tmpBfCode",0);
_str_main+='#(end macro)                                        if_equal("tmpBfCode",0)' + '\n';
_str_main+='#(begin macro)                                            at_reset("g2mcbl")' + '\n';
_str_main+=at_reset("g2mcbl");
_str_main+='#(end macro)                                            at_reset("g2mcbl")' + '\n';
_str_main+='                                        fi                       ' + '\n';
_str_main+='                                    fi' + '\n';
_str_main+='                                fi' + '\n';
_str_main+='#(begin macro)                            scope_end()' + '\n';
_str_main+=scope_end();
_str_main+='#(end macro)                            scope_end()' + '\n';
_str_main+='                        wend' + '\n';
_str_main+='                    fi' + '\n';
_str_main+='                fi' + '\n';
_str_main+='                ' + '\n';
_str_main+='#(begin macro)                if_equal("instr",BF_CBRACKET)  ' + '\n';
_str_main+=if_equal("instr",BF_CBRACKET);
_str_main+='#(end macro)                if_equal("instr",BF_CBRACKET)  ' + '\n';
_str_main+='#(begin macro)                    if_diff("bfD",0) ' + '\n';
_str_main+=if_diff("bfD",0);
_str_main+='#(end macro)                    if_diff("bfD",0) ' + '\n';
_str_main+='                        push 1' + '\n';
_str_main+='                        sbm g2mobl # go to matching open bracket loop' + '\n';
_str_main+='                        while' + '\n';
_str_main+='                            arotr bfCode    # go to previous bfCode' + '\n';
_str_main+='#(begin macro)                            scope_begin()' + '\n';
_str_main+=scope_begin();
_str_main+='#(end macro)                            scope_begin()' + '\n';
_str_main+='#(begin macro)                                lvar("tmpBfCode","bfCode") # local variable in scope' + '\n';
_str_main+=lvar("tmpBfCode","bfCode");
_str_main+='#(end macro)                                lvar("tmpBfCode","bfCode") # local variable in scope' + '\n';
_str_main+='                                ' + '\n';
_str_main+='#(begin macro)                                if_equal("tmpBfCode",BF_CBRACKET)' + '\n';
_str_main+=if_equal("tmpBfCode",BF_CBRACKET);
_str_main+='#(end macro)                                if_equal("tmpBfCode",BF_CBRACKET)' + '\n';
_str_main+='#(begin macro)                                    at_inc("countBracket")' + '\n';
_str_main+=at_inc("countBracket");
_str_main+='#(end macro)                                    at_inc("countBracket")' + '\n';
_str_main+='                                else  # if current bfCode != \']\'' + '\n';
_str_main+='#(begin macro)                                    if_equal("tmpBfCode",BF_OBRACKET) ' + '\n';
_str_main+=if_equal("tmpBfCode",BF_OBRACKET);
_str_main+='#(end macro)                                    if_equal("tmpBfCode",BF_OBRACKET) ' + '\n';
_str_main+='#(begin macro)                                        if_equal("countBracket",0)' + '\n';
_str_main+=if_equal("countBracket",0);
_str_main+='#(end macro)                                        if_equal("countBracket",0)' + '\n';
_str_main+='                                            arotr bfCode' + '\n';
_str_main+='#(begin macro)                                            at_reset("g2mobl")' + '\n';
_str_main+=at_reset("g2mobl");
_str_main+='#(end macro)                                            at_reset("g2mobl")' + '\n';
_str_main+='                                        else # if count bracket > 0 then countBracket --' + '\n';
_str_main+='#(begin macro)                                            at_dec("countBracket")' + '\n';
_str_main+=at_dec("countBracket");
_str_main+='#(end macro)                                            at_dec("countBracket")' + '\n';
_str_main+='                                        fi ' + '\n';
_str_main+='                                    else  # if current bfCode != \'[\'' + '\n';
_str_main+='#(begin macro)                                        if_equal("tmpBfCode",0)' + '\n';
_str_main+=if_equal("tmpBfCode",0);
_str_main+='#(end macro)                                        if_equal("tmpBfCode",0)' + '\n';
_str_main+='#(begin macro)                                            at_reset("g2mobl")' + '\n';
_str_main+=at_reset("g2mobl");
_str_main+='#(end macro)                                            at_reset("g2mobl")' + '\n';
_str_main+='                                        fi' + '\n';
_str_main+='                                    fi' + '\n';
_str_main+='                                fi' + '\n';
_str_main+='#(begin macro)                            scope_end()' + '\n';
_str_main+=scope_end();
_str_main+='#(end macro)                            scope_end()' + '\n';
_str_main+='                        wend' + '\n';
_str_main+='                    fi' + '\n';
_str_main+='                fi' + '\n';
_str_main+='#(begin macro)            scope_end()' + '\n';
_str_main+=scope_end();
_str_main+='#(end macro)            scope_end()' + '\n';
_str_main+='        fi' + '\n';
_str_main+='        arotl   bfCode ' + '\n';
_str_main+='        ' + '\n';
_str_main+='    # destroy local variable' + '\n';
_str_main+='#(begin macro)    scope_end()' + '\n';
_str_main+=scope_end();
_str_main+='#(end macro)    scope_end()' + '\n';
_str_main+='wend' + '\n';
return _str_main;
}
_main();
