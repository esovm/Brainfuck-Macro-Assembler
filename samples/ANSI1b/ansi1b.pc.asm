# ANSI code example #@(main@1)
# This example works well under Linux #@(main@2)
# Under Windows 'cmd.exe' alike processes, it doesn't word #@(main@3)
#  it may be possible, have a look at  https://web.liferay.com/it/web/igor.spasic/blog/-/blogs/enable-ansi-colors-in-windows-command-prompt #@(main@4)
 #@(main@5)
#(begin include)../include/macro.inc
# Common macros #@(macro_inc@1)
# scope variables #@(macro_inc@2)
 #@(macro_inc@5)
 #@(macro_inc@6)
# macro scope_begin : start a new scope for local variable (usage of macro lvar) #@(macro_inc@7)
 #@(macro_inc@11)
# macro scope_end : end a scope , then drop scoped local variables (drop) (usage of lvar) #@(macro_inc@12)
 #@(macro_inc@19)
# macro lvar(vname,value) : declare  in scope, a local variable named vname with an assigned value (stored in stack) #@(macro_inc@20)
 #@(macro_inc@26)
# macro if_diff(a,b) : if (a != b) { #@(macro_inc@27)
 #@(macro_inc@34)
# macro if_equal(a,b) : if (a == b) { #@(macro_inc@35)
 #@(macro_inc@42)
# macro if_sup(a,b) : if (a > b) { #@(macro_inc@43)
 #@(macro_inc@50)
# macro if_inf(a,b) : if (a < b) { #@(macro_inc@51)
 #@(macro_inc@58)
# macro if_supequal(a,b) : if (a >= b) { #@(macro_inc@59)
 #@(macro_inc@67)
# macro if_infequal(a,b) : if (a <= b) { #@(macro_inc@68)
 #@(macro_inc@76)
# macro at_2 #@(macro_inc@77)
 #@(macro_inc@83)
# macro at_1 #@(macro_inc@84)
 #@(macro_inc@88)
# macro at_reset(a) : a=0 #@(macro_inc@89)
 #@(macro_inc@93)
# macro at_inc(a) : a++ #@(macro_inc@94)
 #@(macro_inc@98)
# macro at_dec(a) : a-- #@(macro_inc@99)
 #@(macro_inc@103)
# macro at_in(a)  : a= readchar() #@(macro_inc@104)
 #@(macro_inc@108)
# macro at_out(a) : write(a) #@(macro_inc@109)
 #@(macro_inc@113)
# macro at_add(a,b) : a += b (immediate) #@(macro_inc@114)
 #@(macro_inc@118)
# macro at_sub(a,b) : a -= b (immediate) #@(macro_inc@119)
 #@(macro_inc@123)
# macro at_set(a,b) : a = b (immediate) #@(macro_inc@124)
 #@(macro_inc@128)
 #@(macro_inc@133)
 #@(macro_inc@141)
#macro addof() : push A, push B , replaced by Carry, A+B #@(macro_inc@142)
 #@(macro_inc@180)
# macro subof() : push A, push B , replaced by Carry, A-B #@(macro_inc@181)
 #@(macro_inc@221)
# macro mulof() : A = stack-1, B= stack : stack-1 = A*B div 256, stack = A*B mod 256 #@(macro_inc@222)
 #@(macro_inc@245)
 #@(macro_inc@246)
 #@(macro_inc@258)
 #@(macro_inc@265)
# macro popouthexa() : from head of stack value (from 0 to 15) write out hexa (from 0 to 9 and A to F) #@(macro_inc@266)
 #@(macro_inc@276)
# macro popout8hexa() : from head of stack the 8 bit value is write out in hexa #@(macro_inc@277)
 #@(macro_inc@284)
 #@(macro_inc@290)
 #@(macro_inc@291)
var __wbdoutput*3 #@(macro_inc@293)
 #@(macro_inc@294)
# a Byte in stack : output its decimal value #@(macro_inc@295)
 #@(macro_inc@326)
 #@(macro_inc@327)
 #@(macro_inc@328)
# macro print(aString) : print out a string #@(macro_inc@329)
#(end include)../include/macro.inc
#(begin include)../include/ansi.inc
# based on https://en.wikipedia.org/wiki/ANSI_escape_code #@(ansi_inc@1)
# macro to help to place ANSI code to output #@(ansi_inc@2)
 #@(ansi_inc@3)
####################### #@(ansi_inc@4)
# ANSI Escape sequences #@(ansi_inc@5)
####################### #@(ansi_inc@6)
 #@(ansi_inc@7)
 #@(ansi_inc@12)
## Single Shift Two #@(ansi_inc@13)
 #@(ansi_inc@17)
##  Single Shift Three #@(ansi_inc@18)
 #@(ansi_inc@22)
## Device Control String #@(ansi_inc@23)
 #@(ansi_inc@27)
## Control Sequence Introducer #@(ansi_inc@28)
 #@(ansi_inc@32)
##  String Terminator #@(ansi_inc@33)
 #@(ansi_inc@37)
## Operating System Command #@(ansi_inc@38)
 #@(ansi_inc@42)
## Start of String #@(ansi_inc@43)
 #@(ansi_inc@47)
## Privacy Message #@(ansi_inc@48)
 #@(ansi_inc@52)
##  Application Program Command #@(ansi_inc@53)
 #@(ansi_inc@57)
## Reset to Initial State #@(ansi_inc@58)
 #@(ansi_inc@62)
#################### #@(ansi_inc@63)
# ANSI CSI sequences #@(ansi_inc@64)
#################### #@(ansi_inc@65)
 #@(ansi_inc@66)
## Cursor Up #@(ansi_inc@67)
 #@(ansi_inc@74)
## Cursor Down #@(ansi_inc@75)
 #@(ansi_inc@82)
## Cursor Forward #@(ansi_inc@83)
 #@(ansi_inc@90)
## Cursor Back #@(ansi_inc@91)
 #@(ansi_inc@98)
## Cursor Next Line #@(ansi_inc@99)
 #@(ansi_inc@106)
## Cursor Previous Line #@(ansi_inc@107)
 #@(ansi_inc@114)
## Cursor Horizontal Absolute #@(ansi_inc@115)
 #@(ansi_inc@122)
## Cursor Position #@(ansi_inc@123)
 #@(ansi_inc@133)
## Erase Display #@(ansi_inc@134)
## 0 : from cursor up to end of screen #@(ansi_inc@135)
## 1 : from cursor up to begin of screen #@(ansi_inc@136)
## 2 : clear all screen : keep back buffer #@(ansi_inc@137)
## 3 : clear all screen , erase back buffer #@(ansi_inc@138)
 #@(ansi_inc@145)
## Erase in Line, to cursor position change #@(ansi_inc@146)
## 0 : clear from cursor to end of line #@(ansi_inc@147)
## 1 : clear from cursor to begin of line #@(ansi_inc@148)
## 2 : clear all line #@(ansi_inc@149)
 #@(ansi_inc@156)
##  Scroll Up #@(ansi_inc@157)
 #@(ansi_inc@164)
## Scroll Down #@(ansi_inc@165)
 #@(ansi_inc@172)
## same as ansi_CUP : Cursor Position #@(ansi_inc@173)
 #@(ansi_inc@183)
## Select Graphic Endition #@(ansi_inc@184)
 #@(ansi_inc@191)
## Select Graphic Rendition with 2 parameters #@(ansi_inc@192)
 #@(ansi_inc@205)
## Select Graphic Rendition with 4 parameters #@(ansi_inc@206)
 #@(ansi_inc@225)
## AUX Port On #@(ansi_inc@226)
 #@(ansi_inc@231)
## AUX Port On #@(ansi_inc@232)
 #@(ansi_inc@237)
## Device Status Report #@(ansi_inc@238)
 #@(ansi_inc@243)
## Save Cursor Position #@(ansi_inc@244)
 #@(ansi_inc@249)
## Restore Cursor Position #@(ansi_inc@250)
 #@(ansi_inc@255)
## show cursor #@(ansi_inc@256)
 #@(ansi_inc@261)
## hide cursor #@(ansi_inc@262)
 #@(ansi_inc@267)
## enable alternate screen buffer #@(ansi_inc@268)
 #@(ansi_inc@273)
## disable alternate screen buffer #@(ansi_inc@274)
 #@(ansi_inc@279)
## Turn on bracketed paste mode #@(ansi_inc@280)
 #@(ansi_inc@285)
## Turn off bracketed paste mode #@(ansi_inc@286)
 #@(ansi_inc@291)
##################################### #@(ansi_inc@292)
# ANSI SGR (Select Graphic Rendition) #@(ansi_inc@293)
##################################### #@(ansi_inc@294)
 #@(ansi_inc@295)
## Reset / Normal #@(ansi_inc@296)
 #@(ansi_inc@300)
## Bold or increased intensity #@(ansi_inc@301)
 #@(ansi_inc@305)
## Faint (decreased intensity) #@(ansi_inc@306)
 #@(ansi_inc@310)
## Italic #@(ansi_inc@311)
 #@(ansi_inc@315)
## Underline #@(ansi_inc@316)
 #@(ansi_inc@320)
## Slow Blink #@(ansi_inc@321)
 #@(ansi_inc@325)
## Rapid Blink #@(ansi_inc@326)
 #@(ansi_inc@330)
## Reverse Video #@(ansi_inc@331)
 #@(ansi_inc@335)
## Conceal #@(ansi_inc@336)
 #@(ansi_inc@340)
## Crossed-out #@(ansi_inc@341)
 #@(ansi_inc@345)
## primary font #@(ansi_inc@346)
 #@(ansi_inc@350)
## alternate font (1 to 9) , 0 same as primary #@(ansi_inc@351)
 #@(ansi_inc@359)
## Fraktur #@(ansi_inc@360)
 #@(ansi_inc@364)
## Bold off or Double Underline #@(ansi_inc@365)
 #@(ansi_inc@369)
## Normal color or intensity (neither bold nor faint) #@(ansi_inc@370)
 #@(ansi_inc@374)
## Not italic nor fraktur #@(ansi_inc@375)
 #@(ansi_inc@379)
## Underline off #@(ansi_inc@380)
 #@(ansi_inc@384)
## blink off #@(ansi_inc@385)
 #@(ansi_inc@389)
## Inverse off #@(ansi_inc@390)
 #@(ansi_inc@394)
## Reveal / conceal off #@(ansi_inc@395)
 #@(ansi_inc@399)
## Not cross-out #@(ansi_inc@400)
 #@(ansi_inc@404)
## Set foreground color 0 to 7 #@(ansi_inc@405)
 #@(ansi_inc@413)
## set foreground color , palette on 256 colors #@(ansi_inc@414)
 #@(ansi_inc@418)
## set foreground color, RGB 24 bits (3* 256 colors, RGB) #@(ansi_inc@419)
 #@(ansi_inc@423)
## set default foreground color #@(ansi_inc@424)
 #@(ansi_inc@428)
## Set background color 0 to 7 #@(ansi_inc@429)
 #@(ansi_inc@437)
## set background color , palette on 256 colors #@(ansi_inc@438)
 #@(ansi_inc@442)
## set background color, RGB 24 bits (3* 256 colors, RGB) #@(ansi_inc@443)
 #@(ansi_inc@447)
## set default background color #@(ansi_inc@448)
 #@(ansi_inc@452)
## Framed #@(ansi_inc@453)
 #@(ansi_inc@457)
## Encircled #@(ansi_inc@458)
 #@(ansi_inc@462)
## Overlined #@(ansi_inc@463)
 #@(ansi_inc@467)
## Not framed or encirlced #@(ansi_inc@468)
 #@(ansi_inc@475)
## Not overlined #@(ansi_inc@476)
 #@(ansi_inc@480)
## Foreground Black #@(ansi_inc@481)
 #@(ansi_inc@485)
## Foreground Red #@(ansi_inc@486)
 #@(ansi_inc@490)
## Foreground Green #@(ansi_inc@491)
 #@(ansi_inc@495)
## Foreground Yellow #@(ansi_inc@496)
 #@(ansi_inc@500)
## Foreground Blue #@(ansi_inc@501)
 #@(ansi_inc@505)
## Foreground Magenta #@(ansi_inc@506)
 #@(ansi_inc@510)
## Foreground Cyan #@(ansi_inc@511)
 #@(ansi_inc@515)
## Foreground White #@(ansi_inc@516)
 #@(ansi_inc@520)
## Background Black #@(ansi_inc@521)
 #@(ansi_inc@525)
## Background Red #@(ansi_inc@526)
 #@(ansi_inc@530)
## Background Green #@(ansi_inc@531)
 #@(ansi_inc@535)
## Background Yellow #@(ansi_inc@536)
 #@(ansi_inc@540)
## Background Blue #@(ansi_inc@541)
 #@(ansi_inc@545)
## Background Magenta #@(ansi_inc@546)
 #@(ansi_inc@550)
## Background Cyan #@(ansi_inc@551)
 #@(ansi_inc@555)
## Background White #@(ansi_inc@556)
 #@(ansi_inc@560)
 #@(ansi_inc@561)
 #@(ansi_inc@562)
 #@(ansi_inc@563)
 #@(ansi_inc@564)
 #@(ansi_inc@565)
 #@(ansi_inc@566)
 #@(ansi_inc@567)
 #@(ansi_inc@568)
#(end include)../include/ansi.inc
 #@(main@8)
# clear screen #@(main@9)
#(begin macro)ansi_ED  2
#(begin macro)ansi_CSI
#(begin macro)ansi_esc    [
#(begin macro)print("\x1b")
push    0 #@(macro_inc@331)(ansi_inc@9)(ansi_inc@30)(ansi_inc@140)(main@10)
set     27 #@(macro_inc@346)(ansi_inc@9)(ansi_inc@30)(ansi_inc@140)(main@10)
out             #  #@(macro_inc@348)(ansi_inc@9)(ansi_inc@30)(ansi_inc@140)(main@10)
drop #@(macro_inc@351)(ansi_inc@9)(ansi_inc@30)(ansi_inc@140)(main@10)
#(end macro)print("\x1b")
#(begin macro)print(cmd)
push    0 #@(macro_inc@331)(ansi_inc@10)(ansi_inc@30)(ansi_inc@140)(main@10)
set     91 #@(macro_inc@346)(ansi_inc@10)(ansi_inc@30)(ansi_inc@140)(main@10)
out             # '[' #@(macro_inc@348)(ansi_inc@10)(ansi_inc@30)(ansi_inc@140)(main@10)
drop #@(macro_inc@351)(ansi_inc@10)(ansi_inc@30)(ansi_inc@140)(main@10)
#(end macro)print(cmd)
#(end macro)ansi_esc    [
#(end macro)ansi_CSI
push    2 #@(ansi_inc@141)(main@10)
#(begin macro)writeByteDecimal
sbm _wbdinput1 #@(macro_inc@297)(ansi_inc@142)(main@10)
push 3 #@(macro_inc@298)(ansi_inc@142)(main@10)
loop #@(macro_inc@299)(ansi_inc@142)(main@10)
  # output = input mod 10 ; input = input div 10 #@(macro_inc@300)(ansi_inc@142)(main@10)
  #(begin macro)divide  _wbdinput1,  10, _wbdinput1,  __wbdoutput
  push    _wbdinput1 #@(macro_inc@135)(macro_inc@301)(ansi_inc@142)(main@10)
  push    10 #@(macro_inc@136)(macro_inc@301)(ansi_inc@142)(main@10)
  div #@(macro_inc@137)(macro_inc@301)(ansi_inc@142)(main@10)
  pop     _wbdinput1 #@(macro_inc@138)(macro_inc@301)(ansi_inc@142)(main@10)
  pop     __wbdoutput #@(macro_inc@139)(macro_inc@301)(ansi_inc@142)(main@10)
  #(end macro)divide  _wbdinput1,  10, _wbdinput1,  __wbdoutput
  arotl __wbdoutput #@(macro_inc@302)(ansi_inc@142)(main@10)
endloop #@(macro_inc@303)(ansi_inc@142)(main@10)
#(begin macro)scope_begin
#(end macro)scope_begin
#(begin macro)lvar    prefixzero1, 1
push    1 #@(macro_inc@22)(macro_inc@305)(ansi_inc@142)(main@10)
sbm     prefixzero1 #@(macro_inc@23)(macro_inc@305)(ansi_inc@142)(main@10)
#(end macro)lvar    prefixzero1, 1
push    3 #@(macro_inc@306)(ansi_inc@142)(main@10)
sbm     __wbdcnt1 #@(macro_inc@307)(ansi_inc@142)(main@10)
loop #@(macro_inc@308)(ansi_inc@142)(main@10)
  arotr   __wbdoutput #@(macro_inc@309)(ansi_inc@142)(main@10)
  #(begin macro)if_sup   __wbdcnt1,    1   # cnt == 3 or cnt == 2
  push    __wbdcnt1 #@(macro_inc@45)(macro_inc@310)(ansi_inc@142)(main@10)
  push    1 #@(macro_inc@46)(macro_inc@310)(ansi_inc@142)(main@10)
  sup #@(macro_inc@47)(macro_inc@310)(ansi_inc@142)(main@10)
  if #@(macro_inc@48)(macro_inc@310)(ansi_inc@142)(main@10)
    #(end macro)if_sup   __wbdcnt1,    1   # cnt == 3 or cnt == 2
    #(begin macro)if_diff __wbdoutput, 0
    push    __wbdoutput #@(macro_inc@29)(macro_inc@311)(ansi_inc@142)(main@10)
    push    0 #@(macro_inc@30)(macro_inc@311)(ansi_inc@142)(main@10)
    diff #@(macro_inc@31)(macro_inc@311)(ansi_inc@142)(main@10)
    if #@(macro_inc@32)(macro_inc@311)(ansi_inc@142)(main@10)
      #(end macro)if_diff __wbdoutput, 0
      #(begin macro)writeDigit  __wbdoutput
      push    __wbdoutput #@(macro_inc@286)(macro_inc@312)(ansi_inc@142)(main@10)
      add     '0' #@(macro_inc@287)(macro_inc@312)(ansi_inc@142)(main@10)
      pop     out #@(macro_inc@288)(macro_inc@312)(ansi_inc@142)(main@10)
      #(end macro)writeDigit  __wbdoutput
      #(begin macro)at_set  prefixzero1, 0
      #(begin macro)at_2("set",a,b)
      at      prefixzero1 #@(macro_inc@79)(macro_inc@126)(macro_inc@313)(ansi_inc@142)(main@10)
        set   0 #@(macro_inc@80)(macro_inc@126)(macro_inc@313)(ansi_inc@142)(main@10)
      ta #@(macro_inc@81)(macro_inc@126)(macro_inc@313)(ansi_inc@142)(main@10)
      #(end macro)at_2("set",a,b)
      #(end macro)at_set  prefixzero1, 0
    else #@(macro_inc@314)(ansi_inc@142)(main@10)
      #(begin macro)if_equal    prefixzero1, 0
      push    prefixzero1 #@(macro_inc@37)(macro_inc@315)(ansi_inc@142)(main@10)
      push    0 #@(macro_inc@38)(macro_inc@315)(ansi_inc@142)(main@10)
      equal #@(macro_inc@39)(macro_inc@315)(ansi_inc@142)(main@10)
      if #@(macro_inc@40)(macro_inc@315)(ansi_inc@142)(main@10)
        #(end macro)if_equal    prefixzero1, 0
        #(begin macro)writeDigit  __wbdoutput
        push    __wbdoutput #@(macro_inc@286)(macro_inc@316)(ansi_inc@142)(main@10)
        add     '0' #@(macro_inc@287)(macro_inc@316)(ansi_inc@142)(main@10)
        pop     out #@(macro_inc@288)(macro_inc@316)(ansi_inc@142)(main@10)
        #(end macro)writeDigit  __wbdoutput
      fi #@(macro_inc@317)(ansi_inc@142)(main@10)
    fi #@(macro_inc@318)(ansi_inc@142)(main@10)
  else #@(macro_inc@319)(ansi_inc@142)(main@10)
    #(begin macro)writeDigit  __wbdoutput
    push    __wbdoutput #@(macro_inc@286)(macro_inc@320)(ansi_inc@142)(main@10)
    add     '0' #@(macro_inc@287)(macro_inc@320)(ansi_inc@142)(main@10)
    pop     out #@(macro_inc@288)(macro_inc@320)(ansi_inc@142)(main@10)
    #(end macro)writeDigit  __wbdoutput
  fi #@(macro_inc@321)(ansi_inc@142)(main@10)
endloop #@(macro_inc@322)(ansi_inc@142)(main@10)
#(begin macro)scope_end
drop #@(macro_inc@15)(macro_inc@323)(ansi_inc@142)(main@10)
#(end macro)scope_end
drop    # remove push #@(macro_inc@324)(ansi_inc@142)(main@10)
#(end macro)writeByteDecimal
#(begin macro)print   J
push    0 #@(macro_inc@331)(ansi_inc@143)(main@10)
set     74 #@(macro_inc@346)(ansi_inc@143)(main@10)
out             # 'J' #@(macro_inc@348)(ansi_inc@143)(main@10)
drop #@(macro_inc@351)(ansi_inc@143)(main@10)
#(end macro)print   J
#(end macro)ansi_ED  2
# cursor position to 1 1 #@(main@11)
#(begin macro)ansi_CUP 1,  1
#(begin macro)ansi_CSI
#(begin macro)ansi_esc    [
#(begin macro)print("\x1b")
push    0 #@(macro_inc@331)(ansi_inc@9)(ansi_inc@30)(ansi_inc@125)(main@12)
set     27 #@(macro_inc@346)(ansi_inc@9)(ansi_inc@30)(ansi_inc@125)(main@12)
out             #  #@(macro_inc@348)(ansi_inc@9)(ansi_inc@30)(ansi_inc@125)(main@12)
drop #@(macro_inc@351)(ansi_inc@9)(ansi_inc@30)(ansi_inc@125)(main@12)
#(end macro)print("\x1b")
#(begin macro)print(cmd)
push    0 #@(macro_inc@331)(ansi_inc@10)(ansi_inc@30)(ansi_inc@125)(main@12)
set     91 #@(macro_inc@346)(ansi_inc@10)(ansi_inc@30)(ansi_inc@125)(main@12)
out             # '[' #@(macro_inc@348)(ansi_inc@10)(ansi_inc@30)(ansi_inc@125)(main@12)
drop #@(macro_inc@351)(ansi_inc@10)(ansi_inc@30)(ansi_inc@125)(main@12)
#(end macro)print(cmd)
#(end macro)ansi_esc    [
#(end macro)ansi_CSI
push    1 #@(ansi_inc@126)(main@12)
#(begin macro)writeByteDecimal
sbm _wbdinput2 #@(macro_inc@297)(ansi_inc@127)(main@12)
push 3 #@(macro_inc@298)(ansi_inc@127)(main@12)
loop #@(macro_inc@299)(ansi_inc@127)(main@12)
  # output = input mod 10 ; input = input div 10 #@(macro_inc@300)(ansi_inc@127)(main@12)
  #(begin macro)divide  _wbdinput2,  10, _wbdinput2,  __wbdoutput
  push    _wbdinput2 #@(macro_inc@135)(macro_inc@301)(ansi_inc@127)(main@12)
  push    10 #@(macro_inc@136)(macro_inc@301)(ansi_inc@127)(main@12)
  div #@(macro_inc@137)(macro_inc@301)(ansi_inc@127)(main@12)
  pop     _wbdinput2 #@(macro_inc@138)(macro_inc@301)(ansi_inc@127)(main@12)
  pop     __wbdoutput #@(macro_inc@139)(macro_inc@301)(ansi_inc@127)(main@12)
  #(end macro)divide  _wbdinput2,  10, _wbdinput2,  __wbdoutput
  arotl __wbdoutput #@(macro_inc@302)(ansi_inc@127)(main@12)
endloop #@(macro_inc@303)(ansi_inc@127)(main@12)
#(begin macro)scope_begin
#(end macro)scope_begin
#(begin macro)lvar    prefixzero2, 1
push    1 #@(macro_inc@22)(macro_inc@305)(ansi_inc@127)(main@12)
sbm     prefixzero2 #@(macro_inc@23)(macro_inc@305)(ansi_inc@127)(main@12)
#(end macro)lvar    prefixzero2, 1
push    3 #@(macro_inc@306)(ansi_inc@127)(main@12)
sbm     __wbdcnt2 #@(macro_inc@307)(ansi_inc@127)(main@12)
loop #@(macro_inc@308)(ansi_inc@127)(main@12)
  arotr   __wbdoutput #@(macro_inc@309)(ansi_inc@127)(main@12)
  #(begin macro)if_sup   __wbdcnt2,    1   # cnt == 3 or cnt == 2
  push    __wbdcnt2 #@(macro_inc@45)(macro_inc@310)(ansi_inc@127)(main@12)
  push    1 #@(macro_inc@46)(macro_inc@310)(ansi_inc@127)(main@12)
  sup #@(macro_inc@47)(macro_inc@310)(ansi_inc@127)(main@12)
  if #@(macro_inc@48)(macro_inc@310)(ansi_inc@127)(main@12)
    #(end macro)if_sup   __wbdcnt2,    1   # cnt == 3 or cnt == 2
    #(begin macro)if_diff __wbdoutput, 0
    push    __wbdoutput #@(macro_inc@29)(macro_inc@311)(ansi_inc@127)(main@12)
    push    0 #@(macro_inc@30)(macro_inc@311)(ansi_inc@127)(main@12)
    diff #@(macro_inc@31)(macro_inc@311)(ansi_inc@127)(main@12)
    if #@(macro_inc@32)(macro_inc@311)(ansi_inc@127)(main@12)
      #(end macro)if_diff __wbdoutput, 0
      #(begin macro)writeDigit  __wbdoutput
      push    __wbdoutput #@(macro_inc@286)(macro_inc@312)(ansi_inc@127)(main@12)
      add     '0' #@(macro_inc@287)(macro_inc@312)(ansi_inc@127)(main@12)
      pop     out #@(macro_inc@288)(macro_inc@312)(ansi_inc@127)(main@12)
      #(end macro)writeDigit  __wbdoutput
      #(begin macro)at_set  prefixzero2, 0
      #(begin macro)at_2("set",a,b)
      at      prefixzero2 #@(macro_inc@79)(macro_inc@126)(macro_inc@313)(ansi_inc@127)(main@12)
        set   0 #@(macro_inc@80)(macro_inc@126)(macro_inc@313)(ansi_inc@127)(main@12)
      ta #@(macro_inc@81)(macro_inc@126)(macro_inc@313)(ansi_inc@127)(main@12)
      #(end macro)at_2("set",a,b)
      #(end macro)at_set  prefixzero2, 0
    else #@(macro_inc@314)(ansi_inc@127)(main@12)
      #(begin macro)if_equal    prefixzero2, 0
      push    prefixzero2 #@(macro_inc@37)(macro_inc@315)(ansi_inc@127)(main@12)
      push    0 #@(macro_inc@38)(macro_inc@315)(ansi_inc@127)(main@12)
      equal #@(macro_inc@39)(macro_inc@315)(ansi_inc@127)(main@12)
      if #@(macro_inc@40)(macro_inc@315)(ansi_inc@127)(main@12)
        #(end macro)if_equal    prefixzero2, 0
        #(begin macro)writeDigit  __wbdoutput
        push    __wbdoutput #@(macro_inc@286)(macro_inc@316)(ansi_inc@127)(main@12)
        add     '0' #@(macro_inc@287)(macro_inc@316)(ansi_inc@127)(main@12)
        pop     out #@(macro_inc@288)(macro_inc@316)(ansi_inc@127)(main@12)
        #(end macro)writeDigit  __wbdoutput
      fi #@(macro_inc@317)(ansi_inc@127)(main@12)
    fi #@(macro_inc@318)(ansi_inc@127)(main@12)
  else #@(macro_inc@319)(ansi_inc@127)(main@12)
    #(begin macro)writeDigit  __wbdoutput
    push    __wbdoutput #@(macro_inc@286)(macro_inc@320)(ansi_inc@127)(main@12)
    add     '0' #@(macro_inc@287)(macro_inc@320)(ansi_inc@127)(main@12)
    pop     out #@(macro_inc@288)(macro_inc@320)(ansi_inc@127)(main@12)
    #(end macro)writeDigit  __wbdoutput
  fi #@(macro_inc@321)(ansi_inc@127)(main@12)
endloop #@(macro_inc@322)(ansi_inc@127)(main@12)
#(begin macro)scope_end
drop #@(macro_inc@15)(macro_inc@323)(ansi_inc@127)(main@12)
#(end macro)scope_end
drop    # remove push #@(macro_inc@324)(ansi_inc@127)(main@12)
#(end macro)writeByteDecimal
#(begin macro)print   ;
push    0 #@(macro_inc@331)(ansi_inc@128)(main@12)
set     59 #@(macro_inc@346)(ansi_inc@128)(main@12)
out             # ';' #@(macro_inc@348)(ansi_inc@128)(main@12)
drop #@(macro_inc@351)(ansi_inc@128)(main@12)
#(end macro)print   ;
push    1 #@(ansi_inc@129)(main@12)
#(begin macro)writeByteDecimal
sbm _wbdinput3 #@(macro_inc@297)(ansi_inc@130)(main@12)
push 3 #@(macro_inc@298)(ansi_inc@130)(main@12)
loop #@(macro_inc@299)(ansi_inc@130)(main@12)
  # output = input mod 10 ; input = input div 10 #@(macro_inc@300)(ansi_inc@130)(main@12)
  #(begin macro)divide  _wbdinput3,  10, _wbdinput3,  __wbdoutput
  push    _wbdinput3 #@(macro_inc@135)(macro_inc@301)(ansi_inc@130)(main@12)
  push    10 #@(macro_inc@136)(macro_inc@301)(ansi_inc@130)(main@12)
  div #@(macro_inc@137)(macro_inc@301)(ansi_inc@130)(main@12)
  pop     _wbdinput3 #@(macro_inc@138)(macro_inc@301)(ansi_inc@130)(main@12)
  pop     __wbdoutput #@(macro_inc@139)(macro_inc@301)(ansi_inc@130)(main@12)
  #(end macro)divide  _wbdinput3,  10, _wbdinput3,  __wbdoutput
  arotl __wbdoutput #@(macro_inc@302)(ansi_inc@130)(main@12)
endloop #@(macro_inc@303)(ansi_inc@130)(main@12)
#(begin macro)scope_begin
#(end macro)scope_begin
#(begin macro)lvar    prefixzero3, 1
push    1 #@(macro_inc@22)(macro_inc@305)(ansi_inc@130)(main@12)
sbm     prefixzero3 #@(macro_inc@23)(macro_inc@305)(ansi_inc@130)(main@12)
#(end macro)lvar    prefixzero3, 1
push    3 #@(macro_inc@306)(ansi_inc@130)(main@12)
sbm     __wbdcnt3 #@(macro_inc@307)(ansi_inc@130)(main@12)
loop #@(macro_inc@308)(ansi_inc@130)(main@12)
  arotr   __wbdoutput #@(macro_inc@309)(ansi_inc@130)(main@12)
  #(begin macro)if_sup   __wbdcnt3,    1   # cnt == 3 or cnt == 2
  push    __wbdcnt3 #@(macro_inc@45)(macro_inc@310)(ansi_inc@130)(main@12)
  push    1 #@(macro_inc@46)(macro_inc@310)(ansi_inc@130)(main@12)
  sup #@(macro_inc@47)(macro_inc@310)(ansi_inc@130)(main@12)
  if #@(macro_inc@48)(macro_inc@310)(ansi_inc@130)(main@12)
    #(end macro)if_sup   __wbdcnt3,    1   # cnt == 3 or cnt == 2
    #(begin macro)if_diff __wbdoutput, 0
    push    __wbdoutput #@(macro_inc@29)(macro_inc@311)(ansi_inc@130)(main@12)
    push    0 #@(macro_inc@30)(macro_inc@311)(ansi_inc@130)(main@12)
    diff #@(macro_inc@31)(macro_inc@311)(ansi_inc@130)(main@12)
    if #@(macro_inc@32)(macro_inc@311)(ansi_inc@130)(main@12)
      #(end macro)if_diff __wbdoutput, 0
      #(begin macro)writeDigit  __wbdoutput
      push    __wbdoutput #@(macro_inc@286)(macro_inc@312)(ansi_inc@130)(main@12)
      add     '0' #@(macro_inc@287)(macro_inc@312)(ansi_inc@130)(main@12)
      pop     out #@(macro_inc@288)(macro_inc@312)(ansi_inc@130)(main@12)
      #(end macro)writeDigit  __wbdoutput
      #(begin macro)at_set  prefixzero3, 0
      #(begin macro)at_2("set",a,b)
      at      prefixzero3 #@(macro_inc@79)(macro_inc@126)(macro_inc@313)(ansi_inc@130)(main@12)
        set   0 #@(macro_inc@80)(macro_inc@126)(macro_inc@313)(ansi_inc@130)(main@12)
      ta #@(macro_inc@81)(macro_inc@126)(macro_inc@313)(ansi_inc@130)(main@12)
      #(end macro)at_2("set",a,b)
      #(end macro)at_set  prefixzero3, 0
    else #@(macro_inc@314)(ansi_inc@130)(main@12)
      #(begin macro)if_equal    prefixzero3, 0
      push    prefixzero3 #@(macro_inc@37)(macro_inc@315)(ansi_inc@130)(main@12)
      push    0 #@(macro_inc@38)(macro_inc@315)(ansi_inc@130)(main@12)
      equal #@(macro_inc@39)(macro_inc@315)(ansi_inc@130)(main@12)
      if #@(macro_inc@40)(macro_inc@315)(ansi_inc@130)(main@12)
        #(end macro)if_equal    prefixzero3, 0
        #(begin macro)writeDigit  __wbdoutput
        push    __wbdoutput #@(macro_inc@286)(macro_inc@316)(ansi_inc@130)(main@12)
        add     '0' #@(macro_inc@287)(macro_inc@316)(ansi_inc@130)(main@12)
        pop     out #@(macro_inc@288)(macro_inc@316)(ansi_inc@130)(main@12)
        #(end macro)writeDigit  __wbdoutput
      fi #@(macro_inc@317)(ansi_inc@130)(main@12)
    fi #@(macro_inc@318)(ansi_inc@130)(main@12)
  else #@(macro_inc@319)(ansi_inc@130)(main@12)
    #(begin macro)writeDigit  __wbdoutput
    push    __wbdoutput #@(macro_inc@286)(macro_inc@320)(ansi_inc@130)(main@12)
    add     '0' #@(macro_inc@287)(macro_inc@320)(ansi_inc@130)(main@12)
    pop     out #@(macro_inc@288)(macro_inc@320)(ansi_inc@130)(main@12)
    #(end macro)writeDigit  __wbdoutput
  fi #@(macro_inc@321)(ansi_inc@130)(main@12)
endloop #@(macro_inc@322)(ansi_inc@130)(main@12)
#(begin macro)scope_end
drop #@(macro_inc@15)(macro_inc@323)(ansi_inc@130)(main@12)
#(end macro)scope_end
drop    # remove push #@(macro_inc@324)(ansi_inc@130)(main@12)
#(end macro)writeByteDecimal
#(begin macro)print   H
push    0 #@(macro_inc@331)(ansi_inc@131)(main@12)
set     72 #@(macro_inc@346)(ansi_inc@131)(main@12)
out             # 'H' #@(macro_inc@348)(ansi_inc@131)(main@12)
drop #@(macro_inc@351)(ansi_inc@131)(main@12)
#(end macro)print   H
#(end macro)ansi_CUP 1,  1
# inline ansi code #@(main@13)
#(begin macro)print("This is an \x1b[7mANSI\x1b[0m \x1b[38;5;226msample\x1b[0m\n")
push    0 #@(macro_inc@331)(main@14)
set     84 #@(macro_inc@346)(main@14)
out             # 'T' #@(macro_inc@348)(main@14)
add     20 #@(macro_inc@339)(main@14)
out             # 'h' #@(macro_inc@348)(main@14)
add     1 #@(macro_inc@339)(main@14)
out             # 'i' #@(macro_inc@348)(main@14)
add     10 #@(macro_inc@339)(main@14)
out             # 's' #@(macro_inc@348)(main@14)
set     32 #@(macro_inc@346)(main@14)
out             # ' ' #@(macro_inc@348)(main@14)
add     73 #@(macro_inc@339)(main@14)
out             # 'i' #@(macro_inc@348)(main@14)
add     10 #@(macro_inc@339)(main@14)
out             # 's' #@(macro_inc@348)(main@14)
set     32 #@(macro_inc@346)(main@14)
out             # ' ' #@(macro_inc@348)(main@14)
add     65 #@(macro_inc@339)(main@14)
out             # 'a' #@(macro_inc@348)(main@14)
add     13 #@(macro_inc@339)(main@14)
out             # 'n' #@(macro_inc@348)(main@14)
set     32 #@(macro_inc@346)(main@14)
out             # ' ' #@(macro_inc@348)(main@14)
sub     5 #@(macro_inc@342)(main@14)
out             #  #@(macro_inc@348)(main@14)
add     64 #@(macro_inc@339)(main@14)
out             # '[' #@(macro_inc@348)(main@14)
sub     36 #@(macro_inc@342)(main@14)
out             # '7' #@(macro_inc@348)(main@14)
add     54 #@(macro_inc@339)(main@14)
out             # 'm' #@(macro_inc@348)(main@14)
sub     44 #@(macro_inc@342)(main@14)
out             # 'A' #@(macro_inc@348)(main@14)
add     13 #@(macro_inc@339)(main@14)
out             # 'N' #@(macro_inc@348)(main@14)
add     5 #@(macro_inc@339)(main@14)
out             # 'S' #@(macro_inc@348)(main@14)
sub     10 #@(macro_inc@342)(main@14)
out             # 'I' #@(macro_inc@348)(main@14)
set     27 #@(macro_inc@346)(main@14)
out             #  #@(macro_inc@348)(main@14)
add     64 #@(macro_inc@339)(main@14)
out             # '[' #@(macro_inc@348)(main@14)
sub     43 #@(macro_inc@342)(main@14)
out             # '0' #@(macro_inc@348)(main@14)
add     61 #@(macro_inc@339)(main@14)
out             # 'm' #@(macro_inc@348)(main@14)
set     32 #@(macro_inc@346)(main@14)
out             # ' ' #@(macro_inc@348)(main@14)
sub     5 #@(macro_inc@342)(main@14)
out             #  #@(macro_inc@348)(main@14)
add     64 #@(macro_inc@339)(main@14)
out             # '[' #@(macro_inc@348)(main@14)
sub     40 #@(macro_inc@342)(main@14)
out             # '3' #@(macro_inc@348)(main@14)
add     5 #@(macro_inc@339)(main@14)
out             # '8' #@(macro_inc@348)(main@14)
add     3 #@(macro_inc@339)(main@14)
out             # ';' #@(macro_inc@348)(main@14)
sub     6 #@(macro_inc@342)(main@14)
out             # '5' #@(macro_inc@348)(main@14)
add     6 #@(macro_inc@339)(main@14)
out             # ';' #@(macro_inc@348)(main@14)
sub     9 #@(macro_inc@342)(main@14)
out             # '2' #@(macro_inc@348)(main@14)
out             # '2' #@(macro_inc@348)(main@14)
add     4 #@(macro_inc@339)(main@14)
out             # '6' #@(macro_inc@348)(main@14)
add     55 #@(macro_inc@339)(main@14)
out             # 'm' #@(macro_inc@348)(main@14)
add     6 #@(macro_inc@339)(main@14)
out             # 's' #@(macro_inc@348)(main@14)
sub     18 #@(macro_inc@342)(main@14)
out             # 'a' #@(macro_inc@348)(main@14)
add     12 #@(macro_inc@339)(main@14)
out             # 'm' #@(macro_inc@348)(main@14)
add     3 #@(macro_inc@339)(main@14)
out             # 'p' #@(macro_inc@348)(main@14)
sub     4 #@(macro_inc@342)(main@14)
out             # 'l' #@(macro_inc@348)(main@14)
sub     7 #@(macro_inc@342)(main@14)
out             # 'e' #@(macro_inc@348)(main@14)
set     27 #@(macro_inc@346)(main@14)
out             #  #@(macro_inc@348)(main@14)
add     64 #@(macro_inc@339)(main@14)
out             # '[' #@(macro_inc@348)(main@14)
sub     43 #@(macro_inc@342)(main@14)
out             # '0' #@(macro_inc@348)(main@14)
add     61 #@(macro_inc@339)(main@14)
out             # 'm' #@(macro_inc@348)(main@14)
set     10 #@(macro_inc@346)(main@14)
out             #  #@(macro_inc@348)(main@14)
drop #@(macro_inc@351)(main@14)
#(end macro)print("This is an \x1b[7mANSI\x1b[0m \x1b[38;5;226msample\x1b[0m\n")
#(begin macro)ansi_SGR_fg_green
#(begin macro)ansi_SGR_fgcolor    2
push    2 #@(ansi_inc@407)(ansi_inc@493)(main@15)
add     30 #@(ansi_inc@408)(ansi_inc@493)(main@15)
sbm     __ansifgc1 #@(ansi_inc@409)(ansi_inc@493)(main@15)
#(begin macro)ansi_SGR    __ansifgc1
#(begin macro)ansi_CSI
#(begin macro)ansi_esc    [
#(begin macro)print("\x1b")
push    0 #@(macro_inc@331)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@410)(ansi_inc@493)(main@15)
set     27 #@(macro_inc@346)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@410)(ansi_inc@493)(main@15)
out             #  #@(macro_inc@348)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@410)(ansi_inc@493)(main@15)
drop #@(macro_inc@351)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@410)(ansi_inc@493)(main@15)
#(end macro)print("\x1b")
#(begin macro)print(cmd)
push    0 #@(macro_inc@331)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@410)(ansi_inc@493)(main@15)
set     91 #@(macro_inc@346)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@410)(ansi_inc@493)(main@15)
out             # '[' #@(macro_inc@348)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@410)(ansi_inc@493)(main@15)
drop #@(macro_inc@351)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@410)(ansi_inc@493)(main@15)
#(end macro)print(cmd)
#(end macro)ansi_esc    [
#(end macro)ansi_CSI
push    __ansifgc1 #@(ansi_inc@187)(ansi_inc@410)(ansi_inc@493)(main@15)
#(begin macro)writeByteDecimal
sbm _wbdinput4 #@(macro_inc@297)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
push 3 #@(macro_inc@298)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
loop #@(macro_inc@299)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  # output = input mod 10 ; input = input div 10 #@(macro_inc@300)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  #(begin macro)divide  _wbdinput4,  10, _wbdinput4,  __wbdoutput
  push    _wbdinput4 #@(macro_inc@135)(macro_inc@301)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  push    10 #@(macro_inc@136)(macro_inc@301)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  div #@(macro_inc@137)(macro_inc@301)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  pop     _wbdinput4 #@(macro_inc@138)(macro_inc@301)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  pop     __wbdoutput #@(macro_inc@139)(macro_inc@301)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  #(end macro)divide  _wbdinput4,  10, _wbdinput4,  __wbdoutput
  arotl __wbdoutput #@(macro_inc@302)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
endloop #@(macro_inc@303)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
#(begin macro)scope_begin
#(end macro)scope_begin
#(begin macro)lvar    prefixzero4, 1
push    1 #@(macro_inc@22)(macro_inc@305)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
sbm     prefixzero4 #@(macro_inc@23)(macro_inc@305)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
#(end macro)lvar    prefixzero4, 1
push    3 #@(macro_inc@306)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
sbm     __wbdcnt4 #@(macro_inc@307)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
loop #@(macro_inc@308)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  arotr   __wbdoutput #@(macro_inc@309)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  #(begin macro)if_sup   __wbdcnt4,    1   # cnt == 3 or cnt == 2
  push    __wbdcnt4 #@(macro_inc@45)(macro_inc@310)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  push    1 #@(macro_inc@46)(macro_inc@310)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  sup #@(macro_inc@47)(macro_inc@310)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  if #@(macro_inc@48)(macro_inc@310)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
    #(end macro)if_sup   __wbdcnt4,    1   # cnt == 3 or cnt == 2
    #(begin macro)if_diff __wbdoutput, 0
    push    __wbdoutput #@(macro_inc@29)(macro_inc@311)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
    push    0 #@(macro_inc@30)(macro_inc@311)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
    diff #@(macro_inc@31)(macro_inc@311)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
    if #@(macro_inc@32)(macro_inc@311)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
      #(end macro)if_diff __wbdoutput, 0
      #(begin macro)writeDigit  __wbdoutput
      push    __wbdoutput #@(macro_inc@286)(macro_inc@312)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
      add     '0' #@(macro_inc@287)(macro_inc@312)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
      pop     out #@(macro_inc@288)(macro_inc@312)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
      #(end macro)writeDigit  __wbdoutput
      #(begin macro)at_set  prefixzero4, 0
      #(begin macro)at_2("set",a,b)
      at      prefixzero4 #@(macro_inc@79)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
        set   0 #@(macro_inc@80)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
      ta #@(macro_inc@81)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
      #(end macro)at_2("set",a,b)
      #(end macro)at_set  prefixzero4, 0
    else #@(macro_inc@314)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
      #(begin macro)if_equal    prefixzero4, 0
      push    prefixzero4 #@(macro_inc@37)(macro_inc@315)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
      push    0 #@(macro_inc@38)(macro_inc@315)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
      equal #@(macro_inc@39)(macro_inc@315)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
      if #@(macro_inc@40)(macro_inc@315)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
        #(end macro)if_equal    prefixzero4, 0
        #(begin macro)writeDigit  __wbdoutput
        push    __wbdoutput #@(macro_inc@286)(macro_inc@316)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
        add     '0' #@(macro_inc@287)(macro_inc@316)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
        pop     out #@(macro_inc@288)(macro_inc@316)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
        #(end macro)writeDigit  __wbdoutput
      fi #@(macro_inc@317)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
    fi #@(macro_inc@318)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
  else #@(macro_inc@319)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
    #(begin macro)writeDigit  __wbdoutput
    push    __wbdoutput #@(macro_inc@286)(macro_inc@320)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
    add     '0' #@(macro_inc@287)(macro_inc@320)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
    pop     out #@(macro_inc@288)(macro_inc@320)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
    #(end macro)writeDigit  __wbdoutput
  fi #@(macro_inc@321)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
endloop #@(macro_inc@322)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
#(begin macro)scope_end
drop #@(macro_inc@15)(macro_inc@323)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
#(end macro)scope_end
drop    # remove push #@(macro_inc@324)(ansi_inc@188)(ansi_inc@410)(ansi_inc@493)(main@15)
#(end macro)writeByteDecimal
#(begin macro)print   m
push    0 #@(macro_inc@331)(ansi_inc@189)(ansi_inc@410)(ansi_inc@493)(main@15)
set     109 #@(macro_inc@346)(ansi_inc@189)(ansi_inc@410)(ansi_inc@493)(main@15)
out             # 'm' #@(macro_inc@348)(ansi_inc@189)(ansi_inc@410)(ansi_inc@493)(main@15)
drop #@(macro_inc@351)(ansi_inc@189)(ansi_inc@410)(ansi_inc@493)(main@15)
#(end macro)print   m
#(end macro)ansi_SGR    __ansifgc1
drop #@(ansi_inc@411)(ansi_inc@493)(main@15)
#(end macro)ansi_SGR_fgcolor    2
#(end macro)ansi_SGR_fg_green
#(begin macro)print("This line is green\n")
push    0 #@(macro_inc@331)(main@16)
set     84 #@(macro_inc@346)(main@16)
out             # 'T' #@(macro_inc@348)(main@16)
add     20 #@(macro_inc@339)(main@16)
out             # 'h' #@(macro_inc@348)(main@16)
add     1 #@(macro_inc@339)(main@16)
out             # 'i' #@(macro_inc@348)(main@16)
add     10 #@(macro_inc@339)(main@16)
out             # 's' #@(macro_inc@348)(main@16)
set     32 #@(macro_inc@346)(main@16)
out             # ' ' #@(macro_inc@348)(main@16)
add     76 #@(macro_inc@339)(main@16)
out             # 'l' #@(macro_inc@348)(main@16)
sub     3 #@(macro_inc@342)(main@16)
out             # 'i' #@(macro_inc@348)(main@16)
add     5 #@(macro_inc@339)(main@16)
out             # 'n' #@(macro_inc@348)(main@16)
sub     9 #@(macro_inc@342)(main@16)
out             # 'e' #@(macro_inc@348)(main@16)
set     32 #@(macro_inc@346)(main@16)
out             # ' ' #@(macro_inc@348)(main@16)
add     73 #@(macro_inc@339)(main@16)
out             # 'i' #@(macro_inc@348)(main@16)
add     10 #@(macro_inc@339)(main@16)
out             # 's' #@(macro_inc@348)(main@16)
set     32 #@(macro_inc@346)(main@16)
out             # ' ' #@(macro_inc@348)(main@16)
add     71 #@(macro_inc@339)(main@16)
out             # 'g' #@(macro_inc@348)(main@16)
add     11 #@(macro_inc@339)(main@16)
out             # 'r' #@(macro_inc@348)(main@16)
sub     13 #@(macro_inc@342)(main@16)
out             # 'e' #@(macro_inc@348)(main@16)
out             # 'e' #@(macro_inc@348)(main@16)
add     9 #@(macro_inc@339)(main@16)
out             # 'n' #@(macro_inc@348)(main@16)
set     10 #@(macro_inc@346)(main@16)
out             #  #@(macro_inc@348)(main@16)
drop #@(macro_inc@351)(main@16)
#(end macro)print("This line is green\n")
#(begin macro)ansi_SGR_bg_blue
#(begin macro)ansi_SGR_bgcolor    4
push    4 #@(ansi_inc@431)(ansi_inc@543)(main@17)
add     40 #@(ansi_inc@432)(ansi_inc@543)(main@17)
sbm     __ansibgc1 #@(ansi_inc@433)(ansi_inc@543)(main@17)
#(begin macro)ansi_SGR    __ansibgc1
#(begin macro)ansi_CSI
#(begin macro)ansi_esc    [
#(begin macro)print("\x1b")
push    0 #@(macro_inc@331)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@434)(ansi_inc@543)(main@17)
set     27 #@(macro_inc@346)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@434)(ansi_inc@543)(main@17)
out             #  #@(macro_inc@348)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@434)(ansi_inc@543)(main@17)
drop #@(macro_inc@351)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@434)(ansi_inc@543)(main@17)
#(end macro)print("\x1b")
#(begin macro)print(cmd)
push    0 #@(macro_inc@331)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@434)(ansi_inc@543)(main@17)
set     91 #@(macro_inc@346)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@434)(ansi_inc@543)(main@17)
out             # '[' #@(macro_inc@348)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@434)(ansi_inc@543)(main@17)
drop #@(macro_inc@351)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@434)(ansi_inc@543)(main@17)
#(end macro)print(cmd)
#(end macro)ansi_esc    [
#(end macro)ansi_CSI
push    __ansibgc1 #@(ansi_inc@187)(ansi_inc@434)(ansi_inc@543)(main@17)
#(begin macro)writeByteDecimal
sbm _wbdinput5 #@(macro_inc@297)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
push 3 #@(macro_inc@298)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
loop #@(macro_inc@299)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  # output = input mod 10 ; input = input div 10 #@(macro_inc@300)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  #(begin macro)divide  _wbdinput5,  10, _wbdinput5,  __wbdoutput
  push    _wbdinput5 #@(macro_inc@135)(macro_inc@301)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  push    10 #@(macro_inc@136)(macro_inc@301)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  div #@(macro_inc@137)(macro_inc@301)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  pop     _wbdinput5 #@(macro_inc@138)(macro_inc@301)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  pop     __wbdoutput #@(macro_inc@139)(macro_inc@301)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  #(end macro)divide  _wbdinput5,  10, _wbdinput5,  __wbdoutput
  arotl __wbdoutput #@(macro_inc@302)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
endloop #@(macro_inc@303)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
#(begin macro)scope_begin
#(end macro)scope_begin
#(begin macro)lvar    prefixzero5, 1
push    1 #@(macro_inc@22)(macro_inc@305)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
sbm     prefixzero5 #@(macro_inc@23)(macro_inc@305)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
#(end macro)lvar    prefixzero5, 1
push    3 #@(macro_inc@306)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
sbm     __wbdcnt5 #@(macro_inc@307)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
loop #@(macro_inc@308)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  arotr   __wbdoutput #@(macro_inc@309)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  #(begin macro)if_sup   __wbdcnt5,    1   # cnt == 3 or cnt == 2
  push    __wbdcnt5 #@(macro_inc@45)(macro_inc@310)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  push    1 #@(macro_inc@46)(macro_inc@310)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  sup #@(macro_inc@47)(macro_inc@310)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  if #@(macro_inc@48)(macro_inc@310)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
    #(end macro)if_sup   __wbdcnt5,    1   # cnt == 3 or cnt == 2
    #(begin macro)if_diff __wbdoutput, 0
    push    __wbdoutput #@(macro_inc@29)(macro_inc@311)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
    push    0 #@(macro_inc@30)(macro_inc@311)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
    diff #@(macro_inc@31)(macro_inc@311)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
    if #@(macro_inc@32)(macro_inc@311)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
      #(end macro)if_diff __wbdoutput, 0
      #(begin macro)writeDigit  __wbdoutput
      push    __wbdoutput #@(macro_inc@286)(macro_inc@312)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
      add     '0' #@(macro_inc@287)(macro_inc@312)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
      pop     out #@(macro_inc@288)(macro_inc@312)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
      #(end macro)writeDigit  __wbdoutput
      #(begin macro)at_set  prefixzero5, 0
      #(begin macro)at_2("set",a,b)
      at      prefixzero5 #@(macro_inc@79)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
        set   0 #@(macro_inc@80)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
      ta #@(macro_inc@81)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
      #(end macro)at_2("set",a,b)
      #(end macro)at_set  prefixzero5, 0
    else #@(macro_inc@314)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
      #(begin macro)if_equal    prefixzero5, 0
      push    prefixzero5 #@(macro_inc@37)(macro_inc@315)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
      push    0 #@(macro_inc@38)(macro_inc@315)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
      equal #@(macro_inc@39)(macro_inc@315)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
      if #@(macro_inc@40)(macro_inc@315)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
        #(end macro)if_equal    prefixzero5, 0
        #(begin macro)writeDigit  __wbdoutput
        push    __wbdoutput #@(macro_inc@286)(macro_inc@316)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
        add     '0' #@(macro_inc@287)(macro_inc@316)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
        pop     out #@(macro_inc@288)(macro_inc@316)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
        #(end macro)writeDigit  __wbdoutput
      fi #@(macro_inc@317)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
    fi #@(macro_inc@318)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
  else #@(macro_inc@319)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
    #(begin macro)writeDigit  __wbdoutput
    push    __wbdoutput #@(macro_inc@286)(macro_inc@320)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
    add     '0' #@(macro_inc@287)(macro_inc@320)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
    pop     out #@(macro_inc@288)(macro_inc@320)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
    #(end macro)writeDigit  __wbdoutput
  fi #@(macro_inc@321)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
endloop #@(macro_inc@322)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
#(begin macro)scope_end
drop #@(macro_inc@15)(macro_inc@323)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
#(end macro)scope_end
drop    # remove push #@(macro_inc@324)(ansi_inc@188)(ansi_inc@434)(ansi_inc@543)(main@17)
#(end macro)writeByteDecimal
#(begin macro)print   m
push    0 #@(macro_inc@331)(ansi_inc@189)(ansi_inc@434)(ansi_inc@543)(main@17)
set     109 #@(macro_inc@346)(ansi_inc@189)(ansi_inc@434)(ansi_inc@543)(main@17)
out             # 'm' #@(macro_inc@348)(ansi_inc@189)(ansi_inc@434)(ansi_inc@543)(main@17)
drop #@(macro_inc@351)(ansi_inc@189)(ansi_inc@434)(ansi_inc@543)(main@17)
#(end macro)print   m
#(end macro)ansi_SGR    __ansibgc1
drop #@(ansi_inc@435)(ansi_inc@543)(main@17)
#(end macro)ansi_SGR_bgcolor    4
#(end macro)ansi_SGR_bg_blue
#(begin macro)print("This line is green on blue\n")
push    0 #@(macro_inc@331)(main@18)
set     84 #@(macro_inc@346)(main@18)
out             # 'T' #@(macro_inc@348)(main@18)
add     20 #@(macro_inc@339)(main@18)
out             # 'h' #@(macro_inc@348)(main@18)
add     1 #@(macro_inc@339)(main@18)
out             # 'i' #@(macro_inc@348)(main@18)
add     10 #@(macro_inc@339)(main@18)
out             # 's' #@(macro_inc@348)(main@18)
set     32 #@(macro_inc@346)(main@18)
out             # ' ' #@(macro_inc@348)(main@18)
add     76 #@(macro_inc@339)(main@18)
out             # 'l' #@(macro_inc@348)(main@18)
sub     3 #@(macro_inc@342)(main@18)
out             # 'i' #@(macro_inc@348)(main@18)
add     5 #@(macro_inc@339)(main@18)
out             # 'n' #@(macro_inc@348)(main@18)
sub     9 #@(macro_inc@342)(main@18)
out             # 'e' #@(macro_inc@348)(main@18)
set     32 #@(macro_inc@346)(main@18)
out             # ' ' #@(macro_inc@348)(main@18)
add     73 #@(macro_inc@339)(main@18)
out             # 'i' #@(macro_inc@348)(main@18)
add     10 #@(macro_inc@339)(main@18)
out             # 's' #@(macro_inc@348)(main@18)
set     32 #@(macro_inc@346)(main@18)
out             # ' ' #@(macro_inc@348)(main@18)
add     71 #@(macro_inc@339)(main@18)
out             # 'g' #@(macro_inc@348)(main@18)
add     11 #@(macro_inc@339)(main@18)
out             # 'r' #@(macro_inc@348)(main@18)
sub     13 #@(macro_inc@342)(main@18)
out             # 'e' #@(macro_inc@348)(main@18)
out             # 'e' #@(macro_inc@348)(main@18)
add     9 #@(macro_inc@339)(main@18)
out             # 'n' #@(macro_inc@348)(main@18)
set     32 #@(macro_inc@346)(main@18)
out             # ' ' #@(macro_inc@348)(main@18)
add     79 #@(macro_inc@339)(main@18)
out             # 'o' #@(macro_inc@348)(main@18)
sub     1 #@(macro_inc@342)(main@18)
out             # 'n' #@(macro_inc@348)(main@18)
set     32 #@(macro_inc@346)(main@18)
out             # ' ' #@(macro_inc@348)(main@18)
add     66 #@(macro_inc@339)(main@18)
out             # 'b' #@(macro_inc@348)(main@18)
add     10 #@(macro_inc@339)(main@18)
out             # 'l' #@(macro_inc@348)(main@18)
add     9 #@(macro_inc@339)(main@18)
out             # 'u' #@(macro_inc@348)(main@18)
sub     16 #@(macro_inc@342)(main@18)
out             # 'e' #@(macro_inc@348)(main@18)
set     10 #@(macro_inc@346)(main@18)
out             #  #@(macro_inc@348)(main@18)
drop #@(macro_inc@351)(main@18)
#(end macro)print("This line is green on blue\n")
#(begin macro)ansi_SGR_reverse
#(begin macro)ansi_SGR    7
#(begin macro)ansi_CSI
#(begin macro)ansi_esc    [
#(begin macro)print("\x1b")
push    0 #@(macro_inc@331)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@333)(main@19)
set     27 #@(macro_inc@346)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@333)(main@19)
out             #  #@(macro_inc@348)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@333)(main@19)
drop #@(macro_inc@351)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@333)(main@19)
#(end macro)print("\x1b")
#(begin macro)print(cmd)
push    0 #@(macro_inc@331)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@333)(main@19)
set     91 #@(macro_inc@346)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@333)(main@19)
out             # '[' #@(macro_inc@348)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@333)(main@19)
drop #@(macro_inc@351)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@333)(main@19)
#(end macro)print(cmd)
#(end macro)ansi_esc    [
#(end macro)ansi_CSI
push    7 #@(ansi_inc@187)(ansi_inc@333)(main@19)
#(begin macro)writeByteDecimal
sbm _wbdinput6 #@(macro_inc@297)(ansi_inc@188)(ansi_inc@333)(main@19)
push 3 #@(macro_inc@298)(ansi_inc@188)(ansi_inc@333)(main@19)
loop #@(macro_inc@299)(ansi_inc@188)(ansi_inc@333)(main@19)
  # output = input mod 10 ; input = input div 10 #@(macro_inc@300)(ansi_inc@188)(ansi_inc@333)(main@19)
  #(begin macro)divide  _wbdinput6,  10, _wbdinput6,  __wbdoutput
  push    _wbdinput6 #@(macro_inc@135)(macro_inc@301)(ansi_inc@188)(ansi_inc@333)(main@19)
  push    10 #@(macro_inc@136)(macro_inc@301)(ansi_inc@188)(ansi_inc@333)(main@19)
  div #@(macro_inc@137)(macro_inc@301)(ansi_inc@188)(ansi_inc@333)(main@19)
  pop     _wbdinput6 #@(macro_inc@138)(macro_inc@301)(ansi_inc@188)(ansi_inc@333)(main@19)
  pop     __wbdoutput #@(macro_inc@139)(macro_inc@301)(ansi_inc@188)(ansi_inc@333)(main@19)
  #(end macro)divide  _wbdinput6,  10, _wbdinput6,  __wbdoutput
  arotl __wbdoutput #@(macro_inc@302)(ansi_inc@188)(ansi_inc@333)(main@19)
endloop #@(macro_inc@303)(ansi_inc@188)(ansi_inc@333)(main@19)
#(begin macro)scope_begin
#(end macro)scope_begin
#(begin macro)lvar    prefixzero6, 1
push    1 #@(macro_inc@22)(macro_inc@305)(ansi_inc@188)(ansi_inc@333)(main@19)
sbm     prefixzero6 #@(macro_inc@23)(macro_inc@305)(ansi_inc@188)(ansi_inc@333)(main@19)
#(end macro)lvar    prefixzero6, 1
push    3 #@(macro_inc@306)(ansi_inc@188)(ansi_inc@333)(main@19)
sbm     __wbdcnt6 #@(macro_inc@307)(ansi_inc@188)(ansi_inc@333)(main@19)
loop #@(macro_inc@308)(ansi_inc@188)(ansi_inc@333)(main@19)
  arotr   __wbdoutput #@(macro_inc@309)(ansi_inc@188)(ansi_inc@333)(main@19)
  #(begin macro)if_sup   __wbdcnt6,    1   # cnt == 3 or cnt == 2
  push    __wbdcnt6 #@(macro_inc@45)(macro_inc@310)(ansi_inc@188)(ansi_inc@333)(main@19)
  push    1 #@(macro_inc@46)(macro_inc@310)(ansi_inc@188)(ansi_inc@333)(main@19)
  sup #@(macro_inc@47)(macro_inc@310)(ansi_inc@188)(ansi_inc@333)(main@19)
  if #@(macro_inc@48)(macro_inc@310)(ansi_inc@188)(ansi_inc@333)(main@19)
    #(end macro)if_sup   __wbdcnt6,    1   # cnt == 3 or cnt == 2
    #(begin macro)if_diff __wbdoutput, 0
    push    __wbdoutput #@(macro_inc@29)(macro_inc@311)(ansi_inc@188)(ansi_inc@333)(main@19)
    push    0 #@(macro_inc@30)(macro_inc@311)(ansi_inc@188)(ansi_inc@333)(main@19)
    diff #@(macro_inc@31)(macro_inc@311)(ansi_inc@188)(ansi_inc@333)(main@19)
    if #@(macro_inc@32)(macro_inc@311)(ansi_inc@188)(ansi_inc@333)(main@19)
      #(end macro)if_diff __wbdoutput, 0
      #(begin macro)writeDigit  __wbdoutput
      push    __wbdoutput #@(macro_inc@286)(macro_inc@312)(ansi_inc@188)(ansi_inc@333)(main@19)
      add     '0' #@(macro_inc@287)(macro_inc@312)(ansi_inc@188)(ansi_inc@333)(main@19)
      pop     out #@(macro_inc@288)(macro_inc@312)(ansi_inc@188)(ansi_inc@333)(main@19)
      #(end macro)writeDigit  __wbdoutput
      #(begin macro)at_set  prefixzero6, 0
      #(begin macro)at_2("set",a,b)
      at      prefixzero6 #@(macro_inc@79)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@333)(main@19)
        set   0 #@(macro_inc@80)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@333)(main@19)
      ta #@(macro_inc@81)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@333)(main@19)
      #(end macro)at_2("set",a,b)
      #(end macro)at_set  prefixzero6, 0
    else #@(macro_inc@314)(ansi_inc@188)(ansi_inc@333)(main@19)
      #(begin macro)if_equal    prefixzero6, 0
      push    prefixzero6 #@(macro_inc@37)(macro_inc@315)(ansi_inc@188)(ansi_inc@333)(main@19)
      push    0 #@(macro_inc@38)(macro_inc@315)(ansi_inc@188)(ansi_inc@333)(main@19)
      equal #@(macro_inc@39)(macro_inc@315)(ansi_inc@188)(ansi_inc@333)(main@19)
      if #@(macro_inc@40)(macro_inc@315)(ansi_inc@188)(ansi_inc@333)(main@19)
        #(end macro)if_equal    prefixzero6, 0
        #(begin macro)writeDigit  __wbdoutput
        push    __wbdoutput #@(macro_inc@286)(macro_inc@316)(ansi_inc@188)(ansi_inc@333)(main@19)
        add     '0' #@(macro_inc@287)(macro_inc@316)(ansi_inc@188)(ansi_inc@333)(main@19)
        pop     out #@(macro_inc@288)(macro_inc@316)(ansi_inc@188)(ansi_inc@333)(main@19)
        #(end macro)writeDigit  __wbdoutput
      fi #@(macro_inc@317)(ansi_inc@188)(ansi_inc@333)(main@19)
    fi #@(macro_inc@318)(ansi_inc@188)(ansi_inc@333)(main@19)
  else #@(macro_inc@319)(ansi_inc@188)(ansi_inc@333)(main@19)
    #(begin macro)writeDigit  __wbdoutput
    push    __wbdoutput #@(macro_inc@286)(macro_inc@320)(ansi_inc@188)(ansi_inc@333)(main@19)
    add     '0' #@(macro_inc@287)(macro_inc@320)(ansi_inc@188)(ansi_inc@333)(main@19)
    pop     out #@(macro_inc@288)(macro_inc@320)(ansi_inc@188)(ansi_inc@333)(main@19)
    #(end macro)writeDigit  __wbdoutput
  fi #@(macro_inc@321)(ansi_inc@188)(ansi_inc@333)(main@19)
endloop #@(macro_inc@322)(ansi_inc@188)(ansi_inc@333)(main@19)
#(begin macro)scope_end
drop #@(macro_inc@15)(macro_inc@323)(ansi_inc@188)(ansi_inc@333)(main@19)
#(end macro)scope_end
drop    # remove push #@(macro_inc@324)(ansi_inc@188)(ansi_inc@333)(main@19)
#(end macro)writeByteDecimal
#(begin macro)print   m
push    0 #@(macro_inc@331)(ansi_inc@189)(ansi_inc@333)(main@19)
set     109 #@(macro_inc@346)(ansi_inc@189)(ansi_inc@333)(main@19)
out             # 'm' #@(macro_inc@348)(ansi_inc@189)(ansi_inc@333)(main@19)
drop #@(macro_inc@351)(ansi_inc@189)(ansi_inc@333)(main@19)
#(end macro)print   m
#(end macro)ansi_SGR    7
#(end macro)ansi_SGR_reverse
#(begin macro)print("This line is reverse : blue on green\n")
push    0 #@(macro_inc@331)(main@20)
set     84 #@(macro_inc@346)(main@20)
out             # 'T' #@(macro_inc@348)(main@20)
add     20 #@(macro_inc@339)(main@20)
out             # 'h' #@(macro_inc@348)(main@20)
add     1 #@(macro_inc@339)(main@20)
out             # 'i' #@(macro_inc@348)(main@20)
add     10 #@(macro_inc@339)(main@20)
out             # 's' #@(macro_inc@348)(main@20)
set     32 #@(macro_inc@346)(main@20)
out             # ' ' #@(macro_inc@348)(main@20)
add     76 #@(macro_inc@339)(main@20)
out             # 'l' #@(macro_inc@348)(main@20)
sub     3 #@(macro_inc@342)(main@20)
out             # 'i' #@(macro_inc@348)(main@20)
add     5 #@(macro_inc@339)(main@20)
out             # 'n' #@(macro_inc@348)(main@20)
sub     9 #@(macro_inc@342)(main@20)
out             # 'e' #@(macro_inc@348)(main@20)
set     32 #@(macro_inc@346)(main@20)
out             # ' ' #@(macro_inc@348)(main@20)
add     73 #@(macro_inc@339)(main@20)
out             # 'i' #@(macro_inc@348)(main@20)
add     10 #@(macro_inc@339)(main@20)
out             # 's' #@(macro_inc@348)(main@20)
set     32 #@(macro_inc@346)(main@20)
out             # ' ' #@(macro_inc@348)(main@20)
add     82 #@(macro_inc@339)(main@20)
out             # 'r' #@(macro_inc@348)(main@20)
sub     13 #@(macro_inc@342)(main@20)
out             # 'e' #@(macro_inc@348)(main@20)
add     17 #@(macro_inc@339)(main@20)
out             # 'v' #@(macro_inc@348)(main@20)
sub     17 #@(macro_inc@342)(main@20)
out             # 'e' #@(macro_inc@348)(main@20)
add     13 #@(macro_inc@339)(main@20)
out             # 'r' #@(macro_inc@348)(main@20)
add     1 #@(macro_inc@339)(main@20)
out             # 's' #@(macro_inc@348)(main@20)
sub     14 #@(macro_inc@342)(main@20)
out             # 'e' #@(macro_inc@348)(main@20)
set     32 #@(macro_inc@346)(main@20)
out             # ' ' #@(macro_inc@348)(main@20)
add     26 #@(macro_inc@339)(main@20)
out             # ':' #@(macro_inc@348)(main@20)
sub     26 #@(macro_inc@342)(main@20)
out             # ' ' #@(macro_inc@348)(main@20)
add     66 #@(macro_inc@339)(main@20)
out             # 'b' #@(macro_inc@348)(main@20)
add     10 #@(macro_inc@339)(main@20)
out             # 'l' #@(macro_inc@348)(main@20)
add     9 #@(macro_inc@339)(main@20)
out             # 'u' #@(macro_inc@348)(main@20)
sub     16 #@(macro_inc@342)(main@20)
out             # 'e' #@(macro_inc@348)(main@20)
set     32 #@(macro_inc@346)(main@20)
out             # ' ' #@(macro_inc@348)(main@20)
add     79 #@(macro_inc@339)(main@20)
out             # 'o' #@(macro_inc@348)(main@20)
sub     1 #@(macro_inc@342)(main@20)
out             # 'n' #@(macro_inc@348)(main@20)
set     32 #@(macro_inc@346)(main@20)
out             # ' ' #@(macro_inc@348)(main@20)
add     71 #@(macro_inc@339)(main@20)
out             # 'g' #@(macro_inc@348)(main@20)
add     11 #@(macro_inc@339)(main@20)
out             # 'r' #@(macro_inc@348)(main@20)
sub     13 #@(macro_inc@342)(main@20)
out             # 'e' #@(macro_inc@348)(main@20)
out             # 'e' #@(macro_inc@348)(main@20)
add     9 #@(macro_inc@339)(main@20)
out             # 'n' #@(macro_inc@348)(main@20)
set     10 #@(macro_inc@346)(main@20)
out             #  #@(macro_inc@348)(main@20)
drop #@(macro_inc@351)(main@20)
#(end macro)print("This line is reverse : blue on green\n")
#(begin macro)ansi_SGR_reset
#(begin macro)ansi_SGR    0
#(begin macro)ansi_CSI
#(begin macro)ansi_esc    [
#(begin macro)print("\x1b")
push    0 #@(macro_inc@331)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@298)(main@21)
set     27 #@(macro_inc@346)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@298)(main@21)
out             #  #@(macro_inc@348)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@298)(main@21)
drop #@(macro_inc@351)(ansi_inc@9)(ansi_inc@30)(ansi_inc@186)(ansi_inc@298)(main@21)
#(end macro)print("\x1b")
#(begin macro)print(cmd)
push    0 #@(macro_inc@331)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@298)(main@21)
set     91 #@(macro_inc@346)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@298)(main@21)
out             # '[' #@(macro_inc@348)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@298)(main@21)
drop #@(macro_inc@351)(ansi_inc@10)(ansi_inc@30)(ansi_inc@186)(ansi_inc@298)(main@21)
#(end macro)print(cmd)
#(end macro)ansi_esc    [
#(end macro)ansi_CSI
push    0 #@(ansi_inc@187)(ansi_inc@298)(main@21)
#(begin macro)writeByteDecimal
sbm _wbdinput7 #@(macro_inc@297)(ansi_inc@188)(ansi_inc@298)(main@21)
push 3 #@(macro_inc@298)(ansi_inc@188)(ansi_inc@298)(main@21)
loop #@(macro_inc@299)(ansi_inc@188)(ansi_inc@298)(main@21)
  # output = input mod 10 ; input = input div 10 #@(macro_inc@300)(ansi_inc@188)(ansi_inc@298)(main@21)
  #(begin macro)divide  _wbdinput7,  10, _wbdinput7,  __wbdoutput
  push    _wbdinput7 #@(macro_inc@135)(macro_inc@301)(ansi_inc@188)(ansi_inc@298)(main@21)
  push    10 #@(macro_inc@136)(macro_inc@301)(ansi_inc@188)(ansi_inc@298)(main@21)
  div #@(macro_inc@137)(macro_inc@301)(ansi_inc@188)(ansi_inc@298)(main@21)
  pop     _wbdinput7 #@(macro_inc@138)(macro_inc@301)(ansi_inc@188)(ansi_inc@298)(main@21)
  pop     __wbdoutput #@(macro_inc@139)(macro_inc@301)(ansi_inc@188)(ansi_inc@298)(main@21)
  #(end macro)divide  _wbdinput7,  10, _wbdinput7,  __wbdoutput
  arotl __wbdoutput #@(macro_inc@302)(ansi_inc@188)(ansi_inc@298)(main@21)
endloop #@(macro_inc@303)(ansi_inc@188)(ansi_inc@298)(main@21)
#(begin macro)scope_begin
#(end macro)scope_begin
#(begin macro)lvar    prefixzero7, 1
push    1 #@(macro_inc@22)(macro_inc@305)(ansi_inc@188)(ansi_inc@298)(main@21)
sbm     prefixzero7 #@(macro_inc@23)(macro_inc@305)(ansi_inc@188)(ansi_inc@298)(main@21)
#(end macro)lvar    prefixzero7, 1
push    3 #@(macro_inc@306)(ansi_inc@188)(ansi_inc@298)(main@21)
sbm     __wbdcnt7 #@(macro_inc@307)(ansi_inc@188)(ansi_inc@298)(main@21)
loop #@(macro_inc@308)(ansi_inc@188)(ansi_inc@298)(main@21)
  arotr   __wbdoutput #@(macro_inc@309)(ansi_inc@188)(ansi_inc@298)(main@21)
  #(begin macro)if_sup   __wbdcnt7,    1   # cnt == 3 or cnt == 2
  push    __wbdcnt7 #@(macro_inc@45)(macro_inc@310)(ansi_inc@188)(ansi_inc@298)(main@21)
  push    1 #@(macro_inc@46)(macro_inc@310)(ansi_inc@188)(ansi_inc@298)(main@21)
  sup #@(macro_inc@47)(macro_inc@310)(ansi_inc@188)(ansi_inc@298)(main@21)
  if #@(macro_inc@48)(macro_inc@310)(ansi_inc@188)(ansi_inc@298)(main@21)
    #(end macro)if_sup   __wbdcnt7,    1   # cnt == 3 or cnt == 2
    #(begin macro)if_diff __wbdoutput, 0
    push    __wbdoutput #@(macro_inc@29)(macro_inc@311)(ansi_inc@188)(ansi_inc@298)(main@21)
    push    0 #@(macro_inc@30)(macro_inc@311)(ansi_inc@188)(ansi_inc@298)(main@21)
    diff #@(macro_inc@31)(macro_inc@311)(ansi_inc@188)(ansi_inc@298)(main@21)
    if #@(macro_inc@32)(macro_inc@311)(ansi_inc@188)(ansi_inc@298)(main@21)
      #(end macro)if_diff __wbdoutput, 0
      #(begin macro)writeDigit  __wbdoutput
      push    __wbdoutput #@(macro_inc@286)(macro_inc@312)(ansi_inc@188)(ansi_inc@298)(main@21)
      add     '0' #@(macro_inc@287)(macro_inc@312)(ansi_inc@188)(ansi_inc@298)(main@21)
      pop     out #@(macro_inc@288)(macro_inc@312)(ansi_inc@188)(ansi_inc@298)(main@21)
      #(end macro)writeDigit  __wbdoutput
      #(begin macro)at_set  prefixzero7, 0
      #(begin macro)at_2("set",a,b)
      at      prefixzero7 #@(macro_inc@79)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@298)(main@21)
        set   0 #@(macro_inc@80)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@298)(main@21)
      ta #@(macro_inc@81)(macro_inc@126)(macro_inc@313)(ansi_inc@188)(ansi_inc@298)(main@21)
      #(end macro)at_2("set",a,b)
      #(end macro)at_set  prefixzero7, 0
    else #@(macro_inc@314)(ansi_inc@188)(ansi_inc@298)(main@21)
      #(begin macro)if_equal    prefixzero7, 0
      push    prefixzero7 #@(macro_inc@37)(macro_inc@315)(ansi_inc@188)(ansi_inc@298)(main@21)
      push    0 #@(macro_inc@38)(macro_inc@315)(ansi_inc@188)(ansi_inc@298)(main@21)
      equal #@(macro_inc@39)(macro_inc@315)(ansi_inc@188)(ansi_inc@298)(main@21)
      if #@(macro_inc@40)(macro_inc@315)(ansi_inc@188)(ansi_inc@298)(main@21)
        #(end macro)if_equal    prefixzero7, 0
        #(begin macro)writeDigit  __wbdoutput
        push    __wbdoutput #@(macro_inc@286)(macro_inc@316)(ansi_inc@188)(ansi_inc@298)(main@21)
        add     '0' #@(macro_inc@287)(macro_inc@316)(ansi_inc@188)(ansi_inc@298)(main@21)
        pop     out #@(macro_inc@288)(macro_inc@316)(ansi_inc@188)(ansi_inc@298)(main@21)
        #(end macro)writeDigit  __wbdoutput
      fi #@(macro_inc@317)(ansi_inc@188)(ansi_inc@298)(main@21)
    fi #@(macro_inc@318)(ansi_inc@188)(ansi_inc@298)(main@21)
  else #@(macro_inc@319)(ansi_inc@188)(ansi_inc@298)(main@21)
    #(begin macro)writeDigit  __wbdoutput
    push    __wbdoutput #@(macro_inc@286)(macro_inc@320)(ansi_inc@188)(ansi_inc@298)(main@21)
    add     '0' #@(macro_inc@287)(macro_inc@320)(ansi_inc@188)(ansi_inc@298)(main@21)
    pop     out #@(macro_inc@288)(macro_inc@320)(ansi_inc@188)(ansi_inc@298)(main@21)
    #(end macro)writeDigit  __wbdoutput
  fi #@(macro_inc@321)(ansi_inc@188)(ansi_inc@298)(main@21)
endloop #@(macro_inc@322)(ansi_inc@188)(ansi_inc@298)(main@21)
#(begin macro)scope_end
drop #@(macro_inc@15)(macro_inc@323)(ansi_inc@188)(ansi_inc@298)(main@21)
#(end macro)scope_end
drop    # remove push #@(macro_inc@324)(ansi_inc@188)(ansi_inc@298)(main@21)
#(end macro)writeByteDecimal
#(begin macro)print   m
push    0 #@(macro_inc@331)(ansi_inc@189)(ansi_inc@298)(main@21)
set     109 #@(macro_inc@346)(ansi_inc@189)(ansi_inc@298)(main@21)
out             # 'm' #@(macro_inc@348)(ansi_inc@189)(ansi_inc@298)(main@21)
drop #@(macro_inc@351)(ansi_inc@189)(ansi_inc@298)(main@21)
#(end macro)print   m
#(end macro)ansi_SGR    0
#(end macro)ansi_SGR_reset
#(begin macro)print("This line is written normaly\n")
push    0 #@(macro_inc@331)(main@22)
set     84 #@(macro_inc@346)(main@22)
out             # 'T' #@(macro_inc@348)(main@22)
add     20 #@(macro_inc@339)(main@22)
out             # 'h' #@(macro_inc@348)(main@22)
add     1 #@(macro_inc@339)(main@22)
out             # 'i' #@(macro_inc@348)(main@22)
add     10 #@(macro_inc@339)(main@22)
out             # 's' #@(macro_inc@348)(main@22)
set     32 #@(macro_inc@346)(main@22)
out             # ' ' #@(macro_inc@348)(main@22)
add     76 #@(macro_inc@339)(main@22)
out             # 'l' #@(macro_inc@348)(main@22)
sub     3 #@(macro_inc@342)(main@22)
out             # 'i' #@(macro_inc@348)(main@22)
add     5 #@(macro_inc@339)(main@22)
out             # 'n' #@(macro_inc@348)(main@22)
sub     9 #@(macro_inc@342)(main@22)
out             # 'e' #@(macro_inc@348)(main@22)
set     32 #@(macro_inc@346)(main@22)
out             # ' ' #@(macro_inc@348)(main@22)
add     73 #@(macro_inc@339)(main@22)
out             # 'i' #@(macro_inc@348)(main@22)
add     10 #@(macro_inc@339)(main@22)
out             # 's' #@(macro_inc@348)(main@22)
set     32 #@(macro_inc@346)(main@22)
out             # ' ' #@(macro_inc@348)(main@22)
add     87 #@(macro_inc@339)(main@22)
out             # 'w' #@(macro_inc@348)(main@22)
sub     5 #@(macro_inc@342)(main@22)
out             # 'r' #@(macro_inc@348)(main@22)
sub     9 #@(macro_inc@342)(main@22)
out             # 'i' #@(macro_inc@348)(main@22)
add     11 #@(macro_inc@339)(main@22)
out             # 't' #@(macro_inc@348)(main@22)
out             # 't' #@(macro_inc@348)(main@22)
sub     15 #@(macro_inc@342)(main@22)
out             # 'e' #@(macro_inc@348)(main@22)
add     9 #@(macro_inc@339)(main@22)
out             # 'n' #@(macro_inc@348)(main@22)
set     32 #@(macro_inc@346)(main@22)
out             # ' ' #@(macro_inc@348)(main@22)
add     78 #@(macro_inc@339)(main@22)
out             # 'n' #@(macro_inc@348)(main@22)
add     1 #@(macro_inc@339)(main@22)
out             # 'o' #@(macro_inc@348)(main@22)
add     3 #@(macro_inc@339)(main@22)
out             # 'r' #@(macro_inc@348)(main@22)
sub     5 #@(macro_inc@342)(main@22)
out             # 'm' #@(macro_inc@348)(main@22)
sub     12 #@(macro_inc@342)(main@22)
out             # 'a' #@(macro_inc@348)(main@22)
add     11 #@(macro_inc@339)(main@22)
out             # 'l' #@(macro_inc@348)(main@22)
add     13 #@(macro_inc@339)(main@22)
out             # 'y' #@(macro_inc@348)(main@22)
set     10 #@(macro_inc@346)(main@22)
out             #  #@(macro_inc@348)(main@22)
drop #@(macro_inc@351)(main@22)
#(end macro)print("This line is written normaly\n")

