var __blockLevel__; __blockLevel__ = 0;
var __context__; __context__=[];
function __context() { var __result; __result='';
for (var _i=__context__.length-1; _i>=0 ; _i--) __result+=__context__[_i];
 return __result;}
function __indent() { var __result; __result = '';
for (var _i=0 ; _i < __blockLevel__ ; _i++) __result+= '  ';
 return __result;}
var __main; __main=0;
var _main = function(){
 __main++;
var _str_main; 
_str_main='';
if (arguments.length != 0) throw 'Too much arguments provided to macro _main()[' + [] +']';
_str_main+=__indent() +'# Test 2 #@(main@1)'+ __context() + '\n';
_str_main+=__indent() +'#(begin include)../../samples/include/macro.inc' + '\n';
_str_main+=__indent() +'# Common macros #@(macro_inc@1)'+ __context() + '\n';
_str_main+=__indent() +'# scope variables #@(macro_inc@2)'+ __context() + '\n';
var __scope; var __idx;
__scope=[0]; __idx = 0;
_str_main+=__indent() +' #@(macro_inc@5)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@6)'+ __context() + '\n';
_str_main+=__indent() +'# macro scope_begin : start a new scope for local variable (usage of macro lvar) #@(macro_inc@7)'+ __context() + '\n';
var _scope_begin; _scope_begin=0;
var scope_begin = function(){
 _scope_begin++;
var _strscope_begin; 
_strscope_begin='';
if (arguments.length != 0) throw 'Too much arguments provided to macro scope_begin()[' + [] +']';
__scope.push(0);
return _strscope_begin;
}
_str_main+=__indent() +' #@(macro_inc@11)'+ __context() + '\n';
_str_main+=__indent() +'# macro scope_end : end a scope , then drop scoped local variables (drop) (usage of lvar) #@(macro_inc@12)'+ __context() + '\n';
var _scope_end; _scope_end=0;
var scope_end = function(){
 _scope_end++;
var _strscope_end; 
_strscope_end='';
if (arguments.length != 0) throw 'Too much arguments provided to macro scope_end()[' + [] +']';
if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
_strscope_end+=__indent() +'drop #@(macro_inc@15)'+ __context() + '\n';
}
if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
return _strscope_end;
}
_str_main+=__indent() +' #@(macro_inc@19)'+ __context() + '\n';
_str_main+=__indent() +'# macro lvar(vname,value) : declare  in scope, a local variable named vname with an assigned value (stored in stack) #@(macro_inc@20)'+ __context() + '\n';
var _lvar; _lvar=0;
var lvar = function(vname,value){
 _lvar++;
var _strlvar; 
_strlvar='';
if (typeof vname == 'undefined') throw 'Parameter vname is undefined in call of  macro lvar(vname,value)[' + [vname,value] +']';
if (typeof value == 'undefined') throw 'Parameter value is undefined in call of  macro lvar(vname,value)[' + [vname,value] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro lvar(vname,value)[' + [vname,value] +']';
_strlvar+=__indent() +'push    ' + (value) + ' #@(macro_inc@22)'+ __context() + '\n';
_strlvar+=__indent() +'sbm     ' + (vname) + ' #@(macro_inc@23)'+ __context() + '\n';
__scope[__scope.length-1]++;
return _strlvar;
}
_str_main+=__indent() +' #@(macro_inc@26)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_diff(a,b) : if (a != b) { #@(macro_inc@27)'+ __context() + '\n';
var _if_diff; _if_diff=0;
var if_diff = function(a,b){
 _if_diff++;
var _strif_diff; 
_strif_diff='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_diff(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_diff(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_diff(a,b)[' + [a,b] +']';
_strif_diff+=__indent() +'push    ' + (a) + ' #@(macro_inc@29)'+ __context() + '\n';
_strif_diff+=__indent() +'push    ' + (b) + ' #@(macro_inc@30)'+ __context() + '\n';
_strif_diff+=__indent() +'diff #@(macro_inc@31)'+ __context() + '\n';
_strif_diff+=__indent() +'if #@(macro_inc@32)'+ __context() + '\n';
__blockLevel__++;
return _strif_diff;
}
_str_main+=__indent() +' #@(macro_inc@34)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_equal(a,b) : if (a == b) { #@(macro_inc@35)'+ __context() + '\n';
var _if_equal; _if_equal=0;
var if_equal = function(a,b){
 _if_equal++;
var _strif_equal; 
_strif_equal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_equal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_equal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_equal(a,b)[' + [a,b] +']';
_strif_equal+=__indent() +'push    ' + (a) + ' #@(macro_inc@37)'+ __context() + '\n';
_strif_equal+=__indent() +'push    ' + (b) + ' #@(macro_inc@38)'+ __context() + '\n';
_strif_equal+=__indent() +'equal #@(macro_inc@39)'+ __context() + '\n';
_strif_equal+=__indent() +'if #@(macro_inc@40)'+ __context() + '\n';
__blockLevel__++;
return _strif_equal;
}
_str_main+=__indent() +' #@(macro_inc@42)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_sup(a,b) : if (a > b) { #@(macro_inc@43)'+ __context() + '\n';
var _if_sup; _if_sup=0;
var if_sup = function(a,b){
 _if_sup++;
var _strif_sup; 
_strif_sup='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_sup(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_sup(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_sup(a,b)[' + [a,b] +']';
_strif_sup+=__indent() +'push    ' + (a) + ' #@(macro_inc@45)'+ __context() + '\n';
_strif_sup+=__indent() +'push    ' + (b) + ' #@(macro_inc@46)'+ __context() + '\n';
_strif_sup+=__indent() +'sup #@(macro_inc@47)'+ __context() + '\n';
_strif_sup+=__indent() +'if #@(macro_inc@48)'+ __context() + '\n';
__blockLevel__++;
return _strif_sup;
}
_str_main+=__indent() +' #@(macro_inc@50)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_inf(a,b) : if (a < b) { #@(macro_inc@51)'+ __context() + '\n';
var _if_inf; _if_inf=0;
var if_inf = function(a,b){
 _if_inf++;
var _strif_inf; 
_strif_inf='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_inf(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_inf(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_inf(a,b)[' + [a,b] +']';
_strif_inf+=__indent() +'push    ' + (a) + ' #@(macro_inc@53)'+ __context() + '\n';
_strif_inf+=__indent() +'push    ' + (b) + ' #@(macro_inc@54)'+ __context() + '\n';
_strif_inf+=__indent() +'inf #@(macro_inc@55)'+ __context() + '\n';
_strif_inf+=__indent() +'if #@(macro_inc@56)'+ __context() + '\n';
__blockLevel__++;
return _strif_inf;
}
_str_main+=__indent() +' #@(macro_inc@58)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_supequal(a,b) : if (a >= b) { #@(macro_inc@59)'+ __context() + '\n';
var _if_supequal; _if_supequal=0;
var if_supequal = function(a,b){
 _if_supequal++;
var _strif_supequal; 
_strif_supequal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_supequal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_supequal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_supequal(a,b)[' + [a,b] +']';
_strif_supequal+=__indent() +'push    ' + (a) + ' #@(macro_inc@61)'+ __context() + '\n';
_strif_supequal+=__indent() +'push    ' + (b) + ' #@(macro_inc@62)'+ __context() + '\n';
_strif_supequal+=__indent() +'inf #@(macro_inc@63)'+ __context() + '\n';
_strif_supequal+=__indent() +'not #@(macro_inc@64)'+ __context() + '\n';
_strif_supequal+=__indent() +'if #@(macro_inc@65)'+ __context() + '\n';
__blockLevel__++;
return _strif_supequal;
}
_str_main+=__indent() +' #@(macro_inc@67)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_infequal(a,b) : if (a <= b) { #@(macro_inc@68)'+ __context() + '\n';
var _if_infequal; _if_infequal=0;
var if_infequal = function(a,b){
 _if_infequal++;
var _strif_infequal; 
_strif_infequal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_infequal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_infequal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_infequal(a,b)[' + [a,b] +']';
_strif_infequal+=__indent() +'push    ' + (a) + ' #@(macro_inc@70)'+ __context() + '\n';
_strif_infequal+=__indent() +'push    ' + (b) + ' #@(macro_inc@71)'+ __context() + '\n';
_strif_infequal+=__indent() +'sup #@(macro_inc@72)'+ __context() + '\n';
_strif_infequal+=__indent() +'not #@(macro_inc@73)'+ __context() + '\n';
_strif_infequal+=__indent() +'if #@(macro_inc@74)'+ __context() + '\n';
__blockLevel__++;
return _strif_infequal;
}
_str_main+=__indent() +' #@(macro_inc@76)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_2 #@(macro_inc@77)'+ __context() + '\n';
var _at_2; _at_2=0;
var at_2 = function(ope, a,b){
 _at_2++;
var _strat_2; 
_strat_2='';
if (typeof ope == 'undefined') throw 'Parameter ope is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro at_2(ope, a,b)[' + [ope, a,b] +']';
_strat_2+=__indent() +'at      ' + (a) + ' #@(macro_inc@79)'+ __context() + '\n';
__blockLevel__++;
_strat_2+=__indent() +'' + (ope) + '   ' + (b) + ' #@(macro_inc@80)' + __context() + '\n';
__blockLevel__--;
_strat_2+=__indent() +'ta #@(macro_inc@81)'+ __context() + '\n';
return _strat_2;
}
_str_main+=__indent() +' #@(macro_inc@83)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_1 #@(macro_inc@84)'+ __context() + '\n';
var _at_1; _at_1=0;
var at_1 = function(ope, a){
 _at_1++;
var _strat_1; 
_strat_1='';
if (typeof ope == 'undefined') throw 'Parameter ope is undefined in call of  macro at_1(ope, a)[' + [ope, a] +']';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_1(ope, a)[' + [ope, a] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_1(ope, a)[' + [ope, a] +']';
_strat_1+=__indent() +'#(begin macro)at_2(ope,a,"")' + '\n';
__context__.push('(macro_inc@86)');
_strat_1+=at_2(ope,a,"");
__context__.pop();
_strat_1+=__indent() +'#(end macro)at_2(ope,a,"")' + '\n';
return _strat_1;
}
_str_main+=__indent() +' #@(macro_inc@88)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_reset(a) : a=0 #@(macro_inc@89)'+ __context() + '\n';
var _at_reset; _at_reset=0;
var at_reset = function(a){
 _at_reset++;
var _strat_reset; 
_strat_reset='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_reset(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_reset(a)[' + [a] +']';
_strat_reset+=__indent() +'#(begin macro)at_1("reset",a)' + '\n';
__context__.push('(macro_inc@91)');
_strat_reset+=at_1("reset",a);
__context__.pop();
_strat_reset+=__indent() +'#(end macro)at_1("reset",a)' + '\n';
return _strat_reset;
}
_str_main+=__indent() +' #@(macro_inc@93)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_inc(a) : a++ #@(macro_inc@94)'+ __context() + '\n';
var _at_inc; _at_inc=0;
var at_inc = function(a){
 _at_inc++;
var _strat_inc; 
_strat_inc='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_inc(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_inc(a)[' + [a] +']';
_strat_inc+=__indent() +'#(begin macro)at_1("inc",a)' + '\n';
__context__.push('(macro_inc@96)');
_strat_inc+=at_1("inc",a);
__context__.pop();
_strat_inc+=__indent() +'#(end macro)at_1("inc",a)' + '\n';
return _strat_inc;
}
_str_main+=__indent() +' #@(macro_inc@98)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_dec(a) : a-- #@(macro_inc@99)'+ __context() + '\n';
var _at_dec; _at_dec=0;
var at_dec = function(a){
 _at_dec++;
var _strat_dec; 
_strat_dec='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_dec(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_dec(a)[' + [a] +']';
_strat_dec+=__indent() +'#(begin macro)at_1("dec",a)' + '\n';
__context__.push('(macro_inc@101)');
_strat_dec+=at_1("dec",a);
__context__.pop();
_strat_dec+=__indent() +'#(end macro)at_1("dec",a)' + '\n';
return _strat_dec;
}
_str_main+=__indent() +' #@(macro_inc@103)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_in(a)  : a= readchar() #@(macro_inc@104)'+ __context() + '\n';
var _at_in; _at_in=0;
var at_in = function(a){
 _at_in++;
var _strat_in; 
_strat_in='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_in(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_in(a)[' + [a] +']';
_strat_in+=__indent() +'#(begin macro)at_1("in",a)' + '\n';
__context__.push('(macro_inc@106)');
_strat_in+=at_1("in",a);
__context__.pop();
_strat_in+=__indent() +'#(end macro)at_1("in",a)' + '\n';
return _strat_in;
}
_str_main+=__indent() +' #@(macro_inc@108)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_out(a) : write(a) #@(macro_inc@109)'+ __context() + '\n';
var _at_out; _at_out=0;
var at_out = function(a){
 _at_out++;
var _strat_out; 
_strat_out='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_out(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_out(a)[' + [a] +']';
_strat_out+=__indent() +'#(begin macro)at_1("out",a)' + '\n';
__context__.push('(macro_inc@111)');
_strat_out+=at_1("out",a);
__context__.pop();
_strat_out+=__indent() +'#(end macro)at_1("out",a)' + '\n';
return _strat_out;
}
_str_main+=__indent() +' #@(macro_inc@113)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_add(a,b) : a += b (immediate) #@(macro_inc@114)'+ __context() + '\n';
var _at_add; _at_add=0;
var at_add = function(a,b){
 _at_add++;
var _strat_add; 
_strat_add='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_add(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_add(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_add(a,b)[' + [a,b] +']';
_strat_add+=__indent() +'#(begin macro)at_2("add",a,b)' + '\n';
__context__.push('(macro_inc@116)');
_strat_add+=at_2("add",a,b);
__context__.pop();
_strat_add+=__indent() +'#(end macro)at_2("add",a,b)' + '\n';
return _strat_add;
}
_str_main+=__indent() +' #@(macro_inc@118)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_sub(a,b) : a -= b (immediate) #@(macro_inc@119)'+ __context() + '\n';
var _at_sub; _at_sub=0;
var at_sub = function(a,b){
 _at_sub++;
var _strat_sub; 
_strat_sub='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_sub(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_sub(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_sub(a,b)[' + [a,b] +']';
_strat_sub+=__indent() +'#(begin macro)at_2("sub",a,b)' + '\n';
__context__.push('(macro_inc@121)');
_strat_sub+=at_2("sub",a,b);
__context__.pop();
_strat_sub+=__indent() +'#(end macro)at_2("sub",a,b)' + '\n';
return _strat_sub;
}
_str_main+=__indent() +' #@(macro_inc@123)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_set(a,b) : a = b (immediate) #@(macro_inc@124)'+ __context() + '\n';
var _at_set; _at_set=0;
var at_set = function(a,b){
 _at_set++;
var _strat_set; 
_strat_set='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_set(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_set(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_set(a,b)[' + [a,b] +']';
_strat_set+=__indent() +'#(begin macro)at_2("set",a,b)' + '\n';
__context__.push('(macro_inc@126)');
_strat_set+=at_2("set",a,b);
__context__.pop();
_strat_set+=__indent() +'#(end macro)at_2("set",a,b)' + '\n';
return _strat_set;
}
_str_main+=__indent() +' #@(macro_inc@128)'+ __context() + '\n';
var _write; _write=0;
var write = function(a){
 _write++;
var _strwrite; 
_strwrite='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro write(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro write(a)[' + [a] +']';
_strwrite+=__indent() +'push    ' + (a) + ' #@(macro_inc@130)'+ __context() + '\n';
_strwrite+=__indent() +'pop     out #@(macro_inc@131)'+ __context() + '\n';
return _strwrite;
}
_str_main+=__indent() +' #@(macro_inc@133)'+ __context() + '\n';
var _divide; _divide=0;
var divide = function(a,b,d,r){
 _divide++;
var _strdivide; 
_strdivide='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof d == 'undefined') throw 'Parameter d is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof r == 'undefined') throw 'Parameter r is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (arguments.length != 4) throw 'Too much arguments provided to macro divide(a,b,d,r)[' + [a,b,d,r] +']';
_strdivide+=__indent() +'push    ' + (a) + ' #@(macro_inc@135)'+ __context() + '\n';
_strdivide+=__indent() +'push    ' + (b) + ' #@(macro_inc@136)'+ __context() + '\n';
_strdivide+=__indent() +'div #@(macro_inc@137)'+ __context() + '\n';
_strdivide+=__indent() +'pop     ' + (d) + ' #@(macro_inc@138)'+ __context() + '\n';
_strdivide+=__indent() +'pop     ' + (r) + ' #@(macro_inc@139)'+ __context() + '\n';
return _strdivide;
}
_str_main+=__indent() +' #@(macro_inc@141)'+ __context() + '\n';
_str_main+=__indent() +'#macro addof() : push A, push B , replaced by Carry, A+B #@(macro_inc@142)'+ __context() + '\n';
var _addof; _addof=0;
var addof = function(){
 _addof++;
var _straddof; 
_straddof='';
if (arguments.length != 0) throw 'Too much arguments provided to macro addof()[' + [] +']';
_straddof+=__indent() +'sbm _addofb' + (_addof) + ' #@(macro_inc@144)'+ __context() + '\n';
_straddof+=__indent() +'sbm _addofa' + (_addof) + ' - 1 #@(macro_inc@145)'+ __context() + '\n';
_straddof+=__indent() +'#(begin macro)scope_begin()' + '\n';
__context__.push('(macro_inc@146)');
_straddof+=scope_begin();
__context__.pop();
_straddof+=__indent() +'#(end macro)scope_begin()' + '\n';
_straddof+=__indent() +'#(begin macro)lvar("_addofc"+_addof ,0)' + '\n';
__context__.push('(macro_inc@147)');
_straddof+=lvar("_addofc"+_addof ,0);
__context__.pop();
_straddof+=__indent() +'#(end macro)lvar("_addofc"+_addof ,0)' + '\n';
_straddof+=__indent() +'push 1 #@(macro_inc@148)'+ __context() + '\n';
_straddof+=__indent() +'sbm _loopao' + (_addof) + ' #@(macro_inc@149)'+ __context() + '\n';
_straddof+=__indent() +'while #@(macro_inc@150)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'push _addofa' + (_addof) + ' #@(macro_inc@151)'+ __context() + '\n';
_straddof+=__indent() +'if #@(macro_inc@152)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _addofa' + (_addof) + ' #@(macro_inc@153)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'dec #@(macro_inc@154)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@155)'+ __context() + '\n';
_straddof+=__indent() +'at _addofb' + (_addof) + ' #@(macro_inc@156)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'inc #@(macro_inc@157)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@158)'+ __context() + '\n';
_straddof+=__indent() +'push _addofb' + (_addof) + ' #@(macro_inc@159)'+ __context() + '\n';
_straddof+=__indent() +'not #@(macro_inc@160)'+ __context() + '\n';
_straddof+=__indent() +'if #@(macro_inc@161)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _addofc' + (_addof) + ' #@(macro_inc@162)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'set 1 #@(macro_inc@163)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@164)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'fi #@(macro_inc@165)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'else #@(macro_inc@166)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _loopao' + (_addof) + ' #@(macro_inc@167)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'reset #@(macro_inc@168)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@169)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'fi #@(macro_inc@170)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'wend #@(macro_inc@171)'+ __context() + '\n';
_straddof+=__indent() +'push _addofc' + (_addof) + ' #@(macro_inc@172)'+ __context() + '\n';
_straddof+=__indent() +'if #@(macro_inc@173)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _addofa' + (_addof) + ' #@(macro_inc@174)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'set 1 #@(macro_inc@175)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@176)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'fi #@(macro_inc@177)'+ __context() + '\n';
_straddof+=__indent() +'#(begin macro)scope_end()' + '\n';
__context__.push('(macro_inc@178)');
_straddof+=scope_end();
__context__.pop();
_straddof+=__indent() +'#(end macro)scope_end()' + '\n';
return _straddof;
}
_str_main+=__indent() +' #@(macro_inc@180)'+ __context() + '\n';
_str_main+=__indent() +'# macro subof() : push A, push B , replaced by Carry, A-B #@(macro_inc@181)'+ __context() + '\n';
var _subof; _subof=0;
var subof = function(){
 _subof++;
var _strsubof; 
_strsubof='';
if (arguments.length != 0) throw 'Too much arguments provided to macro subof()[' + [] +']';
_strsubof+=__indent() +'sbm _subofb' + (_subof) + ' #@(macro_inc@183)'+ __context() + '\n';
_strsubof+=__indent() +'sbm _subofa' + (_subof) + ' - 1 #@(macro_inc@184)'+ __context() + '\n';
_strsubof+=__indent() +'#(begin macro)scope_begin()' + '\n';
__context__.push('(macro_inc@185)');
_strsubof+=scope_begin();
__context__.pop();
_strsubof+=__indent() +'#(end macro)scope_begin()' + '\n';
_strsubof+=__indent() +'#(begin macro)lvar("_subofc"+_subof ,0)' + '\n';
__context__.push('(macro_inc@186)');
_strsubof+=lvar("_subofc"+_subof ,0);
__context__.pop();
_strsubof+=__indent() +'#(end macro)lvar("_subofc"+_subof ,0)' + '\n';
_strsubof+=__indent() +'push 1 #@(macro_inc@187)'+ __context() + '\n';
_strsubof+=__indent() +'sbm _loopso' + (_subof) + ' #@(macro_inc@188)'+ __context() + '\n';
_strsubof+=__indent() +'while #@(macro_inc@189)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'push _subofb' + (_subof) + ' #@(macro_inc@190)'+ __context() + '\n';
_strsubof+=__indent() +'if #@(macro_inc@191)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _subofb' + (_subof) + ' #@(macro_inc@192)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'dec #@(macro_inc@193)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@194)'+ __context() + '\n';
_strsubof+=__indent() +'at _subofa' + (_subof) + ' #@(macro_inc@195)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'dec #@(macro_inc@196)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@197)'+ __context() + '\n';
_strsubof+=__indent() +'push _subofa' + (_subof) + ' #@(macro_inc@198)'+ __context() + '\n';
_strsubof+=__indent() +'inc #@(macro_inc@199)'+ __context() + '\n';
_strsubof+=__indent() +'not #@(macro_inc@200)'+ __context() + '\n';
_strsubof+=__indent() +'if #@(macro_inc@201)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _subofc' + (_subof) + ' #@(macro_inc@202)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'set 1 #@(macro_inc@203)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@204)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'fi #@(macro_inc@205)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'else #@(macro_inc@206)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _loopso' + (_subof) + ' #@(macro_inc@207)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'reset #@(macro_inc@208)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@209)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'fi #@(macro_inc@210)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'wend #@(macro_inc@211)'+ __context() + '\n';
_strsubof+=__indent() +'push _subofc' + (_subof) + ' #@(macro_inc@212)'+ __context() + '\n';
_strsubof+=__indent() +'if #@(macro_inc@213)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _subofb' + (_subof) + ' #@(macro_inc@214)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'set 1 #@(macro_inc@215)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@216)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'fi #@(macro_inc@217)'+ __context() + '\n';
_strsubof+=__indent() +'#(begin macro)scope_end()' + '\n';
__context__.push('(macro_inc@218)');
_strsubof+=scope_end();
__context__.pop();
_strsubof+=__indent() +'#(end macro)scope_end()' + '\n';
_strsubof+=__indent() +'swap #@(macro_inc@219)'+ __context() + '\n';
return _strsubof;
}
_str_main+=__indent() +' #@(macro_inc@221)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulof() : A = stack-1, B= stack : stack-1 = A*B div 256, stack = A*B mod 256 #@(macro_inc@222)'+ __context() + '\n';
var _mulof; _mulof=0;
var mulof = function(){
 _mulof++;
var _strmulof; 
_strmulof='';
if (arguments.length != 0) throw 'Too much arguments provided to macro mulof()[' + [] +']';
_strmulof+=__indent() +'sbm     _mulofA' + (_mulof) + ' - 1 #@(macro_inc@224)'+ __context() + '\n';
_strmulof+=__indent() +'sbm     _mulofB' + (_mulof) + ' #@(macro_inc@225)'+ __context() + '\n';
_strmulof+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(macro_inc@226)');
_strmulof+=scope_begin();
__context__.pop();
_strmulof+=__indent() +'#(end macro)scope_begin' + '\n';
_strmulof+=__indent() +'#(begin macro)lvar    _mulofABdiv256' + (_mulof) + ',    0' + '\n';
__context__.push('(macro_inc@227)');
_strmulof+=lvar(((isNaN(('_mulofABdiv256' + (_mulof) + '')*1))?('_mulofABdiv256' + (_mulof) + ''):(('_mulofABdiv256' + (_mulof) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulof+=__indent() +'#(end macro)lvar    _mulofABdiv256' + (_mulof) + ',    0' + '\n';
_strmulof+=__indent() +'#(begin macro)lvar    _mulofABmod256' + (_mulof) + ',    0' + '\n';
__context__.push('(macro_inc@228)');
_strmulof+=lvar(((isNaN(('_mulofABmod256' + (_mulof) + '')*1))?('_mulofABmod256' + (_mulof) + ''):(('_mulofABmod256' + (_mulof) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulof+=__indent() +'#(end macro)lvar    _mulofABmod256' + (_mulof) + ',    0' + '\n';
_strmulof+=__indent() +'push    _mulofB' + (_mulof) + ' #@(macro_inc@229)'+ __context() + '\n';
_strmulof+=__indent() +'loop #@(macro_inc@230)'+ __context() + '\n';
__blockLevel__++;
_strmulof+=__indent() +'push    _mulofABmod256' + (_mulof) + ' #@(macro_inc@231)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofA' + (_mulof) + ' #@(macro_inc@232)'+ __context() + '\n';
_strmulof+=__indent() +'#(begin macro)addof' + '\n';
__context__.push('(macro_inc@233)');
_strmulof+=addof();
__context__.pop();
_strmulof+=__indent() +'#(end macro)addof' + '\n';
_strmulof+=__indent() +'pop     _mulofABmod256' + (_mulof) + ' #@(macro_inc@234)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofABdiv256' + (_mulof) + ' #@(macro_inc@235)'+ __context() + '\n';
_strmulof+=__indent() +'add #@(macro_inc@236)'+ __context() + '\n';
_strmulof+=__indent() +'pop     _mulofABdiv256' + (_mulof) + ' #@(macro_inc@237)'+ __context() + '\n';
__blockLevel__--;
_strmulof+=__indent() +'endloop #@(macro_inc@238)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofABmod256' + (_mulof) + ' #@(macro_inc@239)'+ __context() + '\n';
_strmulof+=__indent() +'pop     _mulofB' + (_mulof) + ' #@(macro_inc@240)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofABdiv256' + (_mulof) + ' #@(macro_inc@241)'+ __context() + '\n';
_strmulof+=__indent() +'pop     _mulofA' + (_mulof) + ' #@(macro_inc@242)'+ __context() + '\n';
_strmulof+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(macro_inc@243)');
_strmulof+=scope_end();
__context__.pop();
_strmulof+=__indent() +'#(end macro)scope_end' + '\n';
return _strmulof;
}
_str_main+=__indent() +' #@(macro_inc@245)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@246)'+ __context() + '\n';
var _left_rewind; _left_rewind=0;
var left_rewind = function(array){
 _left_rewind++;
var _strleft_rewind; 
_strleft_rewind='';
if (typeof array == 'undefined') throw 'Parameter array is undefined in call of  macro left_rewind(array)[' + [array] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro left_rewind(array)[' + [array] +']';
_strleft_rewind+=__indent() +'push    1 #@(macro_inc@248)'+ __context() + '\n';
_strleft_rewind+=__indent() +'sbm     __looprewind' + (_left_rewind) + ' #@(macro_inc@249)'+ __context() + '\n';
_strleft_rewind+=__indent() +'while #@(macro_inc@250)'+ __context() + '\n';
__blockLevel__++;
_strleft_rewind+=__indent() +'#(begin macro)if_diff ' + (array) + '.pos,    0' + '\n';
__context__.push('(macro_inc@251)');
_strleft_rewind+=if_diff(((isNaN(('' + (array) + '.pos')*1))?('' + (array) + '.pos'):(('' + (array) + '.pos')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strleft_rewind+=__indent() +'#(end macro)if_diff ' + (array) + '.pos,    0' + '\n';
_strleft_rewind+=__indent() +'arotl ' + (array) + ' #@(macro_inc@252)'+ __context() + '\n';
__blockLevel__--;
_strleft_rewind+=__indent() +'else #@(macro_inc@253)'+ __context() + '\n';
__blockLevel__++;
_strleft_rewind+=__indent() +'#(begin macro)at_reset    __looprewind' + (_left_rewind) + '' + '\n';
__context__.push('(macro_inc@254)');
_strleft_rewind+=at_reset(((isNaN(('__looprewind' + (_left_rewind) + '')*1))?('__looprewind' + (_left_rewind) + ''):(('__looprewind' + (_left_rewind) + '')*1)));
__context__.pop();
_strleft_rewind+=__indent() +'#(end macro)at_reset    __looprewind' + (_left_rewind) + '' + '\n';
__blockLevel__--;
_strleft_rewind+=__indent() +'fi #@(macro_inc@255)'+ __context() + '\n';
__blockLevel__--;
_strleft_rewind+=__indent() +'wend #@(macro_inc@256)'+ __context() + '\n';
return _strleft_rewind;
}
_str_main+=__indent() +' #@(macro_inc@258)'+ __context() + '\n';
var _right_rewind; _right_rewind=0;
var right_rewind = function(array){
 _right_rewind++;
var _strright_rewind; 
_strright_rewind='';
if (typeof array == 'undefined') throw 'Parameter array is undefined in call of  macro right_rewind(array)[' + [array] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro right_rewind(array)[' + [array] +']';
_strright_rewind+=__indent() +'push ' + (array) + '.pos #@(macro_inc@260)'+ __context() + '\n';
_strright_rewind+=__indent() +'loop #@(macro_inc@261)'+ __context() + '\n';
__blockLevel__++;
_strright_rewind+=__indent() +'arotr ' + (array) + ' #@(macro_inc@262)'+ __context() + '\n';
__blockLevel__--;
_strright_rewind+=__indent() +'endloop #@(macro_inc@263)'+ __context() + '\n';
return _strright_rewind;
}
_str_main+=__indent() +' #@(macro_inc@265)'+ __context() + '\n';
_str_main+=__indent() +'# take value in stack #@(macro_inc@266)'+ __context() + '\n';
var _arraySet; _arraySet=0;
var arraySet = function(name, idx){
 _arraySet++;
var _strarraySet; 
_strarraySet='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro arraySet(name, idx)[' + [name, idx] +']';
if (typeof idx == 'undefined') throw 'Parameter idx is undefined in call of  macro arraySet(name, idx)[' + [name, idx] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro arraySet(name, idx)[' + [name, idx] +']';
_strarraySet+=__indent() +'sbm     asValue' + (_arraySet) + ' #@(macro_inc@268)'+ __context() + '\n';
_strarraySet+=__indent() +'push    ' + (name) + '.pos #@(macro_inc@269)'+ __context() + '\n';
_strarraySet+=__indent() +'push    ' + (idx) + ' #@(macro_inc@270)'+ __context() + '\n';
_strarraySet+=__indent() +'equal #@(macro_inc@271)'+ __context() + '\n';
_strarraySet+=__indent() +'if #@(macro_inc@272)'+ __context() + '\n';
__blockLevel__++;
_strarraySet+=__indent() +'push    asValue' + (_arraySet) + ' #@(macro_inc@273)'+ __context() + '\n';
_strarraySet+=__indent() +'pop     ' + (name) + ' #@(macro_inc@274)'+ __context() + '\n';
__blockLevel__--;
_strarraySet+=__indent() +'else #@(macro_inc@275)'+ __context() + '\n';
__blockLevel__++;
_strarraySet+=__indent() +'push    ' + (name) + '.pos #@(macro_inc@276)'+ __context() + '\n';
_strarraySet+=__indent() +'push    ' + (idx) + ' #@(macro_inc@277)'+ __context() + '\n';
_strarraySet+=__indent() +'sup #@(macro_inc@278)'+ __context() + '\n';
_strarraySet+=__indent() +'if #@(macro_inc@279)'+ __context() + '\n';
__blockLevel__++;
_strarraySet+=__indent() +'push    ' + (name) + '.pos #@(macro_inc@280)'+ __context() + '\n';
_strarraySet+=__indent() +'push    ' + (idx) + ' #@(macro_inc@281)'+ __context() + '\n';
_strarraySet+=__indent() +'sub #@(macro_inc@282)'+ __context() + '\n';
_strarraySet+=__indent() +'loop #@(macro_inc@283)'+ __context() + '\n';
__blockLevel__++;
_strarraySet+=__indent() +'arotr   ' + (name) + ' #@(macro_inc@284)'+ __context() + '\n';
__blockLevel__--;
_strarraySet+=__indent() +'endloop #@(macro_inc@285)'+ __context() + '\n';
_strarraySet+=__indent() +'push    asValue' + (_arraySet) + ' #@(macro_inc@286)'+ __context() + '\n';
_strarraySet+=__indent() +'pop     ' + (name) + ' #@(macro_inc@287)'+ __context() + '\n';
__blockLevel__--;
_strarraySet+=__indent() +'else #@(macro_inc@288)'+ __context() + '\n';
__blockLevel__++;
_strarraySet+=__indent() +'push    ' + (idx) + ' #@(macro_inc@289)'+ __context() + '\n';
_strarraySet+=__indent() +'push    ' + (name) + '.pos #@(macro_inc@290)'+ __context() + '\n';
_strarraySet+=__indent() +'sub #@(macro_inc@291)'+ __context() + '\n';
_strarraySet+=__indent() +'loop #@(macro_inc@292)'+ __context() + '\n';
__blockLevel__++;
_strarraySet+=__indent() +'arotl   ' + (name) + ' #@(macro_inc@293)'+ __context() + '\n';
__blockLevel__--;
_strarraySet+=__indent() +'endloop #@(macro_inc@294)'+ __context() + '\n';
_strarraySet+=__indent() +'push    asValue' + (_arraySet) + ' #@(macro_inc@295)'+ __context() + '\n';
_strarraySet+=__indent() +'pop     ' + (name) + ' #@(macro_inc@296)'+ __context() + '\n';
__blockLevel__--;
_strarraySet+=__indent() +'fi #@(macro_inc@297)'+ __context() + '\n';
__blockLevel__--;
_strarraySet+=__indent() +'fi #@(macro_inc@298)'+ __context() + '\n';
_strarraySet+=__indent() +'drop #@(macro_inc@299)'+ __context() + '\n';
return _strarraySet;
}
_str_main+=__indent() +' #@(macro_inc@301)'+ __context() + '\n';
_str_main+=__indent() +'# push value onto stack #@(macro_inc@302)'+ __context() + '\n';
var _arrayGet; _arrayGet=0;
var arrayGet = function(name, idx){
 _arrayGet++;
var _strarrayGet; 
_strarrayGet='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro arrayGet(name, idx)[' + [name, idx] +']';
if (typeof idx == 'undefined') throw 'Parameter idx is undefined in call of  macro arrayGet(name, idx)[' + [name, idx] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro arrayGet(name, idx)[' + [name, idx] +']';
_strarrayGet+=__indent() +'push    0 #@(macro_inc@304)'+ __context() + '\n';
_strarrayGet+=__indent() +'sbm     agValue' + (_arrayGet) + ' #@(macro_inc@305)'+ __context() + '\n';
_strarrayGet+=__indent() +'push    ' + (name) + '.pos #@(macro_inc@306)'+ __context() + '\n';
_strarrayGet+=__indent() +'push    ' + (idx) + ' #@(macro_inc@307)'+ __context() + '\n';
_strarrayGet+=__indent() +'equal #@(macro_inc@308)'+ __context() + '\n';
_strarrayGet+=__indent() +'if #@(macro_inc@309)'+ __context() + '\n';
__blockLevel__++;
_strarrayGet+=__indent() +'push    ' + (name) + ' #@(macro_inc@310)'+ __context() + '\n';
_strarrayGet+=__indent() +'pop     agValue' + (_arrayGet) + ' #@(macro_inc@311)'+ __context() + '\n';
__blockLevel__--;
_strarrayGet+=__indent() +'else #@(macro_inc@312)'+ __context() + '\n';
__blockLevel__++;
_strarrayGet+=__indent() +'push    ' + (name) + '.pos #@(macro_inc@313)'+ __context() + '\n';
_strarrayGet+=__indent() +'push    ' + (idx) + ' #@(macro_inc@314)'+ __context() + '\n';
_strarrayGet+=__indent() +'sup #@(macro_inc@315)'+ __context() + '\n';
_strarrayGet+=__indent() +'if #@(macro_inc@316)'+ __context() + '\n';
__blockLevel__++;
_strarrayGet+=__indent() +'push    ' + (name) + '.pos #@(macro_inc@317)'+ __context() + '\n';
_strarrayGet+=__indent() +'push    ' + (idx) + ' #@(macro_inc@318)'+ __context() + '\n';
_strarrayGet+=__indent() +'sub #@(macro_inc@319)'+ __context() + '\n';
_strarrayGet+=__indent() +'loop #@(macro_inc@320)'+ __context() + '\n';
__blockLevel__++;
_strarrayGet+=__indent() +'arotr   ' + (name) + ' #@(macro_inc@321)'+ __context() + '\n';
__blockLevel__--;
_strarrayGet+=__indent() +'endloop #@(macro_inc@322)'+ __context() + '\n';
_strarrayGet+=__indent() +'push     ' + (name) + ' #@(macro_inc@323)'+ __context() + '\n';
_strarrayGet+=__indent() +'pop      agValue' + (_arrayGet) + ' #@(macro_inc@324)'+ __context() + '\n';
__blockLevel__--;
_strarrayGet+=__indent() +'else #@(macro_inc@325)'+ __context() + '\n';
__blockLevel__++;
_strarrayGet+=__indent() +'push    ' + (idx) + ' #@(macro_inc@326)'+ __context() + '\n';
_strarrayGet+=__indent() +'push    ' + (name) + '.pos #@(macro_inc@327)'+ __context() + '\n';
_strarrayGet+=__indent() +'sub #@(macro_inc@328)'+ __context() + '\n';
_strarrayGet+=__indent() +'loop #@(macro_inc@329)'+ __context() + '\n';
__blockLevel__++;
_strarrayGet+=__indent() +'arotl   ' + (name) + ' #@(macro_inc@330)'+ __context() + '\n';
__blockLevel__--;
_strarrayGet+=__indent() +'endloop #@(macro_inc@331)'+ __context() + '\n';
_strarrayGet+=__indent() +'push     ' + (name) + ' #@(macro_inc@332)'+ __context() + '\n';
_strarrayGet+=__indent() +'pop      agValue' + (_arrayGet) + ' #@(macro_inc@333)'+ __context() + '\n';
__blockLevel__--;
_strarrayGet+=__indent() +'fi #@(macro_inc@334)'+ __context() + '\n';
__blockLevel__--;
_strarrayGet+=__indent() +'fi #@(macro_inc@335)'+ __context() + '\n';
return _strarrayGet;
}
_str_main+=__indent() +' #@(macro_inc@337)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@338)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@339)'+ __context() + '\n';
_str_main+=__indent() +'# macro popouthexa() : from head of stack value (from 0 to 15) write out hexa (from 0 to 9 and A to F) #@(macro_inc@340)'+ __context() + '\n';
var _popouthexa; _popouthexa=0;
var popouthexa = function(){
 _popouthexa++;
var _strpopouthexa; 
_strpopouthexa='';
if (arguments.length != 0) throw 'Too much arguments provided to macro popouthexa()[' + [] +']';
_strpopouthexa+=__indent() +'sbm     _input' + (_popouthexa) + ' #@(macro_inc@342)'+ __context() + '\n';
_strpopouthexa+=__indent() +'#(begin macro)if_sup  _input' + (_popouthexa) + ',    9' + '\n';
__context__.push('(macro_inc@343)');
_strpopouthexa+=if_sup(((isNaN(('_input' + (_popouthexa) + '')*1))?('_input' + (_popouthexa) + ''):(('_input' + (_popouthexa) + '')*1)),((isNaN(('9')*1))?('9'):(('9')*1)));
__context__.pop();
_strpopouthexa+=__indent() +'#(end macro)if_sup  _input' + (_popouthexa) + ',    9' + '\n';
_strpopouthexa+=__indent() +'#(begin macro)at_add("_input" + _popouthexa, "\'7\'")' + '\n';
__context__.push('(macro_inc@344)');
_strpopouthexa+=at_add("_input" + _popouthexa, "'7'");
__context__.pop();
_strpopouthexa+=__indent() +'#(end macro)at_add("_input" + _popouthexa, "\'7\'")' + '\n';
__blockLevel__--;
_strpopouthexa+=__indent() +'else #@(macro_inc@345)'+ __context() + '\n';
__blockLevel__++;
_strpopouthexa+=__indent() +'#(begin macro)at_add("_input" + _popouthexa, "\'0\'")' + '\n';
__context__.push('(macro_inc@346)');
_strpopouthexa+=at_add("_input" + _popouthexa, "'0'");
__context__.pop();
_strpopouthexa+=__indent() +'#(end macro)at_add("_input" + _popouthexa, "\'0\'")' + '\n';
__blockLevel__--;
_strpopouthexa+=__indent() +'fi #@(macro_inc@347)'+ __context() + '\n';
_strpopouthexa+=__indent() +'pop out #@(macro_inc@348)'+ __context() + '\n';
return _strpopouthexa;
}
_str_main+=__indent() +' #@(macro_inc@350)'+ __context() + '\n';
_str_main+=__indent() +'# macro popout8hexa() : from head of stack the 8 bit value is write out in hexa #@(macro_inc@351)'+ __context() + '\n';
var _popout8hexa; _popout8hexa=0;
var popout8hexa = function(){
 _popout8hexa++;
var _strpopout8hexa; 
_strpopout8hexa='';
if (arguments.length != 0) throw 'Too much arguments provided to macro popout8hexa()[' + [] +']';
_strpopout8hexa+=__indent() +'push    16 #@(macro_inc@353)'+ __context() + '\n';
_strpopout8hexa+=__indent() +'div #@(macro_inc@354)'+ __context() + '\n';
_strpopout8hexa+=__indent() +'#(begin macro)popouthexa # output most significant hexa character from head of stack value, then drop' + '\n';
__context__.push('(macro_inc@355)');
_strpopout8hexa+=popouthexa();
__context__.pop();
_strpopout8hexa+=__indent() +'#(end macro)popouthexa # output most significant hexa character from head of stack value, then drop' + '\n';
_strpopout8hexa+=__indent() +'#(begin macro)popouthexa # output less significant hexa character from head of stack value, then drop' + '\n';
__context__.push('(macro_inc@356)');
_strpopout8hexa+=popouthexa();
__context__.pop();
_strpopout8hexa+=__indent() +'#(end macro)popouthexa # output less significant hexa character from head of stack value, then drop' + '\n';
return _strpopout8hexa;
}
_str_main+=__indent() +' #@(macro_inc@358)'+ __context() + '\n';
var _writeDigit; _writeDigit=0;
var writeDigit = function(a){
 _writeDigit++;
var _strwriteDigit; 
_strwriteDigit='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro writeDigit(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro writeDigit(a)[' + [a] +']';
_strwriteDigit+=__indent() +'push    ' + (a) + ' #@(macro_inc@360)'+ __context() + '\n';
_strwriteDigit+=__indent() +'add     \'0\' #@(macro_inc@361)'+ __context() + '\n';
_strwriteDigit+=__indent() +'pop     out #@(macro_inc@362)'+ __context() + '\n';
return _strwriteDigit;
}
_str_main+=__indent() +' #@(macro_inc@364)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@365)'+ __context() + '\n';
var DECIMALSIZE;DECIMALSIZE='3'; DECIMALSIZE=(isNaN(DECIMALSIZE*1))?(DECIMALSIZE):(DECIMALSIZE*1); 
_str_main+=__indent() +'var __wbdoutput*' + (DECIMALSIZE) + ' #@(macro_inc@367)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@368)'+ __context() + '\n';
_str_main+=__indent() +'# a Byte in stack : output its decimal value #@(macro_inc@369)'+ __context() + '\n';
var _writeByteDecimal; _writeByteDecimal=0;
var writeByteDecimal = function(){
 _writeByteDecimal++;
var _strwriteByteDecimal; 
_strwriteByteDecimal='';
if (arguments.length != 0) throw 'Too much arguments provided to macro writeByteDecimal()[' + [] +']';
_strwriteByteDecimal+=__indent() +'sbm _wbdinput' + (_writeByteDecimal) + ' #@(macro_inc@371)'+ __context() + '\n';
_strwriteByteDecimal+=__indent() +'push ' + (DECIMALSIZE) + ' #@(macro_inc@372)'+ __context() + '\n';
_strwriteByteDecimal+=__indent() +'loop #@(macro_inc@373)'+ __context() + '\n';
__blockLevel__++;
_strwriteByteDecimal+=__indent() +'# output = input mod 10 ; input = input div 10 #@(macro_inc@374)'+ __context() + '\n';
_strwriteByteDecimal+=__indent() +'#(begin macro)divide  _wbdinput' + (_writeByteDecimal) + ',  10, _wbdinput' + (_writeByteDecimal) + ',  __wbdoutput' + '\n';
__context__.push('(macro_inc@375)');
_strwriteByteDecimal+=divide(((isNaN(('_wbdinput' + (_writeByteDecimal) + '')*1))?('_wbdinput' + (_writeByteDecimal) + ''):(('_wbdinput' + (_writeByteDecimal) + '')*1)),((isNaN(('10')*1))?('10'):(('10')*1)),((isNaN(('_wbdinput' + (_writeByteDecimal) + '')*1))?('_wbdinput' + (_writeByteDecimal) + ''):(('_wbdinput' + (_writeByteDecimal) + '')*1)),((isNaN(('__wbdoutput')*1))?('__wbdoutput'):(('__wbdoutput')*1)));
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)divide  _wbdinput' + (_writeByteDecimal) + ',  10, _wbdinput' + (_writeByteDecimal) + ',  __wbdoutput' + '\n';
_strwriteByteDecimal+=__indent() +'arotl __wbdoutput #@(macro_inc@376)'+ __context() + '\n';
__blockLevel__--;
_strwriteByteDecimal+=__indent() +'endloop #@(macro_inc@377)'+ __context() + '\n';
_strwriteByteDecimal+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(macro_inc@378)');
_strwriteByteDecimal+=scope_begin();
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)scope_begin' + '\n';
_strwriteByteDecimal+=__indent() +'#(begin macro)lvar    prefixzero' + (_writeByteDecimal) + ', 1' + '\n';
__context__.push('(macro_inc@379)');
_strwriteByteDecimal+=lvar(((isNaN(('prefixzero' + (_writeByteDecimal) + '')*1))?('prefixzero' + (_writeByteDecimal) + ''):(('prefixzero' + (_writeByteDecimal) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)lvar    prefixzero' + (_writeByteDecimal) + ', 1' + '\n';
_strwriteByteDecimal+=__indent() +'push    ' + (DECIMALSIZE) + ' #@(macro_inc@380)'+ __context() + '\n';
_strwriteByteDecimal+=__indent() +'sbm     __wbdcnt' + (_writeByteDecimal) + ' #@(macro_inc@381)'+ __context() + '\n';
_strwriteByteDecimal+=__indent() +'loop #@(macro_inc@382)'+ __context() + '\n';
__blockLevel__++;
_strwriteByteDecimal+=__indent() +'arotr   __wbdoutput #@(macro_inc@383)'+ __context() + '\n';
_strwriteByteDecimal+=__indent() +'#(begin macro)if_sup   __wbdcnt' + (_writeByteDecimal) + ',    1   # cnt == 3 or cnt == 2' + '\n';
__context__.push('(macro_inc@384)');
_strwriteByteDecimal+=if_sup(((isNaN(('__wbdcnt' + (_writeByteDecimal) + '')*1))?('__wbdcnt' + (_writeByteDecimal) + ''):(('__wbdcnt' + (_writeByteDecimal) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)if_sup   __wbdcnt' + (_writeByteDecimal) + ',    1   # cnt == 3 or cnt == 2' + '\n';
_strwriteByteDecimal+=__indent() +'#(begin macro)if_diff __wbdoutput, 0' + '\n';
__context__.push('(macro_inc@385)');
_strwriteByteDecimal+=if_diff(((isNaN(('__wbdoutput')*1))?('__wbdoutput'):(('__wbdoutput')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)if_diff __wbdoutput, 0' + '\n';
_strwriteByteDecimal+=__indent() +'#(begin macro)writeDigit  __wbdoutput' + '\n';
__context__.push('(macro_inc@386)');
_strwriteByteDecimal+=writeDigit(((isNaN(('__wbdoutput')*1))?('__wbdoutput'):(('__wbdoutput')*1)));
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)writeDigit  __wbdoutput' + '\n';
_strwriteByteDecimal+=__indent() +'#(begin macro)at_set  prefixzero' + (_writeByteDecimal) + ', 0' + '\n';
__context__.push('(macro_inc@387)');
_strwriteByteDecimal+=at_set(((isNaN(('prefixzero' + (_writeByteDecimal) + '')*1))?('prefixzero' + (_writeByteDecimal) + ''):(('prefixzero' + (_writeByteDecimal) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)at_set  prefixzero' + (_writeByteDecimal) + ', 0' + '\n';
__blockLevel__--;
_strwriteByteDecimal+=__indent() +'else #@(macro_inc@388)'+ __context() + '\n';
__blockLevel__++;
_strwriteByteDecimal+=__indent() +'#(begin macro)if_equal    prefixzero' + (_writeByteDecimal) + ', 0' + '\n';
__context__.push('(macro_inc@389)');
_strwriteByteDecimal+=if_equal(((isNaN(('prefixzero' + (_writeByteDecimal) + '')*1))?('prefixzero' + (_writeByteDecimal) + ''):(('prefixzero' + (_writeByteDecimal) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)if_equal    prefixzero' + (_writeByteDecimal) + ', 0' + '\n';
_strwriteByteDecimal+=__indent() +'#(begin macro)writeDigit  __wbdoutput' + '\n';
__context__.push('(macro_inc@390)');
_strwriteByteDecimal+=writeDigit(((isNaN(('__wbdoutput')*1))?('__wbdoutput'):(('__wbdoutput')*1)));
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)writeDigit  __wbdoutput' + '\n';
__blockLevel__--;
_strwriteByteDecimal+=__indent() +'fi #@(macro_inc@391)'+ __context() + '\n';
__blockLevel__--;
_strwriteByteDecimal+=__indent() +'fi #@(macro_inc@392)'+ __context() + '\n';
__blockLevel__--;
_strwriteByteDecimal+=__indent() +'else #@(macro_inc@393)'+ __context() + '\n';
__blockLevel__++;
_strwriteByteDecimal+=__indent() +'#(begin macro)writeDigit  __wbdoutput' + '\n';
__context__.push('(macro_inc@394)');
_strwriteByteDecimal+=writeDigit(((isNaN(('__wbdoutput')*1))?('__wbdoutput'):(('__wbdoutput')*1)));
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)writeDigit  __wbdoutput' + '\n';
__blockLevel__--;
_strwriteByteDecimal+=__indent() +'fi #@(macro_inc@395)'+ __context() + '\n';
__blockLevel__--;
_strwriteByteDecimal+=__indent() +'endloop #@(macro_inc@396)'+ __context() + '\n';
_strwriteByteDecimal+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(macro_inc@397)');
_strwriteByteDecimal+=scope_end();
__context__.pop();
_strwriteByteDecimal+=__indent() +'#(end macro)scope_end' + '\n';
_strwriteByteDecimal+=__indent() +'drop    # remove push #@(macro_inc@398)'+ __context() + '\n';
return _strwriteByteDecimal;
}
_str_main+=__indent() +' #@(macro_inc@400)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@401)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@402)'+ __context() + '\n';
_str_main+=__indent() +'# macro print(aString) : print out a string #@(macro_inc@403)'+ __context() + '\n';
var _print; _print=0;
var print = function(aString){
 _print++;
var _strprint; 
_strprint='';
if (typeof aString == 'undefined') throw 'Parameter aString is undefined in call of  macro print(aString)[' + [aString] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro print(aString)[' + [aString] +']';
_strprint+=__indent() +'push    0 #@(macro_inc@405)'+ __context() + '\n';
var __prev; __prev = 0;
for (var istr=0; istr < aString.length ; istr++) {
var __ascii; __ascii = aString[istr].charCodeAt(0);
var __move; __move = __ascii - __prev;
var __dist ; __dist = (__move > 0)?__move:-__move;
if (__dist < __ascii) { // shorter to move
if (__move > 0 ) {
_strprint+=__indent() +'add     ' + (__dist) + ' #@(macro_inc@413)'+ __context() + '\n';
} else {
if (__dist != 0) {
_strprint+=__indent() +'sub     ' + (__dist) + ' #@(macro_inc@416)'+ __context() + '\n';
}
}
} else {
_strprint+=__indent() +'set     ' + (__ascii) + ' #@(macro_inc@420)'+ __context() + '\n';
}
_strprint+=__indent() +'out             # ' + ((aString[istr].charCodeAt(0)>31?("\'"+aString[istr]+"\'"):"")) + ' #@(macro_inc@422)'+ __context() + '\n';
__prev  = __ascii;
}
_strprint+=__indent() +'drop #@(macro_inc@425)'+ __context() + '\n';
return _strprint;
}
_str_main+=__indent() +'#(end include)../../samples/include/macro.inc' + '\n';
_str_main+=__indent() +' #@(main@3)'+ __context() + '\n';
_str_main+=__indent() +'# basic macros test #@(main@4)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print ("Basic macro test.\\n\\n")' + '\n';
__context__.push('(main@5)');
_str_main+=print("Basic macro test.\n\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("Basic macro test.\\n\\n")' + '\n';
_str_main+=__indent() +'var m*10 #@(main@6)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@7)'+ __context() + '\n';
_str_main+=__indent() +'push    \'A\' #@(main@8)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arraySet    m,  0' + '\n';
__context__.push('(main@9)');
_str_main+=arraySet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arraySet    m,  0' + '\n';
_str_main+=__indent() +'push    \'B\' #@(main@10)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arraySet    m,  9' + '\n';
__context__.push('(main@11)');
_str_main+=arraySet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('9')*1))?('9'):(('9')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arraySet    m,  9' + '\n';
_str_main+=__indent() +'push    \'C\' #@(main@12)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arraySet    m,  1' + '\n';
__context__.push('(main@13)');
_str_main+=arraySet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arraySet    m,  1' + '\n';
_str_main+=__indent() +'push    \'D\' #@(main@14)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arraySet    m,  8' + '\n';
__context__.push('(main@15)');
_str_main+=arraySet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('8')*1))?('8'):(('8')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arraySet    m,  8' + '\n';
_str_main+=__indent() +'push    \'E\' #@(main@16)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arraySet    m,  2' + '\n';
__context__.push('(main@17)');
_str_main+=arraySet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('2')*1))?('2'):(('2')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arraySet    m,  2' + '\n';
_str_main+=__indent() +'push    \'F\' #@(main@18)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arraySet    m,  7' + '\n';
__context__.push('(main@19)');
_str_main+=arraySet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('7')*1))?('7'):(('7')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arraySet    m,  7' + '\n';
_str_main+=__indent() +'push    \'G\' #@(main@20)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arraySet    m,  3' + '\n';
__context__.push('(main@21)');
_str_main+=arraySet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('3')*1))?('3'):(('3')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arraySet    m,  3' + '\n';
_str_main+=__indent() +'push    \'H\' #@(main@22)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arraySet    m,  6' + '\n';
__context__.push('(main@23)');
_str_main+=arraySet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('6')*1))?('6'):(('6')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arraySet    m,  6' + '\n';
_str_main+=__indent() +'push    \'I\' #@(main@24)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arraySet    m,  4' + '\n';
__context__.push('(main@25)');
_str_main+=arraySet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('4')*1))?('4'):(('4')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arraySet    m,  4' + '\n';
_str_main+=__indent() +'push    \'J\' #@(main@26)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arraySet    m,  5' + '\n';
__context__.push('(main@27)');
_str_main+=arraySet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('5')*1))?('5'):(('5')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arraySet    m,  5' + '\n';
_str_main+=__indent() +' #@(main@28)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print "ACEGIJHFDB="' + '\n';
__context__.push('(main@29)');
_str_main+=print(((isNaN(('ACEGIJHFDB=')*1))?('ACEGIJHFDB='):(('ACEGIJHFDB=')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)print "ACEGIJHFDB="' + '\n';
_str_main+=__indent() +'#(begin macro)arrayGet    m, 0' + '\n';
__context__.push('(main@30)');
_str_main+=arrayGet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arrayGet    m, 0' + '\n';
_str_main+=__indent() +'pop     out #@(main@31)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arrayGet    m, 1' + '\n';
__context__.push('(main@32)');
_str_main+=arrayGet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arrayGet    m, 1' + '\n';
_str_main+=__indent() +'pop     out #@(main@33)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arrayGet    m, 2' + '\n';
__context__.push('(main@34)');
_str_main+=arrayGet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('2')*1))?('2'):(('2')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arrayGet    m, 2' + '\n';
_str_main+=__indent() +'pop     out #@(main@35)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arrayGet    m, 3' + '\n';
__context__.push('(main@36)');
_str_main+=arrayGet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('3')*1))?('3'):(('3')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arrayGet    m, 3' + '\n';
_str_main+=__indent() +'pop     out #@(main@37)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arrayGet    m, 4' + '\n';
__context__.push('(main@38)');
_str_main+=arrayGet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('4')*1))?('4'):(('4')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arrayGet    m, 4' + '\n';
_str_main+=__indent() +'pop     out #@(main@39)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arrayGet    m, 5' + '\n';
__context__.push('(main@40)');
_str_main+=arrayGet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('5')*1))?('5'):(('5')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arrayGet    m, 5' + '\n';
_str_main+=__indent() +'pop     out #@(main@41)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arrayGet    m, 6' + '\n';
__context__.push('(main@42)');
_str_main+=arrayGet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('6')*1))?('6'):(('6')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arrayGet    m, 6' + '\n';
_str_main+=__indent() +'pop     out #@(main@43)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arrayGet    m, 7' + '\n';
__context__.push('(main@44)');
_str_main+=arrayGet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('7')*1))?('7'):(('7')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arrayGet    m, 7' + '\n';
_str_main+=__indent() +'pop     out #@(main@45)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arrayGet    m, 8' + '\n';
__context__.push('(main@46)');
_str_main+=arrayGet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('8')*1))?('8'):(('8')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arrayGet    m, 8' + '\n';
_str_main+=__indent() +'pop     out #@(main@47)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)arrayGet    m, 9' + '\n';
__context__.push('(main@48)');
_str_main+=arrayGet(((isNaN(('m')*1))?('m'):(('m')*1)),((isNaN(('9')*1))?('9'):(('9')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)arrayGet    m, 9' + '\n';
_str_main+=__indent() +'pop     out #@(main@49)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@50)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@51)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(main@52)');
_str_main+=scope_begin();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_begin' + '\n';
_str_main+=__indent() +'#(begin macro)lvar a,10' + '\n';
__context__.push('(main@53)');
_str_main+=lvar(((isNaN(('a')*1))?('a'):(('a')*1)),((isNaN(('10')*1))?('10'):(('10')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar a,10' + '\n';
_str_main+=__indent() +'#(begin macro)lvar b,20' + '\n';
__context__.push('(main@54)');
_str_main+=lvar(((isNaN(('b')*1))?('b'):(('b')*1)),((isNaN(('20')*1))?('20'):(('20')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar b,20' + '\n';
_str_main+=__indent() +'#(begin macro)lvar c,30' + '\n';
__context__.push('(main@55)');
_str_main+=lvar(((isNaN(('c')*1))?('c'):(('c')*1)),((isNaN(('30')*1))?('30'):(('30')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar c,30' + '\n';
_str_main+=__indent() +'#(begin macro)lvar d,40' + '\n';
__context__.push('(main@56)');
_str_main+=lvar(((isNaN(('d')*1))?('d'):(('d')*1)),((isNaN(('40')*1))?('40'):(('40')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar d,40' + '\n';
_str_main+=__indent() +'#(begin macro)lvar f,20' + '\n';
__context__.push('(main@57)');
_str_main+=lvar(((isNaN(('f')*1))?('f'):(('f')*1)),((isNaN(('20')*1))?('20'):(('20')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar f,20' + '\n';
_str_main+=__indent() +' #@(main@58)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("  a = 10 : 0A == ")' + '\n';
__context__.push('(main@59)');
_str_main+=print("  a = 10 : 0A == ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("  a = 10 : 0A == ")' + '\n';
_str_main+=__indent() +'push    a #@(main@60)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)popout8hexa' + '\n';
__context__.push('(main@61)');
_str_main+=popout8hexa();
__context__.pop();
_str_main+=__indent() +'#(end macro)popout8hexa' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@62)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("  b = 20 : 14 == ")' + '\n';
__context__.push('(main@63)');
_str_main+=print("  b = 20 : 14 == ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("  b = 20 : 14 == ")' + '\n';
_str_main+=__indent() +'push    b #@(main@64)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)popout8hexa' + '\n';
__context__.push('(main@65)');
_str_main+=popout8hexa();
__context__.pop();
_str_main+=__indent() +'#(end macro)popout8hexa' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@66)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("  c = 30 : 1E == ")' + '\n';
__context__.push('(main@67)');
_str_main+=print("  c = 30 : 1E == ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("  c = 30 : 1E == ")' + '\n';
_str_main+=__indent() +'push    c #@(main@68)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)popout8hexa' + '\n';
__context__.push('(main@69)');
_str_main+=popout8hexa();
__context__.pop();
_str_main+=__indent() +'#(end macro)popout8hexa' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@70)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("  d = 40 : 28 == ")' + '\n';
__context__.push('(main@71)');
_str_main+=print("  d = 40 : 28 == ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("  d = 40 : 28 == ")' + '\n';
_str_main+=__indent() +'push    d #@(main@72)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)popout8hexa' + '\n';
__context__.push('(main@73)');
_str_main+=popout8hexa();
__context__.pop();
_str_main+=__indent() +'#(end macro)popout8hexa' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@74)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("  f = 20 : 14 == ")' + '\n';
__context__.push('(main@75)');
_str_main+=print("  f = 20 : 14 == ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("  f = 20 : 14 == ")' + '\n';
_str_main+=__indent() +'push    f #@(main@76)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)popout8hexa' + '\n';
__context__.push('(main@77)');
_str_main+=popout8hexa();
__context__.pop();
_str_main+=__indent() +'#(end macro)popout8hexa' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@78)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +' #@(main@79)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_diff(a,b) : if (a != b) { #@(main@80)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("if_diff\\n")' + '\n';
__context__.push('(main@81)');
_str_main+=print("if_diff\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("if_diff\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("   a diff b is true; ")' + '\n';
__context__.push('(main@82)');
_str_main+=print("   a diff b is true; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   a diff b is true; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_diff a,b' + '\n';
__context__.push('(main@83)');
_str_main+=if_diff(((isNaN(('a')*1))?('a'):(('a')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_diff a,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@84)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@85)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@86)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@87)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("   b diff f is false; ")' + '\n';
__context__.push('(main@88)');
_str_main+=print("   b diff f is false; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   b diff f is false; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_diff b,f' + '\n';
__context__.push('(main@89)');
_str_main+=if_diff(((isNaN(('b')*1))?('b'):(('b')*1)),((isNaN(('f')*1))?('f'):(('f')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_diff b,f' + '\n';
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@90)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@91)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@92)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@93)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@94)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_equal(a,b) : if (a == b) { #@(main@95)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("if_equal\\n")' + '\n';
__context__.push('(main@96)');
_str_main+=print("if_equal\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("if_equal\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("   a equal b is false; ")' + '\n';
__context__.push('(main@97)');
_str_main+=print("   a equal b is false; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   a equal b is false; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_equal a,b' + '\n';
__context__.push('(main@98)');
_str_main+=if_equal(((isNaN(('a')*1))?('a'):(('a')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal a,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@99)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@100)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@101)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@102)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("   b equal f is true; ")' + '\n';
__context__.push('(main@103)');
_str_main+=print("   b equal f is true; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   b equal f is true; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_equal b,f' + '\n';
__context__.push('(main@104)');
_str_main+=if_equal(((isNaN(('b')*1))?('b'):(('b')*1)),((isNaN(('f')*1))?('f'):(('f')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_equal b,f' + '\n';
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@105)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@106)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@107)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@108)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@109)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_sup(a,b) : if (a > b) { #@(main@110)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("if_sup\\n")' + '\n';
__context__.push('(main@111)');
_str_main+=print("if_sup\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("if_sup\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("   a sup b is false; ")' + '\n';
__context__.push('(main@112)');
_str_main+=print("   a sup b is false; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   a sup b is false; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_sup a,b' + '\n';
__context__.push('(main@113)');
_str_main+=if_sup(((isNaN(('a')*1))?('a'):(('a')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_sup a,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@114)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@115)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@116)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@117)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("   c sup b is true; ")' + '\n';
__context__.push('(main@118)');
_str_main+=print("   c sup b is true; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   c sup b is true; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_sup c,b' + '\n';
__context__.push('(main@119)');
_str_main+=if_sup(((isNaN(('c')*1))?('c'):(('c')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_sup c,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@120)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@121)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@122)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@123)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("   f sup b is false; ")' + '\n';
__context__.push('(main@124)');
_str_main+=print("   f sup b is false; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   f sup b is false; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_sup f,b' + '\n';
__context__.push('(main@125)');
_str_main+=if_sup(((isNaN(('f')*1))?('f'):(('f')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_sup f,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@126)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@127)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@128)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@129)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@130)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_inf(a,b) : if (a < b) { #@(main@131)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("if_inf\\n")' + '\n';
__context__.push('(main@132)');
_str_main+=print("if_inf\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("if_inf\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("   a inf b is true; ")' + '\n';
__context__.push('(main@133)');
_str_main+=print("   a inf b is true; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   a inf b is true; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_inf a,b' + '\n';
__context__.push('(main@134)');
_str_main+=if_inf(((isNaN(('a')*1))?('a'):(('a')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_inf a,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@135)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@136)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@137)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@138)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("   c inf b is false; ")' + '\n';
__context__.push('(main@139)');
_str_main+=print("   c inf b is false; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   c inf b is false; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_inf c,b' + '\n';
__context__.push('(main@140)');
_str_main+=if_inf(((isNaN(('c')*1))?('c'):(('c')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_inf c,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@141)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@142)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@143)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@144)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("   f inf b is false; ")' + '\n';
__context__.push('(main@145)');
_str_main+=print("   f inf b is false; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   f inf b is false; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_inf f,b' + '\n';
__context__.push('(main@146)');
_str_main+=if_inf(((isNaN(('f')*1))?('f'):(('f')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_inf f,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@147)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@148)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@149)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@150)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@151)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_supequal(a,b) : if (a >= b) { #@(main@152)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("if_supequal\\n")' + '\n';
__context__.push('(main@153)');
_str_main+=print("if_supequal\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("if_supequal\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("   a supequal b is false; ")' + '\n';
__context__.push('(main@154)');
_str_main+=print("   a supequal b is false; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   a supequal b is false; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_supequal a,b' + '\n';
__context__.push('(main@155)');
_str_main+=if_supequal(((isNaN(('a')*1))?('a'):(('a')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_supequal a,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@156)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@157)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@158)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@159)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("   c supequal b is true; ")' + '\n';
__context__.push('(main@160)');
_str_main+=print("   c supequal b is true; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   c supequal b is true; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_supequal c,b' + '\n';
__context__.push('(main@161)');
_str_main+=if_supequal(((isNaN(('c')*1))?('c'):(('c')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_supequal c,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@162)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@163)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@164)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@165)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("   f supequal b is true; ")' + '\n';
__context__.push('(main@166)');
_str_main+=print("   f supequal b is true; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   f supequal b is true; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_supequal f,b' + '\n';
__context__.push('(main@167)');
_str_main+=if_supequal(((isNaN(('f')*1))?('f'):(('f')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_supequal f,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@168)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@169)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@170)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@171)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@172)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_infequal(a,b) : if (a <= b) { #@(main@173)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("if_infequal\\n")' + '\n';
__context__.push('(main@174)');
_str_main+=print("if_infequal\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("if_infequal\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("   a infequal b is true; ")' + '\n';
__context__.push('(main@175)');
_str_main+=print("   a infequal b is true; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   a infequal b is true; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_infequal a,b' + '\n';
__context__.push('(main@176)');
_str_main+=if_infequal(((isNaN(('a')*1))?('a'):(('a')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_infequal a,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@177)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@178)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@179)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@180)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("   c infequal b is false; ")' + '\n';
__context__.push('(main@181)');
_str_main+=print("   c infequal b is false; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   c infequal b is false; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_infequal c,b' + '\n';
__context__.push('(main@182)');
_str_main+=if_infequal(((isNaN(('c')*1))?('c'):(('c')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_infequal c,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@183)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@184)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@185)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@186)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("   f infequal b is true; ")' + '\n';
__context__.push('(main@187)');
_str_main+=print("   f infequal b is true; ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("   f infequal b is true; ")' + '\n';
_str_main+=__indent() +'#(begin macro)if_infequal f,b' + '\n';
__context__.push('(main@188)');
_str_main+=if_infequal(((isNaN(('f')*1))?('f'):(('f')*1)),((isNaN(('b')*1))?('b'):(('b')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)if_infequal f,b' + '\n';
_str_main+=__indent() +'#(begin macro)print ("OK\\n")' + '\n';
__context__.push('(main@189)');
_str_main+=print("OK\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("OK\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@190)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)print ("BUG\\n")' + '\n';
__context__.push('(main@191)');
_str_main+=print("BUG\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print ("BUG\\n")' + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@192)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@193)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_reset(a) : a=0 #@(main@194)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_inc(a) : a++ #@(main@195)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_dec(a) : a-- #@(main@196)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_out(a) : write(a) #@(main@197)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_add(a,b) : a += b (immediate) #@(main@198)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_sub(a,b) : a -= b (immediate) #@(main@199)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_set(a,b) : a = b (immediate) #@(main@200)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@201)'+ __context() + '\n';
_str_main+=__indent() +'# macro write(a) : print out  variable/immediate 8 bits \'a\' #@(main@202)'+ __context() + '\n';
_str_main+=__indent() +'# macro divide(a,b,d,r) : d = a div b ; r = a mod b : 8 bits var or immediate \'a\' and \'b\' #@(main@203)'+ __context() + '\n';
_str_main+=__indent() +'# macro left_rewind(array) #@(main@204)'+ __context() + '\n';
_str_main+=__indent() +'# macro right_rewind(array) #@(main@205)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_end()' + '\n';
__context__.push('(main@206)');
_str_main+=scope_end();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_end()' + '\n';
_str_main+=__indent() +' #@(main@207)'+ __context() + '\n';
return _str_main;
}
_main();
