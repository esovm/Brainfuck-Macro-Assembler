var _main = function(){
var _str_main; 
_str_main='';
if (arguments.length != 0) throw 'Too much arguments provided to macro _main()[' + [] +']';
_str_main+='# Test 1' + '\n';
_str_main+='#(begin include)../../samples/include/macro.inc' + '\n';
_str_main+='# Common macros' + '\n';
_str_main+='# scope variables' + '\n';
_str_main+='#(js) var __scope; var __idx;' + '\n';
var __scope; var __idx;
_str_main+='#(js) __scope=[0]; __idx = 0;' + '\n';
__scope=[0]; __idx = 0;
_str_main+='' + '\n';
_str_main+='' + '\n';
_str_main+='# macro scope_begin : start a new scope for local variable (usage of macro lvar)' + '\n';
var scope_begin = function(){
var _strscope_begin; 
_strscope_begin='';
if (arguments.length != 0) throw 'Too much arguments provided to macro scope_begin()[' + [] +']';
_strscope_begin+='#(js) __scope.push(0);' + '\n';
__scope.push(0);
return _strscope_begin;
}
_str_main+='' + '\n';
_str_main+='# macro scope_end : end a scope , then drop scoped local variables (drop) (usage of lvar)' + '\n';
var scope_end = function(){
var _strscope_end; 
_strscope_end='';
if (arguments.length != 0) throw 'Too much arguments provided to macro scope_end()[' + [] +']';
_strscope_end+='#(js) if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {' + '\n';
if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
_strscope_end+='    drop' + '\n';
_strscope_end+='#(js) } ' + '\n';
} 
_strscope_end+='#(js) if (__scope.length > 0) __scope.splice(__scope.length-1, 1);' + '\n';
if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
return _strscope_end;
}
_str_main+='' + '\n';
_str_main+='# macro lvar(vname,value) : declare  in scope, a local variable named vname with an assigned value (stored in stack)' + '\n';
var lvar = function(vname,value){
var _strlvar; 
_strlvar='';
if (typeof vname == 'undefined') throw 'Parameter vname is undefined in call of  macro lvar(vname,value)[' + [vname,value] +']';
if (typeof value == 'undefined') throw 'Parameter value is undefined in call of  macro lvar(vname,value)[' + [vname,value] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro lvar(vname,value)[' + [vname,value] +']';
_strlvar+='    push ' + value + '' + '\n';
_strlvar+='    sbm ' + vname + '' + '\n';
_strlvar+='#(js) __scope[__scope.length-1]++; ' + '\n';
__scope[__scope.length-1]++; 
return _strlvar;
}
_str_main+='' + '\n';
_str_main+='# macro if_diff(a,b) : if (a != b) {' + '\n';
var if_diff = function(a,b){
var _strif_diff; 
_strif_diff='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_diff(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_diff(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_diff(a,b)[' + [a,b] +']';
_strif_diff+='    push ' + a + '' + '\n';
_strif_diff+='    push ' + b + '' + '\n';
_strif_diff+='    diff' + '\n';
_strif_diff+='    if' + '\n';
return _strif_diff;
}
_str_main+='' + '\n';
_str_main+='# macro if_equal(a,b) : if (a == b) {' + '\n';
var if_equal = function(a,b){
var _strif_equal; 
_strif_equal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_equal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_equal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_equal(a,b)[' + [a,b] +']';
_strif_equal+='    push ' + a + '' + '\n';
_strif_equal+='    push ' + b + '' + '\n';
_strif_equal+='    equal' + '\n';
_strif_equal+='    if' + '\n';
return _strif_equal;
}
_str_main+='' + '\n';
_str_main+='# macro if_sup(a,b) : if (a > b) {' + '\n';
var if_sup = function(a,b){
var _strif_sup; 
_strif_sup='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_sup(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_sup(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_sup(a,b)[' + [a,b] +']';
_strif_sup+='    push ' + a + '' + '\n';
_strif_sup+='    push ' + b + '' + '\n';
_strif_sup+='    sup' + '\n';
_strif_sup+='    if' + '\n';
return _strif_sup;
}
_str_main+='' + '\n';
_str_main+='# macro if_inf(a,b) : if (a < b) {' + '\n';
var if_inf = function(a,b){
var _strif_inf; 
_strif_inf='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_inf(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_inf(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_inf(a,b)[' + [a,b] +']';
_strif_inf+='    push ' + a + '' + '\n';
_strif_inf+='    push ' + b + '' + '\n';
_strif_inf+='    inf' + '\n';
_strif_inf+='    if' + '\n';
return _strif_inf;
}
_str_main+='' + '\n';
_str_main+='# macro if_supequal(a,b) : if (a >= b) {' + '\n';
var if_supequal = function(a,b){
var _strif_supequal; 
_strif_supequal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_supequal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_supequal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_supequal(a,b)[' + [a,b] +']';
_strif_supequal+='    push ' + a + '' + '\n';
_strif_supequal+='    push ' + b + '' + '\n';
_strif_supequal+='    inf' + '\n';
_strif_supequal+='    not' + '\n';
_strif_supequal+='    if' + '\n';
return _strif_supequal;
}
_str_main+='' + '\n';
_str_main+='# macro if_infequal(a,b) : if (a <= b) {' + '\n';
var if_infequal = function(a,b){
var _strif_infequal; 
_strif_infequal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_infequal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_infequal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_infequal(a,b)[' + [a,b] +']';
_strif_infequal+='    push ' + a + '' + '\n';
_strif_infequal+='    push ' + b + '' + '\n';
_strif_infequal+='    sup' + '\n';
_strif_infequal+='    not' + '\n';
_strif_infequal+='    if' + '\n';
return _strif_infequal;
}
_str_main+='' + '\n';
_str_main+='# macro at_2' + '\n';
var at_2 = function(ope, a,b){
var _strat_2; 
_strat_2='';
if (typeof ope == 'undefined') throw 'Parameter ope is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro at_2(ope, a,b)[' + [ope, a,b] +']';
_strat_2+='    at ' + a + '' + '\n';
_strat_2+='    ' + ope + ' ' + b + '' + '\n';
_strat_2+='    ta' + '\n';
return _strat_2;
}
_str_main+='' + '\n';
_str_main+='# macro at_1' + '\n';
var at_1 = function(ope, a){
var _strat_1; 
_strat_1='';
if (typeof ope == 'undefined') throw 'Parameter ope is undefined in call of  macro at_1(ope, a)[' + [ope, a] +']';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_1(ope, a)[' + [ope, a] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_1(ope, a)[' + [ope, a] +']';
_strat_1+='#(begin macro)    at_2(ope,a,"")' + '\n';
_strat_1+=at_2(ope,a,"");
_strat_1+='#(end macro)    at_2(ope,a,"")' + '\n';
return _strat_1;
}
_str_main+='' + '\n';
_str_main+='# macro at_reset(a) : a=0' + '\n';
var at_reset = function(a){
var _strat_reset; 
_strat_reset='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_reset(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_reset(a)[' + [a] +']';
_strat_reset+='#(begin macro)    at_1("reset",a)' + '\n';
_strat_reset+=at_1("reset",a);
_strat_reset+='#(end macro)    at_1("reset",a)' + '\n';
return _strat_reset;
}
_str_main+='' + '\n';
_str_main+='# macro at_inc(a) : a++' + '\n';
var at_inc = function(a){
var _strat_inc; 
_strat_inc='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_inc(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_inc(a)[' + [a] +']';
_strat_inc+='#(begin macro)    at_1("inc",a)' + '\n';
_strat_inc+=at_1("inc",a);
_strat_inc+='#(end macro)    at_1("inc",a)' + '\n';
return _strat_inc;
}
_str_main+='' + '\n';
_str_main+='# macro at_dec(a) : a--' + '\n';
var at_dec = function(a){
var _strat_dec; 
_strat_dec='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_dec(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_dec(a)[' + [a] +']';
_strat_dec+='#(begin macro)    at_1("dec",a)' + '\n';
_strat_dec+=at_1("dec",a);
_strat_dec+='#(end macro)    at_1("dec",a)' + '\n';
return _strat_dec;
}
_str_main+='' + '\n';
_str_main+='# macro at_in(a)  : a= readchar()' + '\n';
var at_in = function(a){
var _strat_in; 
_strat_in='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_in(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_in(a)[' + [a] +']';
_strat_in+='#(begin macro)    at_1("in",a)' + '\n';
_strat_in+=at_1("in",a);
_strat_in+='#(end macro)    at_1("in",a)' + '\n';
return _strat_in;
}
_str_main+='' + '\n';
_str_main+='# macro at_out(a) : write(a)' + '\n';
var at_out = function(a){
var _strat_out; 
_strat_out='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_out(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_out(a)[' + [a] +']';
_strat_out+='#(begin macro)    at_1("out",a)' + '\n';
_strat_out+=at_1("out",a);
_strat_out+='#(end macro)    at_1("out",a)' + '\n';
return _strat_out;
}
_str_main+='' + '\n';
_str_main+='# macro at_add(a,b) : a += b (immediate)' + '\n';
var at_add = function(a,b){
var _strat_add; 
_strat_add='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_add(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_add(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_add(a,b)[' + [a,b] +']';
_strat_add+='#(begin macro)    at_2("add",a,b)' + '\n';
_strat_add+=at_2("add",a,b);
_strat_add+='#(end macro)    at_2("add",a,b)' + '\n';
return _strat_add;
}
_str_main+='' + '\n';
_str_main+='# macro at_sub(a,b) : a -= b (immediate)' + '\n';
var at_sub = function(a,b){
var _strat_sub; 
_strat_sub='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_sub(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_sub(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_sub(a,b)[' + [a,b] +']';
_strat_sub+='#(begin macro)    at_2("sub",a,b)' + '\n';
_strat_sub+=at_2("sub",a,b);
_strat_sub+='#(end macro)    at_2("sub",a,b)' + '\n';
return _strat_sub;
}
_str_main+='' + '\n';
_str_main+='# macro at_set(a,b) : a = b (immediate)' + '\n';
var at_set = function(a,b){
var _strat_set; 
_strat_set='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_set(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_set(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_set(a,b)[' + [a,b] +']';
_strat_set+='#(begin macro)    at_2("set",a,b)' + '\n';
_strat_set+=at_2("set",a,b);
_strat_set+='#(end macro)    at_2("set",a,b)' + '\n';
return _strat_set;
}
_str_main+='' + '\n';
var write = function(a){
var _strwrite; 
_strwrite='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro write(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro write(a)[' + [a] +']';
_strwrite+='    push    ' + a + '' + '\n';
_strwrite+='    pop     out' + '\n';
return _strwrite;
}
_str_main+='' + '\n';
var divide = function(a,b,d,r){
var _strdivide; 
_strdivide='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof d == 'undefined') throw 'Parameter d is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof r == 'undefined') throw 'Parameter r is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (arguments.length != 4) throw 'Too much arguments provided to macro divide(a,b,d,r)[' + [a,b,d,r] +']';
_strdivide+='    push ' + a + '' + '\n';
_strdivide+='    push ' + b + '' + '\n';
_strdivide+='    div' + '\n';
_strdivide+='    pop ' + d + '' + '\n';
_strdivide+='    pop ' + r + '' + '\n';
return _strdivide;
}
_str_main+='' + '\n';
var left_rewind = function(array){
var _strleft_rewind; 
_strleft_rewind='';
if (typeof array == 'undefined') throw 'Parameter array is undefined in call of  macro left_rewind(array)[' + [array] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro left_rewind(array)[' + [array] +']';
_strleft_rewind+='    push 1' + '\n';
_strleft_rewind+='    sbm __looprewind' + '\n';
_strleft_rewind+='    while' + '\n';
_strleft_rewind+='#(begin macro)        if_diff("' + array + '.pos",0)' + '\n';
_strleft_rewind+=if_diff("array.pos",0);
_strleft_rewind+='#(end macro)        if_diff("' + array + '.pos",0)' + '\n';
_strleft_rewind+='            arotl ' + array + '' + '\n';
_strleft_rewind+='        else' + '\n';
_strleft_rewind+='#(begin macro)            at_reset("__looprewind")' + '\n';
_strleft_rewind+=at_reset("__looprewind");
_strleft_rewind+='#(end macro)            at_reset("__looprewind")' + '\n';
_strleft_rewind+='        fi' + '\n';
_strleft_rewind+='    wend' + '\n';
return _strleft_rewind;
}
_str_main+='' + '\n';
var right_rewind = function(array){
var _strright_rewind; 
_strright_rewind='';
if (typeof array == 'undefined') throw 'Parameter array is undefined in call of  macro right_rewind(array)[' + [array] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro right_rewind(array)[' + [array] +']';
_strright_rewind+='    push ' + array + '.pos' + '\n';
_strright_rewind+='    loop' + '\n';
_strright_rewind+='        arotr ' + array + '' + '\n';
_strright_rewind+='    endloop' + '\n';
return _strright_rewind;
}
_str_main+='' + '\n';
_str_main+='# macro popouthexa() : from head of stack value (from 0 to 15) write out hexa (from 0 to 9 and A to F)' + '\n';
var popouthexa = function(){
var _strpopouthexa; 
_strpopouthexa='';
if (arguments.length != 0) throw 'Too much arguments provided to macro popouthexa()[' + [] +']';
_strpopouthexa+='#(js) __idx++;' + '\n';
__idx++;
_strpopouthexa+='    sbm _input' + __idx + '' + '\n';
_strpopouthexa+='#(begin macro)    if_sup("_input" + __idx,9)' + '\n';
_strpopouthexa+=if_sup("_input" + __idx,9);
_strpopouthexa+='#(end macro)    if_sup("_input" + __idx,9)' + '\n';
_strpopouthexa+='#(begin macro)        at_add("_input" + __idx, "\'7\'")' + '\n';
_strpopouthexa+=at_add("_input" + __idx, "'7'");
_strpopouthexa+='#(end macro)        at_add("_input" + __idx, "\'7\'")' + '\n';
_strpopouthexa+='    else' + '\n';
_strpopouthexa+='#(begin macro)        at_add("_input" + __idx, "\'0\'")' + '\n';
_strpopouthexa+=at_add("_input" + __idx, "'0'");
_strpopouthexa+='#(end macro)        at_add("_input" + __idx, "\'0\'")' + '\n';
_strpopouthexa+='    fi' + '\n';
_strpopouthexa+='    pop out' + '\n';
return _strpopouthexa;
}
_str_main+='' + '\n';
_str_main+='# macro popout8hexa() : from head of stack the 8 bit value is write out in hexa' + '\n';
var popout8hexa = function(){
var _strpopout8hexa; 
_strpopout8hexa='';
if (arguments.length != 0) throw 'Too much arguments provided to macro popout8hexa()[' + [] +']';
_strpopout8hexa+='    push    16' + '\n';
_strpopout8hexa+='    div' + '\n';
_strpopout8hexa+='#(begin macro)    popouthexa() # output most significant hexa character from head of stack value, then drop' + '\n';
_strpopout8hexa+=popouthexa();
_strpopout8hexa+='#(end macro)    popouthexa() # output most significant hexa character from head of stack value, then drop' + '\n';
_strpopout8hexa+='#(begin macro)    popouthexa() # output less significant hexa character from head of stack value, then drop' + '\n';
_strpopout8hexa+=popouthexa();
_strpopout8hexa+='#(end macro)    popouthexa() # output less significant hexa character from head of stack value, then drop' + '\n';
return _strpopout8hexa;
}
_str_main+='' + '\n';
_str_main+='# macro print(aString) : print out a string' + '\n';
var print = function(aString){
var _strprint; 
_strprint='';
if (typeof aString == 'undefined') throw 'Parameter aString is undefined in call of  macro print(aString)[' + [aString] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro print(aString)[' + [aString] +']';
_strprint+='    push    0' + '\n';
_strprint+='#(js) var __prev; __prev = 0;' + '\n';
var __prev; __prev = 0;
_strprint+='#(js) for (var istr=0; istr < aString.length ; istr++) {' + '\n';
for (var istr=0; istr < aString.length ; istr++) {
_strprint+='#(js) var __ascii; __ascii = aString[istr].charCodeAt(0);' + '\n';
var __ascii; __ascii = aString[istr].charCodeAt(0);
_strprint+='#(js) var __move; __move = __ascii - __prev;' + '\n';
var __move; __move = __ascii - __prev;
_strprint+='#(js) var __dist ; __dist = (__move > 0)?__move:-__move;' + '\n';
var __dist ; __dist = (__move > 0)?__move:-__move;
_strprint+='#(js) if (__dist < __ascii) { // shorter to move' + '\n';
if (__dist < __ascii) { // shorter to move
_strprint+='#(js) if (__move > 0 ) {' + '\n';
if (__move > 0 ) {
_strprint+='    add     ' + __dist + '   ' + '\n';
_strprint+='#(js) } else {' + '\n';
} else {
_strprint+='#(js) if (__dist != 0) {' + '\n';
if (__dist != 0) {
_strprint+='    sub     ' + __dist + '   ' + '\n';
_strprint+='#(js) }' + '\n';
}
_strprint+='#(js) }' + '\n';
}
_strprint+='#(js) } else {' + '\n';
} else {
_strprint+='    set     ' + __ascii + '    ' + '\n';
_strprint+='#(js) }' + '\n';
}
_strprint+='    out             # ' + (aString[istr].charCodeAt(0)>31?("\'"+aString[istr]+"\'"):"") + '' + '\n';
_strprint+='#(js) __prev  = __ascii;' + '\n';
__prev  = __ascii;
_strprint+='#(js) }' + '\n';
}
_strprint+='    drop' + '\n';
return _strprint;
}
_str_main+='#(end include)../../samples/include/macro.inc' + '\n';
_str_main+='' + '\n';
_str_main+='# basic operation test' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("Basic operation test.\\n\\n")' + '\n';
_str_main+=print("Basic operation test.\n\n");
_str_main+='#(end macro)print("Basic operation test.\\n\\n")' + '\n';
_str_main+='#(begin macro)print("ADD an immediate\\n")' + '\n';
_str_main+=print("ADD an immediate\n");
_str_main+='#(end macro)print("ADD an immediate\\n")' + '\n';
_str_main+='push    1' + '\n';
_str_main+='add     3' + '\n';
_str_main+='#(begin macro)print(" push 1; add 3 ; 04 == ")' + '\n';
_str_main+=print(" push 1; add 3 ; 04 == ");
_str_main+='#(end macro)print(" push 1; add 3 ; 04 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("ADD two 8 bits in stack\\n")' + '\n';
_str_main+=print("ADD two 8 bits in stack\n");
_str_main+='#(end macro)print("ADD two 8 bits in stack\\n")' + '\n';
_str_main+='push    2' + '\n';
_str_main+='push    5' + '\n';
_str_main+='add' + '\n';
_str_main+='#(begin macro)print(" push 2; push 5 ; add ;  07 == ")' + '\n';
_str_main+=print(" push 2; push 5 ; add ;  07 == ");
_str_main+='#(end macro)print(" push 2; push 5 ; add ;  07 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='push    253' + '\n';
_str_main+='push    5' + '\n';
_str_main+='add' + '\n';
_str_main+='#(begin macro)print(" push 253; push 5 ; add ;  02 == ")' + '\n';
_str_main+=print(" push 253; push 5 ; add ;  02 == ");
_str_main+='#(end macro)print(" push 253; push 5 ; add ;  02 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("AND two boolean 8 bits in stack\\n")' + '\n';
_str_main+=print("AND two boolean 8 bits in stack\n");
_str_main+='#(end macro)print("AND two boolean 8 bits in stack\\n")' + '\n';
_str_main+='push    2' + '\n';
_str_main+='push    5' + '\n';
_str_main+='and' + '\n';
_str_main+='#(begin macro)print(" push 2; push 5 ; and ;  01 == ")' + '\n';
_str_main+=print(" push 2; push 5 ; and ;  01 == ");
_str_main+='#(end macro)print(" push 2; push 5 ; and ;  01 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='push    1' + '\n';
_str_main+='push    1' + '\n';
_str_main+='and' + '\n';
_str_main+='#(begin macro)print(" push 1; push 1 ; and ;  01 == ")' + '\n';
_str_main+=print(" push 1; push 1 ; and ;  01 == ");
_str_main+='#(end macro)print(" push 1; push 1 ; and ;  01 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='push    0' + '\n';
_str_main+='push    1' + '\n';
_str_main+='and' + '\n';
_str_main+='#(begin macro)print(" push 0; push 1 ; and ;  00 == ")' + '\n';
_str_main+=print(" push 0; push 1 ; and ;  00 == ");
_str_main+='#(end macro)print(" push 0; push 1 ; and ;  00 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='push    1' + '\n';
_str_main+='push    0' + '\n';
_str_main+='and' + '\n';
_str_main+='#(begin macro)print(" push 1; push 0 ; and ;  00 == ")' + '\n';
_str_main+=print(" push 1; push 0 ; and ;  00 == ");
_str_main+='#(end macro)print(" push 1; push 0 ; and ;  00 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("AROTL rotate array\\n")' + '\n';
_str_main+=print("AROTL rotate array\n");
_str_main+='#(end macro)print("AROTL rotate array\\n")' + '\n';
_str_main+='var grot1*3' + '\n';
_str_main+='push 1' + '\n';
_str_main+='pop grot1' + '\n';
_str_main+='arotl grot1' + '\n';
_str_main+='push 2' + '\n';
_str_main+='pop grot1' + '\n';
_str_main+='arotl grot1' + '\n';
_str_main+='push 3' + '\n';
_str_main+='pop grot1' + '\n';
_str_main+='arotl grot1' + '\n';
_str_main+='#(begin macro)print("  01 02 03 == ")' + '\n';
_str_main+=print("  01 02 03 == ");
_str_main+='#(end macro)print("  01 02 03 == ")' + '\n';
_str_main+='push 3' + '\n';
_str_main+='loop' + '\n';
_str_main+='    push grot1' + '\n';
_str_main+='#(begin macro)    popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)    popout8hexa()' + '\n';
_str_main+='#(begin macro)    print(" ") ' + '\n';
_str_main+=print(" ");
_str_main+='#(end macro)    print(" ") ' + '\n';
_str_main+='    arotl grot1' + '\n';
_str_main+='endloop' + '\n';
_str_main+='#(begin macro)print("\\n")    ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")    ' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("AROTR rotate array\\n")' + '\n';
_str_main+=print("AROTR rotate array\n");
_str_main+='#(end macro)print("AROTR rotate array\\n")' + '\n';
_str_main+='var grot2*3' + '\n';
_str_main+='push 1' + '\n';
_str_main+='pop grot2' + '\n';
_str_main+='arotr grot2' + '\n';
_str_main+='push 2' + '\n';
_str_main+='pop grot2' + '\n';
_str_main+='arotr grot2' + '\n';
_str_main+='push 3' + '\n';
_str_main+='pop grot2' + '\n';
_str_main+='arotr grot2' + '\n';
_str_main+='#(begin macro)print("  01 02 03 == ")' + '\n';
_str_main+=print("  01 02 03 == ");
_str_main+='#(end macro)print("  01 02 03 == ")' + '\n';
_str_main+='push 3' + '\n';
_str_main+='loop' + '\n';
_str_main+='    push grot2' + '\n';
_str_main+='#(begin macro)    popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)    popout8hexa()' + '\n';
_str_main+='#(begin macro)    print(" ") ' + '\n';
_str_main+=print(" ");
_str_main+='#(end macro)    print(" ") ' + '\n';
_str_main+='    arotr grot2' + '\n';
_str_main+='endloop' + '\n';
_str_main+='#(begin macro)print("\\n")    ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")    ' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("AT / TA at variable action\\n")' + '\n';
_str_main+=print("AT / TA at variable action\n");
_str_main+='#(end macro)print("AT / TA at variable action\\n")' + '\n';
_str_main+='var gvar2' + '\n';
_str_main+='at gvar2' + '\n';
_str_main+='    set 9' + '\n';
_str_main+='ta' + '\n';
_str_main+='push gvar2' + '\n';
_str_main+='#(begin macro)print("  09 == ")' + '\n';
_str_main+=print("  09 == ");
_str_main+='#(end macro)print("  09 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("BF inline BF actions\\n")' + '\n';
_str_main+=print("BF inline BF actions\n");
_str_main+='#(end macro)print("BF inline BF actions\\n")' + '\n';
_str_main+='#(begin macro)print("  09 == ")' + '\n';
_str_main+=print("  09 == ");
_str_main+='#(end macro)print("  09 == ")' + '\n';
_str_main+='push    0' + '\n';
_str_main+='bf  +++++++++' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("BOOL transform stack value to 0 or 1\\n")' + '\n';
_str_main+=print("BOOL transform stack value to 0 or 1\n");
_str_main+='#(end macro)print("BOOL transform stack value to 0 or 1\\n")' + '\n';
_str_main+='#(begin macro)print("  10 : 01 == ")' + '\n';
_str_main+=print("  10 : 01 == ");
_str_main+='#(end macro)print("  10 : 01 == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='bool' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print("  255 : 01 == ")' + '\n';
_str_main+=print("  255 : 01 == ");
_str_main+='#(end macro)print("  255 : 01 == ")' + '\n';
_str_main+='push 255' + '\n';
_str_main+='bool' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print("  0 : 00 == ")' + '\n';
_str_main+=print("  0 : 00 == ");
_str_main+='#(end macro)print("  0 : 00 == ")' + '\n';
_str_main+='push 0' + '\n';
_str_main+='bool' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("DEC , decrement head of stack value\\n")' + '\n';
_str_main+=print("DEC , decrement head of stack value\n");
_str_main+='#(end macro)print("DEC , decrement head of stack value\\n")' + '\n';
_str_main+='#(begin macro)print(" 10 - 1 : 09 == ")' + '\n';
_str_main+=print(" 10 - 1 : 09 == ");
_str_main+='#(end macro)print(" 10 - 1 : 09 == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='dec' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("DIFF , 2 value in stack are different\\n")' + '\n';
_str_main+=print("DIFF , 2 value in stack are different\n");
_str_main+='#(end macro)print("DIFF , 2 value in stack are different\\n")' + '\n';
_str_main+='#(begin macro)print(" 10 <> 10 : 00 == ")' + '\n';
_str_main+=print(" 10 <> 10 : 00 == ");
_str_main+='#(end macro)print(" 10 <> 10 : 00 == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='push 10' + '\n';
_str_main+='diff' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print(" 10 <> 8 : 01 == ")' + '\n';
_str_main+=print(" 10 <> 8 : 01 == ");
_str_main+='#(end macro)print(" 10 <> 8 : 01 == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='push 8' + '\n';
_str_main+='diff' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("DIV , div 2 value in stack\\n")' + '\n';
_str_main+=print("DIV , div 2 value in stack\n");
_str_main+='#(end macro)print("DIV , div 2 value in stack\\n")' + '\n';
_str_main+='#(begin macro)print("  5 div 2 = 2 ; 02 == ")' + '\n';
_str_main+=print("  5 div 2 = 2 ; 02 == ");
_str_main+='#(end macro)print("  5 div 2 = 2 ; 02 == ")' + '\n';
_str_main+='push 5' + '\n';
_str_main+='push 2' + '\n';
_str_main+='div' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print("  5 mod 2 = 1 ; 01 == ")' + '\n';
_str_main+=print("  5 mod 2 = 1 ; 01 == ");
_str_main+='#(end macro)print("  5 mod 2 = 1 ; 01 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("DROP, drop a value in stack\\n")' + '\n';
_str_main+=print("DROP, drop a value in stack\n");
_str_main+='#(end macro)print("DROP, drop a value in stack\\n")' + '\n';
_str_main+='push 8' + '\n';
_str_main+='push 5' + '\n';
_str_main+='drop' + '\n';
_str_main+='#(begin macro)print (" push 8; push 5 ; drop  ; 08 == ")' + '\n';
_str_main+=print(" push 8; push 5 ; drop  ; 08 == ");
_str_main+='#(end macro)print (" push 8; push 5 ; drop  ; 08 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("DUP,  duplicate head of stack value\\n")' + '\n';
_str_main+=print("DUP,  duplicate head of stack value\n");
_str_main+='#(end macro)print("DUP,  duplicate head of stack value\\n")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='dup' + '\n';
_str_main+='#(begin macro)print(" push 10; dup ;  0A == ")' + '\n';
_str_main+=print(" push 10; dup ;  0A == ");
_str_main+='#(end macro)print(" push 10; dup ;  0A == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print(" then... drop once ; 0A == ")' + '\n';
_str_main+=print(" then... drop once ; 0A == ");
_str_main+='#(end macro)print(" then... drop once ; 0A == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("EQUAL , 2 value in stack are equal\\n")' + '\n';
_str_main+=print("EQUAL , 2 value in stack are equal\n");
_str_main+='#(end macro)print("EQUAL , 2 value in stack are equal\\n")' + '\n';
_str_main+='#(begin macro)print(" 10 == 10 : 01 == ")' + '\n';
_str_main+=print(" 10 == 10 : 01 == ");
_str_main+='#(end macro)print(" 10 == 10 : 01 == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='push 10' + '\n';
_str_main+='equal' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print(" 255 == 255 : 01 == ")' + '\n';
_str_main+=print(" 255 == 255 : 01 == ");
_str_main+='#(end macro)print(" 255 == 255 : 01 == ")' + '\n';
_str_main+='push 255' + '\n';
_str_main+='push 255' + '\n';
_str_main+='equal' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print(" 0 == 0 : 01 == ")' + '\n';
_str_main+=print(" 0 == 0 : 01 == ");
_str_main+='#(end macro)print(" 0 == 0 : 01 == ")' + '\n';
_str_main+='push 0' + '\n';
_str_main+='push 0' + '\n';
_str_main+='equal' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print(" 10 == 8 : 00 == ")' + '\n';
_str_main+=print(" 10 == 8 : 00 == ");
_str_main+='#(end macro)print(" 10 == 8 : 00 == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='push 8' + '\n';
_str_main+='equal' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("IF/FI IF/ELSE/FI ...\\n")' + '\n';
_str_main+=print("IF/FI IF/ELSE/FI ...\n");
_str_main+='#(end macro)print("IF/FI IF/ELSE/FI ...\\n")' + '\n';
_str_main+='push 1' + '\n';
_str_main+='if' + '\n';
_str_main+='    push 1' + '\n';
_str_main+='#(begin macro)    print("   01 == ")' + '\n';
_str_main+=print("   01 == ");
_str_main+='#(end macro)    print("   01 == ")' + '\n';
_str_main+='#(begin macro)    popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)    popout8hexa()' + '\n';
_str_main+='#(begin macro)    print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)    print("\\n")' + '\n';
_str_main+='fi' + '\n';
_str_main+='push 255' + '\n';
_str_main+='if' + '\n';
_str_main+='    push 255' + '\n';
_str_main+='#(begin macro)    print("   FF == ")' + '\n';
_str_main+=print("   FF == ");
_str_main+='#(end macro)    print("   FF == ")' + '\n';
_str_main+='#(begin macro)    popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)    popout8hexa()' + '\n';
_str_main+='#(begin macro)    print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)    print("\\n")' + '\n';
_str_main+='else' + '\n';
_str_main+='#(begin macro)    print("  BUG 255 !!!\\n")    ' + '\n';
_str_main+=print("  BUG 255 !!!\n");
_str_main+='#(end macro)    print("  BUG 255 !!!\\n")    ' + '\n';
_str_main+='fi' + '\n';
_str_main+='push 0' + '\n';
_str_main+='if' + '\n';
_str_main+='#(begin macro)    print("  BUG 0 !!!\\n")' + '\n';
_str_main+=print("  BUG 0 !!!\n");
_str_main+='#(end macro)    print("  BUG 0 !!!\\n")' + '\n';
_str_main+='else' + '\n';
_str_main+='    push 0' + '\n';
_str_main+='#(begin macro)    print("   00 == ")' + '\n';
_str_main+=print("   00 == ");
_str_main+='#(end macro)    print("   00 == ")' + '\n';
_str_main+='#(begin macro)    popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)    popout8hexa()' + '\n';
_str_main+='#(begin macro)    print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)    print("\\n")' + '\n';
_str_main+='fi' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("INC , decrement head of stack value\\n")' + '\n';
_str_main+=print("INC , decrement head of stack value\n");
_str_main+='#(end macro)print("INC , decrement head of stack value\\n")' + '\n';
_str_main+='#(begin macro)print(" 10 + 1 : 0B == ")' + '\n';
_str_main+=print(" 10 + 1 : 0B == ");
_str_main+='#(end macro)print(" 10 + 1 : 0B == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='inc' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("INF , value in stack -1 less than stack\\n")' + '\n';
_str_main+=print("INF , value in stack -1 less than stack\n");
_str_main+='#(end macro)print("INF , value in stack -1 less than stack\\n")' + '\n';
_str_main+='#(begin macro)print(" 10 < 10 : 00 == ")' + '\n';
_str_main+=print(" 10 < 10 : 00 == ");
_str_main+='#(end macro)print(" 10 < 10 : 00 == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='push 10' + '\n';
_str_main+='inf' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print(" 8 < 10 : 01 == ")' + '\n';
_str_main+=print(" 8 < 10 : 01 == ");
_str_main+='#(end macro)print(" 8 < 10 : 01 == ")' + '\n';
_str_main+='push 8' + '\n';
_str_main+='push 10' + '\n';
_str_main+='inf' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print(" 0 < 255 : 01 == ")' + '\n';
_str_main+=print(" 0 < 255 : 01 == ");
_str_main+='#(end macro)print(" 0 < 255 : 01 == ")' + '\n';
_str_main+='push 0' + '\n';
_str_main+='push 255' + '\n';
_str_main+='inf' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("LOOP/ENDLOOP  repeated loop\\n")' + '\n';
_str_main+=print("LOOP/ENDLOOP  repeated loop\n");
_str_main+='#(end macro)print("LOOP/ENDLOOP  repeated loop\\n")' + '\n';
_str_main+='#(begin macro)print("  03 02 01 == ")' + '\n';
_str_main+=print("  03 02 01 == ");
_str_main+='#(end macro)print("  03 02 01 == ")' + '\n';
_str_main+='push 3' + '\n';
_str_main+='sbm loop' + '\n';
_str_main+='loop' + '\n';
_str_main+='    push loop' + '\n';
_str_main+='#(begin macro)    popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)    popout8hexa()' + '\n';
_str_main+='#(begin macro)    print(" ")' + '\n';
_str_main+=print(" ");
_str_main+='#(end macro)    print(" ")' + '\n';
_str_main+='endloop' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("MUL multiplication of 2 value in stack\\n")' + '\n';
_str_main+=print("MUL multiplication of 2 value in stack\n");
_str_main+='#(end macro)print("MUL multiplication of 2 value in stack\\n")' + '\n';
_str_main+='#(begin macro)print("  push 5 ; push 2 ; mul ;  0A == ")' + '\n';
_str_main+=print("  push 5 ; push 2 ; mul ;  0A == ");
_str_main+='#(end macro)print("  push 5 ; push 2 ; mul ;  0A == ")' + '\n';
_str_main+='push    5' + '\n';
_str_main+='push    2' + '\n';
_str_main+='mul' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("NOT boolean not of the stack value\\n")' + '\n';
_str_main+=print("NOT boolean not of the stack value\n");
_str_main+='#(end macro)print("NOT boolean not of the stack value\\n")' + '\n';
_str_main+='#(begin macro)print("  push 5 ; not ; 00 == ")' + '\n';
_str_main+=print("  push 5 ; not ; 00 == ");
_str_main+='#(end macro)print("  push 5 ; not ; 00 == ")' + '\n';
_str_main+='push    5' + '\n';
_str_main+='not' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print("  push 0 ; not ; 01 == ")' + '\n';
_str_main+=print("  push 0 ; not ; 01 == ");
_str_main+='#(end macro)print("  push 0 ; not ; 01 == ")' + '\n';
_str_main+='push    0' + '\n';
_str_main+='not' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("OR two boolean 8 bits in stack\\n")' + '\n';
_str_main+=print("OR two boolean 8 bits in stack\n");
_str_main+='#(end macro)print("OR two boolean 8 bits in stack\\n")' + '\n';
_str_main+='push    2' + '\n';
_str_main+='push    5' + '\n';
_str_main+='or' + '\n';
_str_main+='#(begin macro)print(" push 2; push 5 ; or ;  01 == ")' + '\n';
_str_main+=print(" push 2; push 5 ; or ;  01 == ");
_str_main+='#(end macro)print(" push 2; push 5 ; or ;  01 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='push    1' + '\n';
_str_main+='push    1' + '\n';
_str_main+='or' + '\n';
_str_main+='#(begin macro)print(" push 1; push 1 ; or ;  01 == ")' + '\n';
_str_main+=print(" push 1; push 1 ; or ;  01 == ");
_str_main+='#(end macro)print(" push 1; push 1 ; or ;  01 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='push    0' + '\n';
_str_main+='push    1' + '\n';
_str_main+='or' + '\n';
_str_main+='#(begin macro)print(" push 0; push 1 ; or ;  01 == ")' + '\n';
_str_main+=print(" push 0; push 1 ; or ;  01 == ");
_str_main+='#(end macro)print(" push 0; push 1 ; or ;  01 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='push    0' + '\n';
_str_main+='push    0' + '\n';
_str_main+='or' + '\n';
_str_main+='#(begin macro)print(" push 0; push 0 ; or ;  00 == ")' + '\n';
_str_main+=print(" push 0; push 0 ; or ;  00 == ");
_str_main+='#(end macro)print(" push 0; push 0 ; or ;  00 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("SUB an immediate\\n")' + '\n';
_str_main+=print("SUB an immediate\n");
_str_main+='#(end macro)print("SUB an immediate\\n")' + '\n';
_str_main+='push    3' + '\n';
_str_main+='sub     1' + '\n';
_str_main+='#(begin macro)print(" push 3; sub 1 ; 02 == ")' + '\n';
_str_main+=print(" push 3; sub 1 ; 02 == ");
_str_main+='#(end macro)print(" push 3; sub 1 ; 02 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("SUB two 8 bits in stack\\n")' + '\n';
_str_main+=print("SUB two 8 bits in stack\n");
_str_main+='#(end macro)print("SUB two 8 bits in stack\\n")' + '\n';
_str_main+='push    5' + '\n';
_str_main+='push    3' + '\n';
_str_main+='sub' + '\n';
_str_main+='#(begin macro)print(" push 5; push 3 ; sub ;  02 == ")' + '\n';
_str_main+=print(" push 5; push 3 ; sub ;  02 == ");
_str_main+='#(end macro)print(" push 5; push 3 ; sub ;  02 == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='push    2' + '\n';
_str_main+='push    5' + '\n';
_str_main+='sub' + '\n';
_str_main+='#(begin macro)print(" push 2; push 5 ; add ;  FD == ")' + '\n';
_str_main+=print(" push 2; push 5 ; add ;  FD == ");
_str_main+='#(end macro)print(" push 2; push 5 ; add ;  FD == ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n") ' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n") ' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("SUP , value in stack -1 greater than stack\\n")' + '\n';
_str_main+=print("SUP , value in stack -1 greater than stack\n");
_str_main+='#(end macro)print("SUP , value in stack -1 greater than stack\\n")' + '\n';
_str_main+='#(begin macro)print(" 10 > 10 : 00 == ")' + '\n';
_str_main+=print(" 10 > 10 : 00 == ");
_str_main+='#(end macro)print(" 10 > 10 : 00 == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='push 10' + '\n';
_str_main+='sup' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print(" 10 > 8 : 01 == ")' + '\n';
_str_main+=print(" 10 > 8 : 01 == ");
_str_main+='#(end macro)print(" 10 > 8 : 01 == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='push 8' + '\n';
_str_main+='sup' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='#(begin macro)print(" 255 > 0 : 01 == ")' + '\n';
_str_main+=print(" 255 > 0 : 01 == ");
_str_main+='#(end macro)print(" 255 > 0 : 01 == ")' + '\n';
_str_main+='push 255' + '\n';
_str_main+='push 0' + '\n';
_str_main+='sup' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("SWAP, exchange two values in stack\\n")' + '\n';
_str_main+=print("SWAP, exchange two values in stack\n");
_str_main+='#(end macro)print("SWAP, exchange two values in stack\\n")' + '\n';
_str_main+='#(begin macro)print("  push 10; push 9 ; swap ; 0A 09 == ")' + '\n';
_str_main+=print("  push 10; push 9 ; swap ; 0A 09 == ");
_str_main+='#(end macro)print("  push 10; push 9 ; swap ; 0A 09 == ")' + '\n';
_str_main+='push 10' + '\n';
_str_main+='push 9' + '\n';
_str_main+='swap' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print(" ")' + '\n';
_str_main+=print(" ");
_str_main+='#(end macro)print(" ")' + '\n';
_str_main+='#(begin macro)popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)popout8hexa()' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("WHILE/WEND , while stack value is >0 , do ..\\n")' + '\n';
_str_main+=print("WHILE/WEND , while stack value is >0 , do ..\n");
_str_main+='#(end macro)print("WHILE/WEND , while stack value is >0 , do ..\\n")' + '\n';
_str_main+='#(begin macro)print(" 01 02 03 == ")  ' + '\n';
_str_main+=print(" 01 02 03 == ");
_str_main+='#(end macro)print(" 01 02 03 == ")  ' + '\n';
_str_main+='push 1' + '\n';
_str_main+='sbm whilewend' + '\n';
_str_main+='while' + '\n';
_str_main+='    push 4' + '\n';
_str_main+='    push whilewend' + '\n';
_str_main+='    equal' + '\n';
_str_main+='    if' + '\n';
_str_main+='        at whilewend' + '\n';
_str_main+='            reset' + '\n';
_str_main+='        ta' + '\n';
_str_main+='    else' + '\n';
_str_main+='        push whilewend' + '\n';
_str_main+='#(begin macro)        popout8hexa()' + '\n';
_str_main+=popout8hexa();
_str_main+='#(end macro)        popout8hexa()' + '\n';
_str_main+='#(begin macro)        print(" ")' + '\n';
_str_main+=print(" ");
_str_main+='#(end macro)        print(" ")' + '\n';
_str_main+='        at whilewend' + '\n';
_str_main+='            inc' + '\n';
_str_main+='        ta' + '\n';
_str_main+='    fi' + '\n';
_str_main+='wend' + '\n';
_str_main+='#(begin macro)print("\\n")' + '\n';
_str_main+=print("\n");
_str_main+='#(end macro)print("\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='' + '\n';
_str_main+='#(begin macro)print("\\nEnd of test\\n")' + '\n';
_str_main+=print("\nEnd of test\n");
_str_main+='#(end macro)print("\\nEnd of test\\n")' + '\n';
_str_main+='' + '\n';
_str_main+='' + '\n';
_str_main+='' + '\n';
_str_main+='' + '\n';
_str_main+='' + '\n';
_str_main+='' + '\n';
_str_main+='' + '\n';
return _str_main;
}
_main();
