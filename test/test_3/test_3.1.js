var __blockLevel__; __blockLevel__ = 0;
var __context__; __context__=[];
function __context() { var __result; __result='';
for (var _i=__context__.length-1; _i>=0 ; _i--) __result+=__context__[_i];
 return __result;}
function __indent() { var __result; __result = '';
for (var _i=0 ; _i < __blockLevel__ ; _i++) __result+= '  ';
 return __result;}
var __main; __main=0;
var _main = function(){
 __main++;
var _str_main; 
_str_main='';
if (arguments.length != 0) throw 'Too much arguments provided to macro _main()[' + [] +']';
_str_main+=__indent() +'# Test 3 #@(main@1)'+ __context() + '\n';
_str_main+=__indent() +'#(begin include)../../samples/include/macro.inc' + '\n';
_str_main+=__indent() +'# Common macros #@(macro_inc@1)'+ __context() + '\n';
_str_main+=__indent() +'# scope variables #@(macro_inc@2)'+ __context() + '\n';
var __scope; var __idx;
__scope=[0]; __idx = 0;
_str_main+=__indent() +' #@(macro_inc@5)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@6)'+ __context() + '\n';
_str_main+=__indent() +'# macro scope_begin : start a new scope for local variable (usage of macro lvar) #@(macro_inc@7)'+ __context() + '\n';
var _scope_begin; _scope_begin=0;
var scope_begin = function(){
 _scope_begin++;
var _strscope_begin; 
_strscope_begin='';
if (arguments.length != 0) throw 'Too much arguments provided to macro scope_begin()[' + [] +']';
__scope.push(0);
return _strscope_begin;
}
_str_main+=__indent() +' #@(macro_inc@11)'+ __context() + '\n';
_str_main+=__indent() +'# macro scope_end : end a scope , then drop scoped local variables (drop) (usage of lvar) #@(macro_inc@12)'+ __context() + '\n';
var _scope_end; _scope_end=0;
var scope_end = function(){
 _scope_end++;
var _strscope_end; 
_strscope_end='';
if (arguments.length != 0) throw 'Too much arguments provided to macro scope_end()[' + [] +']';
if (__scope.length > 0) for (var __idx=0; __idx < __scope[__scope.length-1]; __idx++) {
_strscope_end+=__indent() +'drop #@(macro_inc@15)'+ __context() + '\n';
}
if (__scope.length > 0) __scope.splice(__scope.length-1, 1);
return _strscope_end;
}
_str_main+=__indent() +' #@(macro_inc@19)'+ __context() + '\n';
_str_main+=__indent() +'# macro lvar(vname,value) : declare  in scope, a local variable named vname with an assigned value (stored in stack) #@(macro_inc@20)'+ __context() + '\n';
var _lvar; _lvar=0;
var lvar = function(vname,value){
 _lvar++;
var _strlvar; 
_strlvar='';
if (typeof vname == 'undefined') throw 'Parameter vname is undefined in call of  macro lvar(vname,value)[' + [vname,value] +']';
if (typeof value == 'undefined') throw 'Parameter value is undefined in call of  macro lvar(vname,value)[' + [vname,value] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro lvar(vname,value)[' + [vname,value] +']';
_strlvar+=__indent() +'push    ' + (value) + ' #@(macro_inc@22)'+ __context() + '\n';
_strlvar+=__indent() +'sbm     ' + (vname) + ' #@(macro_inc@23)'+ __context() + '\n';
__scope[__scope.length-1]++;
return _strlvar;
}
_str_main+=__indent() +' #@(macro_inc@26)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_diff(a,b) : if (a != b) { #@(macro_inc@27)'+ __context() + '\n';
var _if_diff; _if_diff=0;
var if_diff = function(a,b){
 _if_diff++;
var _strif_diff; 
_strif_diff='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_diff(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_diff(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_diff(a,b)[' + [a,b] +']';
_strif_diff+=__indent() +'push    ' + (a) + ' #@(macro_inc@29)'+ __context() + '\n';
_strif_diff+=__indent() +'push    ' + (b) + ' #@(macro_inc@30)'+ __context() + '\n';
_strif_diff+=__indent() +'diff #@(macro_inc@31)'+ __context() + '\n';
_strif_diff+=__indent() +'if #@(macro_inc@32)'+ __context() + '\n';
__blockLevel__++;
return _strif_diff;
}
_str_main+=__indent() +' #@(macro_inc@34)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_equal(a,b) : if (a == b) { #@(macro_inc@35)'+ __context() + '\n';
var _if_equal; _if_equal=0;
var if_equal = function(a,b){
 _if_equal++;
var _strif_equal; 
_strif_equal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_equal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_equal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_equal(a,b)[' + [a,b] +']';
_strif_equal+=__indent() +'push    ' + (a) + ' #@(macro_inc@37)'+ __context() + '\n';
_strif_equal+=__indent() +'push    ' + (b) + ' #@(macro_inc@38)'+ __context() + '\n';
_strif_equal+=__indent() +'equal #@(macro_inc@39)'+ __context() + '\n';
_strif_equal+=__indent() +'if #@(macro_inc@40)'+ __context() + '\n';
__blockLevel__++;
return _strif_equal;
}
_str_main+=__indent() +' #@(macro_inc@42)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_sup(a,b) : if (a > b) { #@(macro_inc@43)'+ __context() + '\n';
var _if_sup; _if_sup=0;
var if_sup = function(a,b){
 _if_sup++;
var _strif_sup; 
_strif_sup='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_sup(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_sup(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_sup(a,b)[' + [a,b] +']';
_strif_sup+=__indent() +'push    ' + (a) + ' #@(macro_inc@45)'+ __context() + '\n';
_strif_sup+=__indent() +'push    ' + (b) + ' #@(macro_inc@46)'+ __context() + '\n';
_strif_sup+=__indent() +'sup #@(macro_inc@47)'+ __context() + '\n';
_strif_sup+=__indent() +'if #@(macro_inc@48)'+ __context() + '\n';
__blockLevel__++;
return _strif_sup;
}
_str_main+=__indent() +' #@(macro_inc@50)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_inf(a,b) : if (a < b) { #@(macro_inc@51)'+ __context() + '\n';
var _if_inf; _if_inf=0;
var if_inf = function(a,b){
 _if_inf++;
var _strif_inf; 
_strif_inf='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_inf(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_inf(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_inf(a,b)[' + [a,b] +']';
_strif_inf+=__indent() +'push    ' + (a) + ' #@(macro_inc@53)'+ __context() + '\n';
_strif_inf+=__indent() +'push    ' + (b) + ' #@(macro_inc@54)'+ __context() + '\n';
_strif_inf+=__indent() +'inf #@(macro_inc@55)'+ __context() + '\n';
_strif_inf+=__indent() +'if #@(macro_inc@56)'+ __context() + '\n';
__blockLevel__++;
return _strif_inf;
}
_str_main+=__indent() +' #@(macro_inc@58)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_supequal(a,b) : if (a >= b) { #@(macro_inc@59)'+ __context() + '\n';
var _if_supequal; _if_supequal=0;
var if_supequal = function(a,b){
 _if_supequal++;
var _strif_supequal; 
_strif_supequal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_supequal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_supequal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_supequal(a,b)[' + [a,b] +']';
_strif_supequal+=__indent() +'push    ' + (a) + ' #@(macro_inc@61)'+ __context() + '\n';
_strif_supequal+=__indent() +'push    ' + (b) + ' #@(macro_inc@62)'+ __context() + '\n';
_strif_supequal+=__indent() +'inf #@(macro_inc@63)'+ __context() + '\n';
_strif_supequal+=__indent() +'not #@(macro_inc@64)'+ __context() + '\n';
_strif_supequal+=__indent() +'if #@(macro_inc@65)'+ __context() + '\n';
__blockLevel__++;
return _strif_supequal;
}
_str_main+=__indent() +' #@(macro_inc@67)'+ __context() + '\n';
_str_main+=__indent() +'# macro if_infequal(a,b) : if (a <= b) { #@(macro_inc@68)'+ __context() + '\n';
var _if_infequal; _if_infequal=0;
var if_infequal = function(a,b){
 _if_infequal++;
var _strif_infequal; 
_strif_infequal='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro if_infequal(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro if_infequal(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro if_infequal(a,b)[' + [a,b] +']';
_strif_infequal+=__indent() +'push    ' + (a) + ' #@(macro_inc@70)'+ __context() + '\n';
_strif_infequal+=__indent() +'push    ' + (b) + ' #@(macro_inc@71)'+ __context() + '\n';
_strif_infequal+=__indent() +'sup #@(macro_inc@72)'+ __context() + '\n';
_strif_infequal+=__indent() +'not #@(macro_inc@73)'+ __context() + '\n';
_strif_infequal+=__indent() +'if #@(macro_inc@74)'+ __context() + '\n';
__blockLevel__++;
return _strif_infequal;
}
_str_main+=__indent() +' #@(macro_inc@76)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_2 #@(macro_inc@77)'+ __context() + '\n';
var _at_2; _at_2=0;
var at_2 = function(ope, a,b){
 _at_2++;
var _strat_2; 
_strat_2='';
if (typeof ope == 'undefined') throw 'Parameter ope is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_2(ope, a,b)[' + [ope, a,b] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro at_2(ope, a,b)[' + [ope, a,b] +']';
_strat_2+=__indent() +'at      ' + (a) + ' #@(macro_inc@79)'+ __context() + '\n';
__blockLevel__++;
_strat_2+=__indent() +'' + (ope) + '   ' + (b) + ' #@(macro_inc@80)' + __context() + '\n';
__blockLevel__--;
_strat_2+=__indent() +'ta #@(macro_inc@81)'+ __context() + '\n';
return _strat_2;
}
_str_main+=__indent() +' #@(macro_inc@83)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_1 #@(macro_inc@84)'+ __context() + '\n';
var _at_1; _at_1=0;
var at_1 = function(ope, a){
 _at_1++;
var _strat_1; 
_strat_1='';
if (typeof ope == 'undefined') throw 'Parameter ope is undefined in call of  macro at_1(ope, a)[' + [ope, a] +']';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_1(ope, a)[' + [ope, a] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_1(ope, a)[' + [ope, a] +']';
_strat_1+=__indent() +'#(begin macro)at_2(ope,a,"")' + '\n';
__context__.push('(macro_inc@86)');
_strat_1+=at_2(ope,a,"");
__context__.pop();
_strat_1+=__indent() +'#(end macro)at_2(ope,a,"")' + '\n';
return _strat_1;
}
_str_main+=__indent() +' #@(macro_inc@88)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_reset(a) : a=0 #@(macro_inc@89)'+ __context() + '\n';
var _at_reset; _at_reset=0;
var at_reset = function(a){
 _at_reset++;
var _strat_reset; 
_strat_reset='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_reset(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_reset(a)[' + [a] +']';
_strat_reset+=__indent() +'#(begin macro)at_1("reset",a)' + '\n';
__context__.push('(macro_inc@91)');
_strat_reset+=at_1("reset",a);
__context__.pop();
_strat_reset+=__indent() +'#(end macro)at_1("reset",a)' + '\n';
return _strat_reset;
}
_str_main+=__indent() +' #@(macro_inc@93)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_inc(a) : a++ #@(macro_inc@94)'+ __context() + '\n';
var _at_inc; _at_inc=0;
var at_inc = function(a){
 _at_inc++;
var _strat_inc; 
_strat_inc='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_inc(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_inc(a)[' + [a] +']';
_strat_inc+=__indent() +'#(begin macro)at_1("inc",a)' + '\n';
__context__.push('(macro_inc@96)');
_strat_inc+=at_1("inc",a);
__context__.pop();
_strat_inc+=__indent() +'#(end macro)at_1("inc",a)' + '\n';
return _strat_inc;
}
_str_main+=__indent() +' #@(macro_inc@98)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_dec(a) : a-- #@(macro_inc@99)'+ __context() + '\n';
var _at_dec; _at_dec=0;
var at_dec = function(a){
 _at_dec++;
var _strat_dec; 
_strat_dec='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_dec(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_dec(a)[' + [a] +']';
_strat_dec+=__indent() +'#(begin macro)at_1("dec",a)' + '\n';
__context__.push('(macro_inc@101)');
_strat_dec+=at_1("dec",a);
__context__.pop();
_strat_dec+=__indent() +'#(end macro)at_1("dec",a)' + '\n';
return _strat_dec;
}
_str_main+=__indent() +' #@(macro_inc@103)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_in(a)  : a= readchar() #@(macro_inc@104)'+ __context() + '\n';
var _at_in; _at_in=0;
var at_in = function(a){
 _at_in++;
var _strat_in; 
_strat_in='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_in(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_in(a)[' + [a] +']';
_strat_in+=__indent() +'#(begin macro)at_1("in",a)' + '\n';
__context__.push('(macro_inc@106)');
_strat_in+=at_1("in",a);
__context__.pop();
_strat_in+=__indent() +'#(end macro)at_1("in",a)' + '\n';
return _strat_in;
}
_str_main+=__indent() +' #@(macro_inc@108)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_out(a) : write(a) #@(macro_inc@109)'+ __context() + '\n';
var _at_out; _at_out=0;
var at_out = function(a){
 _at_out++;
var _strat_out; 
_strat_out='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_out(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro at_out(a)[' + [a] +']';
_strat_out+=__indent() +'#(begin macro)at_1("out",a)' + '\n';
__context__.push('(macro_inc@111)');
_strat_out+=at_1("out",a);
__context__.pop();
_strat_out+=__indent() +'#(end macro)at_1("out",a)' + '\n';
return _strat_out;
}
_str_main+=__indent() +' #@(macro_inc@113)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_add(a,b) : a += b (immediate) #@(macro_inc@114)'+ __context() + '\n';
var _at_add; _at_add=0;
var at_add = function(a,b){
 _at_add++;
var _strat_add; 
_strat_add='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_add(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_add(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_add(a,b)[' + [a,b] +']';
_strat_add+=__indent() +'#(begin macro)at_2("add",a,b)' + '\n';
__context__.push('(macro_inc@116)');
_strat_add+=at_2("add",a,b);
__context__.pop();
_strat_add+=__indent() +'#(end macro)at_2("add",a,b)' + '\n';
return _strat_add;
}
_str_main+=__indent() +' #@(macro_inc@118)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_sub(a,b) : a -= b (immediate) #@(macro_inc@119)'+ __context() + '\n';
var _at_sub; _at_sub=0;
var at_sub = function(a,b){
 _at_sub++;
var _strat_sub; 
_strat_sub='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_sub(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_sub(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_sub(a,b)[' + [a,b] +']';
_strat_sub+=__indent() +'#(begin macro)at_2("sub",a,b)' + '\n';
__context__.push('(macro_inc@121)');
_strat_sub+=at_2("sub",a,b);
__context__.pop();
_strat_sub+=__indent() +'#(end macro)at_2("sub",a,b)' + '\n';
return _strat_sub;
}
_str_main+=__indent() +' #@(macro_inc@123)'+ __context() + '\n';
_str_main+=__indent() +'# macro at_set(a,b) : a = b (immediate) #@(macro_inc@124)'+ __context() + '\n';
var _at_set; _at_set=0;
var at_set = function(a,b){
 _at_set++;
var _strat_set; 
_strat_set='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro at_set(a,b)[' + [a,b] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro at_set(a,b)[' + [a,b] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro at_set(a,b)[' + [a,b] +']';
_strat_set+=__indent() +'#(begin macro)at_2("set",a,b)' + '\n';
__context__.push('(macro_inc@126)');
_strat_set+=at_2("set",a,b);
__context__.pop();
_strat_set+=__indent() +'#(end macro)at_2("set",a,b)' + '\n';
return _strat_set;
}
_str_main+=__indent() +' #@(macro_inc@128)'+ __context() + '\n';
var _write; _write=0;
var write = function(a){
 _write++;
var _strwrite; 
_strwrite='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro write(a)[' + [a] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro write(a)[' + [a] +']';
_strwrite+=__indent() +'push    ' + (a) + ' #@(macro_inc@130)'+ __context() + '\n';
_strwrite+=__indent() +'pop     out #@(macro_inc@131)'+ __context() + '\n';
return _strwrite;
}
_str_main+=__indent() +' #@(macro_inc@133)'+ __context() + '\n';
var _divide; _divide=0;
var divide = function(a,b,d,r){
 _divide++;
var _strdivide; 
_strdivide='';
if (typeof a == 'undefined') throw 'Parameter a is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof b == 'undefined') throw 'Parameter b is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof d == 'undefined') throw 'Parameter d is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (typeof r == 'undefined') throw 'Parameter r is undefined in call of  macro divide(a,b,d,r)[' + [a,b,d,r] +']';
if (arguments.length != 4) throw 'Too much arguments provided to macro divide(a,b,d,r)[' + [a,b,d,r] +']';
_strdivide+=__indent() +'push    ' + (a) + ' #@(macro_inc@135)'+ __context() + '\n';
_strdivide+=__indent() +'push    ' + (b) + ' #@(macro_inc@136)'+ __context() + '\n';
_strdivide+=__indent() +'div #@(macro_inc@137)'+ __context() + '\n';
_strdivide+=__indent() +'pop     ' + (d) + ' #@(macro_inc@138)'+ __context() + '\n';
_strdivide+=__indent() +'pop     ' + (r) + ' #@(macro_inc@139)'+ __context() + '\n';
return _strdivide;
}
_str_main+=__indent() +' #@(macro_inc@141)'+ __context() + '\n';
_str_main+=__indent() +'#macro addof() : push A, push B , replaced by Carry, A+B #@(macro_inc@142)'+ __context() + '\n';
var _addof; _addof=0;
var addof = function(){
 _addof++;
var _straddof; 
_straddof='';
if (arguments.length != 0) throw 'Too much arguments provided to macro addof()[' + [] +']';
_straddof+=__indent() +'sbm _addofb' + (_addof) + ' #@(macro_inc@144)'+ __context() + '\n';
_straddof+=__indent() +'sbm _addofa' + (_addof) + ' - 1 #@(macro_inc@145)'+ __context() + '\n';
_straddof+=__indent() +'#(begin macro)scope_begin()' + '\n';
__context__.push('(macro_inc@146)');
_straddof+=scope_begin();
__context__.pop();
_straddof+=__indent() +'#(end macro)scope_begin()' + '\n';
_straddof+=__indent() +'#(begin macro)lvar("_addofc"+_addof ,0)' + '\n';
__context__.push('(macro_inc@147)');
_straddof+=lvar("_addofc"+_addof ,0);
__context__.pop();
_straddof+=__indent() +'#(end macro)lvar("_addofc"+_addof ,0)' + '\n';
_straddof+=__indent() +'push 1 #@(macro_inc@148)'+ __context() + '\n';
_straddof+=__indent() +'sbm _loopao' + (_addof) + ' #@(macro_inc@149)'+ __context() + '\n';
_straddof+=__indent() +'while #@(macro_inc@150)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'push _addofa' + (_addof) + ' #@(macro_inc@151)'+ __context() + '\n';
_straddof+=__indent() +'if #@(macro_inc@152)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _addofa' + (_addof) + ' #@(macro_inc@153)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'dec #@(macro_inc@154)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@155)'+ __context() + '\n';
_straddof+=__indent() +'at _addofb' + (_addof) + ' #@(macro_inc@156)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'inc #@(macro_inc@157)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@158)'+ __context() + '\n';
_straddof+=__indent() +'push _addofb' + (_addof) + ' #@(macro_inc@159)'+ __context() + '\n';
_straddof+=__indent() +'not #@(macro_inc@160)'+ __context() + '\n';
_straddof+=__indent() +'if #@(macro_inc@161)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _addofc' + (_addof) + ' #@(macro_inc@162)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'set 1 #@(macro_inc@163)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@164)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'fi #@(macro_inc@165)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'else #@(macro_inc@166)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _loopao' + (_addof) + ' #@(macro_inc@167)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'reset #@(macro_inc@168)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@169)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'fi #@(macro_inc@170)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'wend #@(macro_inc@171)'+ __context() + '\n';
_straddof+=__indent() +'push _addofc' + (_addof) + ' #@(macro_inc@172)'+ __context() + '\n';
_straddof+=__indent() +'if #@(macro_inc@173)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'at _addofa' + (_addof) + ' #@(macro_inc@174)'+ __context() + '\n';
__blockLevel__++;
_straddof+=__indent() +'set 1 #@(macro_inc@175)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'ta #@(macro_inc@176)'+ __context() + '\n';
__blockLevel__--;
_straddof+=__indent() +'fi #@(macro_inc@177)'+ __context() + '\n';
_straddof+=__indent() +'#(begin macro)scope_end()' + '\n';
__context__.push('(macro_inc@178)');
_straddof+=scope_end();
__context__.pop();
_straddof+=__indent() +'#(end macro)scope_end()' + '\n';
return _straddof;
}
_str_main+=__indent() +' #@(macro_inc@180)'+ __context() + '\n';
_str_main+=__indent() +'# macro subof() : push A, push B , replaced by Carry, A-B #@(macro_inc@181)'+ __context() + '\n';
var _subof; _subof=0;
var subof = function(){
 _subof++;
var _strsubof; 
_strsubof='';
if (arguments.length != 0) throw 'Too much arguments provided to macro subof()[' + [] +']';
_strsubof+=__indent() +'sbm _subofb' + (_subof) + ' #@(macro_inc@183)'+ __context() + '\n';
_strsubof+=__indent() +'sbm _subofa' + (_subof) + ' - 1 #@(macro_inc@184)'+ __context() + '\n';
_strsubof+=__indent() +'#(begin macro)scope_begin()' + '\n';
__context__.push('(macro_inc@185)');
_strsubof+=scope_begin();
__context__.pop();
_strsubof+=__indent() +'#(end macro)scope_begin()' + '\n';
_strsubof+=__indent() +'#(begin macro)lvar("_subofc"+_subof ,0)' + '\n';
__context__.push('(macro_inc@186)');
_strsubof+=lvar("_subofc"+_subof ,0);
__context__.pop();
_strsubof+=__indent() +'#(end macro)lvar("_subofc"+_subof ,0)' + '\n';
_strsubof+=__indent() +'push 1 #@(macro_inc@187)'+ __context() + '\n';
_strsubof+=__indent() +'sbm _loopso' + (_subof) + ' #@(macro_inc@188)'+ __context() + '\n';
_strsubof+=__indent() +'while #@(macro_inc@189)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'push _subofb' + (_subof) + ' #@(macro_inc@190)'+ __context() + '\n';
_strsubof+=__indent() +'if #@(macro_inc@191)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _subofb' + (_subof) + ' #@(macro_inc@192)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'dec #@(macro_inc@193)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@194)'+ __context() + '\n';
_strsubof+=__indent() +'at _subofa' + (_subof) + ' #@(macro_inc@195)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'dec #@(macro_inc@196)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@197)'+ __context() + '\n';
_strsubof+=__indent() +'push _subofa' + (_subof) + ' #@(macro_inc@198)'+ __context() + '\n';
_strsubof+=__indent() +'inc #@(macro_inc@199)'+ __context() + '\n';
_strsubof+=__indent() +'not #@(macro_inc@200)'+ __context() + '\n';
_strsubof+=__indent() +'if #@(macro_inc@201)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _subofc' + (_subof) + ' #@(macro_inc@202)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'set 1 #@(macro_inc@203)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@204)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'fi #@(macro_inc@205)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'else #@(macro_inc@206)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _loopso' + (_subof) + ' #@(macro_inc@207)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'reset #@(macro_inc@208)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@209)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'fi #@(macro_inc@210)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'wend #@(macro_inc@211)'+ __context() + '\n';
_strsubof+=__indent() +'push _subofc' + (_subof) + ' #@(macro_inc@212)'+ __context() + '\n';
_strsubof+=__indent() +'if #@(macro_inc@213)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'at _subofb' + (_subof) + ' #@(macro_inc@214)'+ __context() + '\n';
__blockLevel__++;
_strsubof+=__indent() +'set 1 #@(macro_inc@215)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'ta #@(macro_inc@216)'+ __context() + '\n';
__blockLevel__--;
_strsubof+=__indent() +'fi #@(macro_inc@217)'+ __context() + '\n';
_strsubof+=__indent() +'#(begin macro)scope_end()' + '\n';
__context__.push('(macro_inc@218)');
_strsubof+=scope_end();
__context__.pop();
_strsubof+=__indent() +'#(end macro)scope_end()' + '\n';
_strsubof+=__indent() +'swap #@(macro_inc@219)'+ __context() + '\n';
return _strsubof;
}
_str_main+=__indent() +' #@(macro_inc@221)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulof() : A = stack-1, B= stack : stack-1 = A*B div 256, stack = A*B mod 256 #@(macro_inc@222)'+ __context() + '\n';
var _mulof; _mulof=0;
var mulof = function(){
 _mulof++;
var _strmulof; 
_strmulof='';
if (arguments.length != 0) throw 'Too much arguments provided to macro mulof()[' + [] +']';
_strmulof+=__indent() +'sbm     _mulofA' + (_mulof) + ' - 1 #@(macro_inc@224)'+ __context() + '\n';
_strmulof+=__indent() +'sbm     _mulofB' + (_mulof) + ' #@(macro_inc@225)'+ __context() + '\n';
_strmulof+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(macro_inc@226)');
_strmulof+=scope_begin();
__context__.pop();
_strmulof+=__indent() +'#(end macro)scope_begin' + '\n';
_strmulof+=__indent() +'#(begin macro)lvar    _mulofABdiv256' + (_mulof) + ',    0' + '\n';
__context__.push('(macro_inc@227)');
_strmulof+=lvar(((isNaN(('_mulofABdiv256' + (_mulof) + '')*1))?('_mulofABdiv256' + (_mulof) + ''):(('_mulofABdiv256' + (_mulof) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulof+=__indent() +'#(end macro)lvar    _mulofABdiv256' + (_mulof) + ',    0' + '\n';
_strmulof+=__indent() +'#(begin macro)lvar    _mulofABmod256' + (_mulof) + ',    0' + '\n';
__context__.push('(macro_inc@228)');
_strmulof+=lvar(((isNaN(('_mulofABmod256' + (_mulof) + '')*1))?('_mulofABmod256' + (_mulof) + ''):(('_mulofABmod256' + (_mulof) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulof+=__indent() +'#(end macro)lvar    _mulofABmod256' + (_mulof) + ',    0' + '\n';
_strmulof+=__indent() +'push    _mulofB' + (_mulof) + ' #@(macro_inc@229)'+ __context() + '\n';
_strmulof+=__indent() +'loop #@(macro_inc@230)'+ __context() + '\n';
__blockLevel__++;
_strmulof+=__indent() +'push    _mulofABmod256' + (_mulof) + ' #@(macro_inc@231)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofA' + (_mulof) + ' #@(macro_inc@232)'+ __context() + '\n';
_strmulof+=__indent() +'#(begin macro)addof' + '\n';
__context__.push('(macro_inc@233)');
_strmulof+=addof();
__context__.pop();
_strmulof+=__indent() +'#(end macro)addof' + '\n';
_strmulof+=__indent() +'pop     _mulofABmod256' + (_mulof) + ' #@(macro_inc@234)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofABdiv256' + (_mulof) + ' #@(macro_inc@235)'+ __context() + '\n';
_strmulof+=__indent() +'add #@(macro_inc@236)'+ __context() + '\n';
_strmulof+=__indent() +'pop     _mulofABdiv256' + (_mulof) + ' #@(macro_inc@237)'+ __context() + '\n';
__blockLevel__--;
_strmulof+=__indent() +'endloop #@(macro_inc@238)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofABmod256' + (_mulof) + ' #@(macro_inc@239)'+ __context() + '\n';
_strmulof+=__indent() +'pop     _mulofB' + (_mulof) + ' #@(macro_inc@240)'+ __context() + '\n';
_strmulof+=__indent() +'push    _mulofABdiv256' + (_mulof) + ' #@(macro_inc@241)'+ __context() + '\n';
_strmulof+=__indent() +'pop     _mulofA' + (_mulof) + ' #@(macro_inc@242)'+ __context() + '\n';
_strmulof+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(macro_inc@243)');
_strmulof+=scope_end();
__context__.pop();
_strmulof+=__indent() +'#(end macro)scope_end' + '\n';
return _strmulof;
}
_str_main+=__indent() +' #@(macro_inc@245)'+ __context() + '\n';
_str_main+=__indent() +' #@(macro_inc@246)'+ __context() + '\n';
var _left_rewind; _left_rewind=0;
var left_rewind = function(array){
 _left_rewind++;
var _strleft_rewind; 
_strleft_rewind='';
if (typeof array == 'undefined') throw 'Parameter array is undefined in call of  macro left_rewind(array)[' + [array] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro left_rewind(array)[' + [array] +']';
_strleft_rewind+=__indent() +'push    1 #@(macro_inc@248)'+ __context() + '\n';
_strleft_rewind+=__indent() +'sbm     __looprewind' + (_left_rewind) + ' #@(macro_inc@249)'+ __context() + '\n';
_strleft_rewind+=__indent() +'while #@(macro_inc@250)'+ __context() + '\n';
__blockLevel__++;
_strleft_rewind+=__indent() +'#(begin macro)if_diff ' + (array) + '.pos,    0' + '\n';
__context__.push('(macro_inc@251)');
_strleft_rewind+=if_diff(((isNaN(('' + (array) + '.pos')*1))?('' + (array) + '.pos'):(('' + (array) + '.pos')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strleft_rewind+=__indent() +'#(end macro)if_diff ' + (array) + '.pos,    0' + '\n';
_strleft_rewind+=__indent() +'arotl ' + (array) + ' #@(macro_inc@252)'+ __context() + '\n';
__blockLevel__--;
_strleft_rewind+=__indent() +'else #@(macro_inc@253)'+ __context() + '\n';
__blockLevel__++;
_strleft_rewind+=__indent() +'#(begin macro)at_reset    __looprewind' + (_left_rewind) + '' + '\n';
__context__.push('(macro_inc@254)');
_strleft_rewind+=at_reset(((isNaN(('__looprewind' + (_left_rewind) + '')*1))?('__looprewind' + (_left_rewind) + ''):(('__looprewind' + (_left_rewind) + '')*1)));
__context__.pop();
_strleft_rewind+=__indent() +'#(end macro)at_reset    __looprewind' + (_left_rewind) + '' + '\n';
__blockLevel__--;
_strleft_rewind+=__indent() +'fi #@(macro_inc@255)'+ __context() + '\n';
__blockLevel__--;
_strleft_rewind+=__indent() +'wend #@(macro_inc@256)'+ __context() + '\n';
return _strleft_rewind;
}
_str_main+=__indent() +' #@(macro_inc@258)'+ __context() + '\n';
var _right_rewind; _right_rewind=0;
var right_rewind = function(array){
 _right_rewind++;
var _strright_rewind; 
_strright_rewind='';
if (typeof array == 'undefined') throw 'Parameter array is undefined in call of  macro right_rewind(array)[' + [array] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro right_rewind(array)[' + [array] +']';
_strright_rewind+=__indent() +'push ' + (array) + '.pos #@(macro_inc@260)'+ __context() + '\n';
_strright_rewind+=__indent() +'loop #@(macro_inc@261)'+ __context() + '\n';
__blockLevel__++;
_strright_rewind+=__indent() +'arotr ' + (array) + ' #@(macro_inc@262)'+ __context() + '\n';
__blockLevel__--;
_strright_rewind+=__indent() +'endloop #@(macro_inc@263)'+ __context() + '\n';
return _strright_rewind;
}
_str_main+=__indent() +' #@(macro_inc@265)'+ __context() + '\n';
_str_main+=__indent() +'# macro popouthexa() : from head of stack value (from 0 to 15) write out hexa (from 0 to 9 and A to F) #@(macro_inc@266)'+ __context() + '\n';
var _popouthexa; _popouthexa=0;
var popouthexa = function(){
 _popouthexa++;
var _strpopouthexa; 
_strpopouthexa='';
if (arguments.length != 0) throw 'Too much arguments provided to macro popouthexa()[' + [] +']';
_strpopouthexa+=__indent() +'sbm     _input' + (_popouthexa) + ' #@(macro_inc@268)'+ __context() + '\n';
_strpopouthexa+=__indent() +'#(begin macro)if_sup  _input' + (_popouthexa) + ',    9' + '\n';
__context__.push('(macro_inc@269)');
_strpopouthexa+=if_sup(((isNaN(('_input' + (_popouthexa) + '')*1))?('_input' + (_popouthexa) + ''):(('_input' + (_popouthexa) + '')*1)),((isNaN(('9')*1))?('9'):(('9')*1)));
__context__.pop();
_strpopouthexa+=__indent() +'#(end macro)if_sup  _input' + (_popouthexa) + ',    9' + '\n';
_strpopouthexa+=__indent() +'#(begin macro)at_add("_input" + _popouthexa, "\'7\'")' + '\n';
__context__.push('(macro_inc@270)');
_strpopouthexa+=at_add("_input" + _popouthexa, "'7'");
__context__.pop();
_strpopouthexa+=__indent() +'#(end macro)at_add("_input" + _popouthexa, "\'7\'")' + '\n';
__blockLevel__--;
_strpopouthexa+=__indent() +'else #@(macro_inc@271)'+ __context() + '\n';
__blockLevel__++;
_strpopouthexa+=__indent() +'#(begin macro)at_add("_input" + _popouthexa, "\'0\'")' + '\n';
__context__.push('(macro_inc@272)');
_strpopouthexa+=at_add("_input" + _popouthexa, "'0'");
__context__.pop();
_strpopouthexa+=__indent() +'#(end macro)at_add("_input" + _popouthexa, "\'0\'")' + '\n';
__blockLevel__--;
_strpopouthexa+=__indent() +'fi #@(macro_inc@273)'+ __context() + '\n';
_strpopouthexa+=__indent() +'pop out #@(macro_inc@274)'+ __context() + '\n';
return _strpopouthexa;
}
_str_main+=__indent() +' #@(macro_inc@276)'+ __context() + '\n';
_str_main+=__indent() +'# macro popout8hexa() : from head of stack the 8 bit value is write out in hexa #@(macro_inc@277)'+ __context() + '\n';
var _popout8hexa; _popout8hexa=0;
var popout8hexa = function(){
 _popout8hexa++;
var _strpopout8hexa; 
_strpopout8hexa='';
if (arguments.length != 0) throw 'Too much arguments provided to macro popout8hexa()[' + [] +']';
_strpopout8hexa+=__indent() +'push    16 #@(macro_inc@279)'+ __context() + '\n';
_strpopout8hexa+=__indent() +'div #@(macro_inc@280)'+ __context() + '\n';
_strpopout8hexa+=__indent() +'#(begin macro)popouthexa # output most significant hexa character from head of stack value, then drop' + '\n';
__context__.push('(macro_inc@281)');
_strpopout8hexa+=popouthexa();
__context__.pop();
_strpopout8hexa+=__indent() +'#(end macro)popouthexa # output most significant hexa character from head of stack value, then drop' + '\n';
_strpopout8hexa+=__indent() +'#(begin macro)popouthexa # output less significant hexa character from head of stack value, then drop' + '\n';
__context__.push('(macro_inc@282)');
_strpopout8hexa+=popouthexa();
__context__.pop();
_strpopout8hexa+=__indent() +'#(end macro)popouthexa # output less significant hexa character from head of stack value, then drop' + '\n';
return _strpopout8hexa;
}
_str_main+=__indent() +' #@(macro_inc@284)'+ __context() + '\n';
_str_main+=__indent() +'# macro print(aString) : print out a string #@(macro_inc@285)'+ __context() + '\n';
var _print; _print=0;
var print = function(aString){
 _print++;
var _strprint; 
_strprint='';
if (typeof aString == 'undefined') throw 'Parameter aString is undefined in call of  macro print(aString)[' + [aString] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro print(aString)[' + [aString] +']';
_strprint+=__indent() +'push    0 #@(macro_inc@287)'+ __context() + '\n';
var __prev; __prev = 0;
for (var istr=0; istr < aString.length ; istr++) {
var __ascii; __ascii = aString[istr].charCodeAt(0);
var __move; __move = __ascii - __prev;
var __dist ; __dist = (__move > 0)?__move:-__move;
if (__dist < __ascii) { // shorter to move
if (__move > 0 ) {
_strprint+=__indent() +'add     ' + (__dist) + ' #@(macro_inc@295)'+ __context() + '\n';
} else {
if (__dist != 0) {
_strprint+=__indent() +'sub     ' + (__dist) + ' #@(macro_inc@298)'+ __context() + '\n';
}
}
} else {
_strprint+=__indent() +'set     ' + (__ascii) + ' #@(macro_inc@302)'+ __context() + '\n';
}
_strprint+=__indent() +'out             # ' + ((aString[istr].charCodeAt(0)>31?("\'"+aString[istr]+"\'"):"")) + ' #@(macro_inc@304)'+ __context() + '\n';
__prev  = __ascii;
}
_strprint+=__indent() +'drop #@(macro_inc@307)'+ __context() + '\n';
return _strprint;
}
_str_main+=__indent() +'#(end include)../../samples/include/macro.inc' + '\n';
_str_main+=__indent() +'#(begin include)../../samples/include/signedX32.inc' + '\n';
_str_main+=__indent() +'# 32 bits signed integer ( 4 bytes) #@(signedX32_inc@1)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX32_inc@2)'+ __context() + '\n';
_str_main+=__indent() +'#(begin include)signedX.inc' + '\n';
_str_main+=__indent() +'# X bytes : X*8 bits signed integer : #@(signedX_inc@1)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@2)'+ __context() + '\n';
_str_main+=__indent() +'# macro varX(name) :declare global X * 8 bits #@(signedX_inc@3)'+ __context() + '\n';
var _varX; _varX=0;
var varX = function(X,name){
 _varX++;
var _strvarX; 
_strvarX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro varX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro varX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro varX(X,name)[' + [X,name] +']';
for (var xx=0 ; xx < X ; xx++) {
_strvarX+=__indent() +'var     ' + (name) + '_' + (xx) + '    # ' + (xx) + ' byte of ' + (name) + ' #@(signedX_inc@6)'+ __context() + '\n';
}
_strvarX+=__indent() +'var     ' + (name) + '_s    # Sign of ' + (name) + ' #@(signedX_inc@8)'+ __context() + '\n';
_strvarX+=__indent() +'var     ' + (name) + '_c    # carry of ' + (name) + ' #@(signedX_inc@9)'+ __context() + '\n';
return _strvarX;
}
_str_main+=__indent() +' #@(signedX_inc@11)'+ __context() + '\n';
_str_main+=__indent() +'# macro lvarX(X,name) : declare local X * 8 bits #@(signedX_inc@12)'+ __context() + '\n';
var _lvarX; _lvarX=0;
var lvarX = function(X,name){
 _lvarX++;
var _strlvarX; 
_strlvarX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro lvarX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro lvarX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro lvarX(X,name)[' + [X,name] +']';
_strlvarX+=__indent() +'#(begin macro)lvar    ' + (name) + '_c,   0' + '\n';
__context__.push('(signedX_inc@14)');
_strlvarX+=lvar(((isNaN(('' + (name) + '_c')*1))?('' + (name) + '_c'):(('' + (name) + '_c')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strlvarX+=__indent() +'#(end macro)lvar    ' + (name) + '_c,   0' + '\n';
_strlvarX+=__indent() +'#(begin macro)lvar    ' + (name) + '_s,   0' + '\n';
__context__.push('(signedX_inc@15)');
_strlvarX+=lvar(((isNaN(('' + (name) + '_s')*1))?('' + (name) + '_s'):(('' + (name) + '_s')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strlvarX+=__indent() +'#(end macro)lvar    ' + (name) + '_s,   0' + '\n';
for (var xx =0 ; xx < X ; xx++) {
var xx1; xx1 = X-xx-1; // X-1 to 0
_strlvarX+=__indent() +'#(begin macro)lvar    ' + (name) + '_' + (xx1) + ',   0' + '\n';
__context__.push('(signedX_inc@18)');
_strlvarX+=lvar(((isNaN(('' + (name) + '_' + (xx1) + '')*1))?('' + (name) + '_' + (xx1) + ''):(('' + (name) + '_' + (xx1) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strlvarX+=__indent() +'#(end macro)lvar    ' + (name) + '_' + (xx1) + ',   0' + '\n';
}
return _strlvarX;
}
_str_main+=__indent() +' #@(signedX_inc@21)'+ __context() + '\n';
_str_main+=__indent() +'# macro fixsvX(X,name) : be sure that name is positive if equal to zero #@(signedX_inc@22)'+ __context() + '\n';
var _fixsvX; _fixsvX=0;
var fixsvX = function(X,name){
 _fixsvX++;
var _strfixsvX; 
_strfixsvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro fixsvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro fixsvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro fixsvX(X,name)[' + [X,name] +']';
_strfixsvX+=__indent() +'push    ' + (name) + '_s #@(signedX_inc@24)'+ __context() + '\n';
_strfixsvX+=__indent() +'if    # if name is negative #@(signedX_inc@25)'+ __context() + '\n';
__blockLevel__++;
for (var xx = 0; xx < X ; xx++) {
_strfixsvX+=__indent() +'#(begin macro)if_equal    ' + (name) + '_' + (xx) + ',    0' + '\n';
__context__.push('(signedX_inc@27)');
_strfixsvX+=if_equal(((isNaN(('' + (name) + '_' + (xx) + '')*1))?('' + (name) + '_' + (xx) + ''):(('' + (name) + '_' + (xx) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strfixsvX+=__indent() +'#(end macro)if_equal    ' + (name) + '_' + (xx) + ',    0' + '\n';
}
_strfixsvX+=__indent() +'#(begin macro)at_reset    ' + (name) + '_s   # set sign to positive' + '\n';
__context__.push('(signedX_inc@29)');
_strfixsvX+=at_reset(((isNaN(('' + (name) + '_s')*1))?('' + (name) + '_s'):(('' + (name) + '_s')*1)));
__context__.pop();
_strfixsvX+=__indent() +'#(end macro)at_reset    ' + (name) + '_s   # set sign to positive' + '\n';
for ( var xx = 0 ; xx < X ; xx++) {
__blockLevel__--;
_strfixsvX+=__indent() +'fi #@(signedX_inc@31)'+ __context() + '\n';
}
__blockLevel__--;
_strfixsvX+=__indent() +'fi #@(signedX_inc@33)'+ __context() + '\n';
return _strfixsvX;
}
_str_main+=__indent() +' #@(signedX_inc@35)'+ __context() + '\n';
_str_main+=__indent() +'# macro fixsX(X) : be sure to have sign to zero if X*8 bits head of stack value is zero #@(signedX_inc@36)'+ __context() + '\n';
var _fixsX; _fixsX=0;
var fixsX = function(X){
 _fixsX++;
var _strfixsX; 
_strfixsX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro fixsX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro fixsX(X)[' + [X] +']';
_strfixsX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _fixsX' + (_fixsX) + ', 0' + '\n';
__context__.push('(signedX_inc@38)');
_strfixsX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_fixsX' + (_fixsX) + '')*1))?('_fixsX' + (_fixsX) + ''):(('_fixsX' + (_fixsX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strfixsX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _fixsX' + (_fixsX) + ', 0' + '\n';
_strfixsX+=__indent() +'#(begin macro)fixsvX  ' + (X) + ',    _fixsX' + (_fixsX) + '' + '\n';
__context__.push('(signedX_inc@39)');
_strfixsX+=fixsvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_fixsX' + (_fixsX) + '')*1))?('_fixsX' + (_fixsX) + ''):(('_fixsX' + (_fixsX) + '')*1)));
__context__.pop();
_strfixsX+=__indent() +'#(end macro)fixsvX  ' + (X) + ',    _fixsX' + (_fixsX) + '' + '\n';
return _strfixsX;
}
_str_main+=__indent() +' #@(signedX_inc@41)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@42)'+ __context() + '\n';
_str_main+=__indent() +'# macro pushvX(X,name) : push X*8 bits name on stack #@(signedX_inc@43)'+ __context() + '\n';
var _pushvX; _pushvX=0;
var pushvX = function(X,name){
 _pushvX++;
var _strpushvX; 
_strpushvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro pushvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro pushvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro pushvX(X,name)[' + [X,name] +']';
_strpushvX+=__indent() +'push    ' + (name) + '_c #@(signedX_inc@45)'+ __context() + '\n';
_strpushvX+=__indent() +'push    ' + (name) + '_s #@(signedX_inc@46)'+ __context() + '\n';
for (var xx =0 ; xx < X ; xx++) {
var xx1; xx1 = X-xx-1; // X-1 to 0
_strpushvX+=__indent() +'push    ' + (name) + '_' + (xx1) + ' #@(signedX_inc@49)'+ __context() + '\n';
}
return _strpushvX;
}
_str_main+=__indent() +' #@(signedX_inc@52)'+ __context() + '\n';
_str_main+=__indent() +'# macro pushX(X,immValue) : push immediate X*8 bits value on the stack #@(signedX_inc@53)'+ __context() + '\n';
var _pushX; _pushX=0;
var pushX = function(X,immValue){
 _pushX++;
var _strpushX; 
_strpushX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro pushX(X,immValue)[' + [X,immValue] +']';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro pushX(X,immValue)[' + [X,immValue] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro pushX(X,immValue)[' + [X,immValue] +']';
_strpushX+=__indent() +'push    0 #@(signedX_inc@55)'+ __context() + '\n';
_strpushX+=__indent() +'push    ' + ((immValue>=0?0:1)) + ' #@(signedX_inc@56)'+ __context() + '\n';
var absImmValue; absImmValue = immValue>=0?immValue:-immValue;
for (var xx = 0 ; xx < X ; xx++) {
var xx1; xx1 = X-xx-1; // X-1 to 0
absImmValue = absImmValue % Math.pow(256,xx1+1);
_strpushX+=__indent() +'push    ' + (((absImmValue/Math.pow(256,xx1)) | 0)) + ' #@(signedX_inc@61)'+ __context() + '\n';
}
return _strpushX;
}
_str_main+=__indent() +' #@(signedX_inc@64)'+ __context() + '\n';
_str_main+=__indent() +'# macro dupX(X) : duplicate X * 8 bits value on stack #@(signedX_inc@65)'+ __context() + '\n';
var _dupX; _dupX=0;
var dupX = function(X){
 _dupX++;
var _strdupX; 
_strdupX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro dupX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro dupX(X)[' + [X] +']';
for (var xx = 0 ; xx < X+2 ; xx++) { // 0 to X+2-1
_strdupX+=__indent() +'push -' + ((X+2-1)) + ' #@(signedX_inc@68)'+ __context() + '\n';
}
return _strdupX;
}
_str_main+=__indent() +' #@(signedX_inc@71)'+ __context() + '\n';
_str_main+=__indent() +'# macro pushsvX(X,name) : push the sign of the X*8 bits variable \'name\' #@(signedX_inc@72)'+ __context() + '\n';
var _pushsvX; _pushsvX=0;
var pushsvX = function(X,name){
 _pushsvX++;
var _strpushsvX; 
_strpushsvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro pushsvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro pushsvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro pushsvX(X,name)[' + [X,name] +']';
_strpushsvX+=__indent() +'push    ' + (name) + '_s #@(signedX_inc@74)'+ __context() + '\n';
return _strpushsvX;
}
_str_main+=__indent() +' #@(signedX_inc@76)'+ __context() + '\n';
_str_main+=__indent() +'# macro pushcvX(X,name) : push the carry of the X*8 bits variable \'name\' #@(signedX_inc@77)'+ __context() + '\n';
var _pushcvX; _pushcvX=0;
var pushcvX = function(X,name){
 _pushcvX++;
var _strpushcvX; 
_strpushcvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro pushcvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro pushcvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro pushcvX(X,name)[' + [X,name] +']';
_strpushcvX+=__indent() +'push    ' + (name) + '_c #@(signedX_inc@79)'+ __context() + '\n';
return _strpushcvX;
}
_str_main+=__indent() +' #@(signedX_inc@81)'+ __context() + '\n';
_str_main+=__indent() +'# macro popvX(X,name) : pop the stack to the X*8 bits variable \'name\' #@(signedX_inc@82)'+ __context() + '\n';
var _popvX; _popvX=0;
var popvX = function(X,name){
 _popvX++;
var _strpopvX; 
_strpopvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro popvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro popvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro popvX(X,name)[' + [X,name] +']';
for (var xx=0; xx < X; xx++) {
_strpopvX+=__indent() +'pop     ' + (name) + '_' + (xx) + ' #@(signedX_inc@85)'+ __context() + '\n';
}
_strpopvX+=__indent() +'pop     ' + (name) + '_s #@(signedX_inc@87)'+ __context() + '\n';
_strpopvX+=__indent() +'pop     ' + (name) + '_c #@(signedX_inc@88)'+ __context() + '\n';
return _strpopvX;
}
_str_main+=__indent() +' #@(signedX_inc@90)'+ __context() + '\n';
_str_main+=__indent() +'# macro popsvX(X,name) : pop the sign(8 bits 0/1) to the X*8 bits variable \'name\' #@(signedX_inc@91)'+ __context() + '\n';
var _popsvX; _popsvX=0;
var popsvX = function(X,name){
 _popsvX++;
var _strpopsvX; 
_strpopsvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro popsvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro popsvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro popsvX(X,name)[' + [X,name] +']';
_strpopsvX+=__indent() +'POP    ' + (name) + '_s #@(signedX_inc@93)'+ __context() + '\n';
return _strpopsvX;
}
_str_main+=__indent() +' #@(signedX_inc@95)'+ __context() + '\n';
_str_main+=__indent() +'# macro popcvX(X,name) : pop the carry(8 bit 0/1) to the X*8 bits variable \'name\' #@(signedX_inc@96)'+ __context() + '\n';
var _popcvX; _popcvX=0;
var popcvX = function(X,name){
 _popcvX++;
var _strpopcvX; 
_strpopcvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro popcvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro popcvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro popcvX(X,name)[' + [X,name] +']';
_strpopcvX+=__indent() +'POP    ' + (name) + '_c #@(signedX_inc@98)'+ __context() + '\n';
return _strpopcvX;
}
_str_main+=__indent() +' #@(signedX_inc@100)'+ __context() + '\n';
_str_main+=__indent() +'# macro negvX(X,name) : name = -name #@(signedX_inc@101)'+ __context() + '\n';
var _negvX; _negvX=0;
var negvX = function(X,name){
 _negvX++;
var _strnegvX; 
_strnegvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro negvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro negvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro negvX(X,name)[' + [X,name] +']';
_strnegvX+=__indent() +'push    ' + (name) + '_s #@(signedX_inc@103)'+ __context() + '\n';
_strnegvX+=__indent() +'dec #@(signedX_inc@104)'+ __context() + '\n';
_strnegvX+=__indent() +'bool #@(signedX_inc@105)'+ __context() + '\n';
_strnegvX+=__indent() +'dup #@(signedX_inc@106)'+ __context() + '\n';
_strnegvX+=__indent() +'if    # if name is now negative #@(signedX_inc@107)'+ __context() + '\n';
__blockLevel__++;
for (var xx = 0; xx < X ; xx++) {
_strnegvX+=__indent() +'#(begin macro)if_equal    ' + (name) + '_' + (xx) + ',    0' + '\n';
__context__.push('(signedX_inc@109)');
_strnegvX+=if_equal(((isNaN(('' + (name) + '_' + (xx) + '')*1))?('' + (name) + '_' + (xx) + ''):(('' + (name) + '_' + (xx) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strnegvX+=__indent() +'#(end macro)if_equal    ' + (name) + '_' + (xx) + ',    0' + '\n';
}
_strnegvX+=__indent() +'#(begin macro)at_reset    ' + (name) + '_s   # set sign to positive if name==0' + '\n';
__context__.push('(signedX_inc@111)');
_strnegvX+=at_reset(((isNaN(('' + (name) + '_s')*1))?('' + (name) + '_s'):(('' + (name) + '_s')*1)));
__context__.pop();
_strnegvX+=__indent() +'#(end macro)at_reset    ' + (name) + '_s   # set sign to positive if name==0' + '\n';
for (var xx = 0 ; xx < X ; xx++) {
__blockLevel__--;
_strnegvX+=__indent() +'fi #@(signedX_inc@113)'+ __context() + '\n';
}
__blockLevel__--;
_strnegvX+=__indent() +'fi #@(signedX_inc@115)'+ __context() + '\n';
_strnegvX+=__indent() +'pop     ' + (name) + '_s #@(signedX_inc@116)'+ __context() + '\n';
return _strnegvX;
}
_str_main+=__indent() +' #@(signedX_inc@118)'+ __context() + '\n';
_str_main+=__indent() +'# macro absvX(X,name) : name = abs(name) #@(signedX_inc@119)'+ __context() + '\n';
var _absvX; _absvX=0;
var absvX = function(X,name){
 _absvX++;
var _strabsvX; 
_strabsvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro absvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro absvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro absvX(X,name)[' + [X,name] +']';
_strabsvX+=__indent() +'#(begin macro)at_reset    ' + (name) + '_s' + '\n';
__context__.push('(signedX_inc@121)');
_strabsvX+=at_reset(((isNaN(('' + (name) + '_s')*1))?('' + (name) + '_s'):(('' + (name) + '_s')*1)));
__context__.pop();
_strabsvX+=__indent() +'#(end macro)at_reset    ' + (name) + '_s' + '\n';
return _strabsvX;
}
_str_main+=__indent() +' #@(signedX_inc@123)'+ __context() + '\n';
_str_main+=__indent() +'# macro absX(X) : X*8 bits head of stack = abs(X*8 bits head of stack) #@(signedX_inc@124)'+ __context() + '\n';
var _absX; _absX=0;
var absX = function(X){
 _absX++;
var _strabsX; 
_strabsX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro absX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro absX(X)[' + [X] +']';
_strabsX+=__indent() +'sbm _absXSign' + (_absX) + ' - ' + (X) + ' #@(signedX_inc@126)'+ __context() + '\n';
_strabsX+=__indent() +'#(begin macro)at_reset    _absXSign' + (_absX) + '' + '\n';
__context__.push('(signedX_inc@127)');
_strabsX+=at_reset(((isNaN(('_absXSign' + (_absX) + '')*1))?('_absXSign' + (_absX) + ''):(('_absXSign' + (_absX) + '')*1)));
__context__.pop();
_strabsX+=__indent() +'#(end macro)at_reset    _absXSign' + (_absX) + '' + '\n';
return _strabsX;
}
_str_main+=__indent() +' #@(signedX_inc@129)'+ __context() + '\n';
_str_main+=__indent() +'# macro negX(X) : X*8 bits head of stack = - (X*8 bits head of stack) #@(signedX_inc@130)'+ __context() + '\n';
var _negX; _negX=0;
var negX = function(X){
 _negX++;
var _strnegX; 
_strnegX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro negX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro negX(X)[' + [X] +']';
_strnegX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _negXName' + (_negX) + ',   0' + '\n';
__context__.push('(signedX_inc@132)');
_strnegX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_negXName' + (_negX) + '')*1))?('_negXName' + (_negX) + ''):(('_negXName' + (_negX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strnegX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _negXName' + (_negX) + ',   0' + '\n';
_strnegX+=__indent() +'#(begin macro)negvX   ' + (X) + ',    _negXName' + (negX) + '' + '\n';
__context__.push('(signedX_inc@133)');
_strnegX+=negvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_negXName' + (negX) + '')*1))?('_negXName' + (negX) + ''):(('_negXName' + (negX) + '')*1)));
__context__.pop();
_strnegX+=__indent() +'#(end macro)negvX   ' + (X) + ',    _negXName' + (negX) + '' + '\n';
return _strnegX;
}
_str_main+=__indent() +' #@(signedX_inc@135)'+ __context() + '\n';
_str_main+=__indent() +'# macro setcX(X) : set 1 to X*8 bits head of stack carry #@(signedX_inc@136)'+ __context() + '\n';
var _setcX; _setcX=0;
var setcX = function(X){
 _setcX++;
var _strsetcX; 
_strsetcX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro setcX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro setcX(X)[' + [X] +']';
for (var xx=0 ; xx < X+1 ; xx++) {
_strsetcX+=__indent() +'bf < #@(signedX_inc@139)'+ __context() + '\n';
}
_strsetcX+=__indent() +'set     1 #@(signedX_inc@141)'+ __context() + '\n';
for (var xx=0 ; xx < X+1 ; xx++) {
_strsetcX+=__indent() +'bf > #@(signedX_inc@143)'+ __context() + '\n';
}
return _strsetcX;
}
_str_main+=__indent() +' #@(signedX_inc@146)'+ __context() + '\n';
_str_main+=__indent() +'# macro setcvX(X,name) : set 1 to X*8 bits variable \'name\' carry #@(signedX_inc@147)'+ __context() + '\n';
var _setcvX; _setcvX=0;
var setcvX = function(X,name){
 _setcvX++;
var _strsetcvX; 
_strsetcvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro setcvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro setcvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro setcvX(X,name)[' + [X,name] +']';
_strsetcvX+=__indent() +'#(begin macro)at_set  ' + (name) + '_c,   1' + '\n';
__context__.push('(signedX_inc@149)');
_strsetcvX+=at_set(((isNaN(('' + (name) + '_c')*1))?('' + (name) + '_c'):(('' + (name) + '_c')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strsetcvX+=__indent() +'#(end macro)at_set  ' + (name) + '_c,   1' + '\n';
return _strsetcvX;
}
_str_main+=__indent() +' #@(signedX_inc@151)'+ __context() + '\n';
_str_main+=__indent() +'# macro clearcX(X) : set 0 to 8*X bits head of stack carry #@(signedX_inc@152)'+ __context() + '\n';
var _clearcX; _clearcX=0;
var clearcX = function(X){
 _clearcX++;
var _strclearcX; 
_strclearcX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro clearcX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro clearcX(X)[' + [X] +']';
for (var xx=0 ; xx < X+1 ; xx++) {
_strclearcX+=__indent() +'bf < #@(signedX_inc@155)'+ __context() + '\n';
}
_strclearcX+=__indent() +'reset #@(signedX_inc@157)'+ __context() + '\n';
for (var xx=0 ; xx < X+1 ; xx++) {
_strclearcX+=__indent() +'bf > #@(signedX_inc@159)'+ __context() + '\n';
}
return _strclearcX;
}
_str_main+=__indent() +' #@(signedX_inc@162)'+ __context() + '\n';
_str_main+=__indent() +'# macro clearcvX(X,name) : set 0 to X*8 bits variable \'name\' carry #@(signedX_inc@163)'+ __context() + '\n';
var _clearcvX; _clearcvX=0;
var clearcvX = function(X,name){
 _clearcvX++;
var _strclearcvX; 
_strclearcvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro clearcvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro clearcvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro clearcvX(X,name)[' + [X,name] +']';
_strclearcvX+=__indent() +'#(begin macro)at_reset    ' + (name) + '_c' + '\n';
__context__.push('(signedX_inc@165)');
_strclearcvX+=at_reset(((isNaN(('' + (name) + '_c')*1))?('' + (name) + '_c'):(('' + (name) + '_c')*1)));
__context__.pop();
_strclearcvX+=__indent() +'#(end macro)at_reset    ' + (name) + '_c' + '\n';
return _strclearcvX;
}
_str_main+=__indent() +' #@(signedX_inc@167)'+ __context() + '\n';
_str_main+=__indent() +'# macro dropX(X) : drop 8*X bits value from stack #@(signedX_inc@168)'+ __context() + '\n';
var _dropX; _dropX=0;
var dropX = function(X){
 _dropX++;
var _strdropX; 
_strdropX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro dropX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro dropX(X)[' + [X] +']';
for (var xx = 0; xx < X+2 ; xx++) {
_strdropX+=__indent() +'drop #@(signedX_inc@171)'+ __context() + '\n';
}
return _strdropX;
}
_str_main+=__indent() +' #@(signedX_inc@174)'+ __context() + '\n';
_str_main+=__indent() +'# macro resetX(X) : reset X*8 bits value of the head of stack #@(signedX_inc@175)'+ __context() + '\n';
var _resetX; _resetX=0;
var resetX = function(X){
 _resetX++;
var _strresetX; 
_strresetX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro resetX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro resetX(X)[' + [X] +']';
for (var xx= 0; xx < X+1 ; xx++) {
_strresetX+=__indent() +'bf < #@(signedX_inc@178)'+ __context() + '\n';
}
_strresetX+=__indent() +'bf [-] #@(signedX_inc@180)'+ __context() + '\n';
for (var xx= 0; xx < X+1 ; xx++) {
_strresetX+=__indent() +'bf >[-] #@(signedX_inc@182)'+ __context() + '\n';
}
return _strresetX;
}
_str_main+=__indent() +' #@(signedX_inc@185)'+ __context() + '\n';
_str_main+=__indent() +'# macro resetvX(X,name) : reset X*8 bits variable \'name\' #@(signedX_inc@186)'+ __context() + '\n';
var _resetvX; _resetvX=0;
var resetvX = function(X,name){
 _resetvX++;
var _strresetvX; 
_strresetvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro resetvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro resetvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro resetvX(X,name)[' + [X,name] +']';
_strresetvX+=__indent() +'at ' + (name) + '_0 #@(signedX_inc@188)'+ __context() + '\n';
__blockLevel__++;
_strresetvX+=__indent() +'#(begin macro)resetX(X)' + '\n';
__context__.push('(signedX_inc@189)');
_strresetvX+=resetX(X);
__context__.pop();
_strresetvX+=__indent() +'#(end macro)resetX(X)' + '\n';
__blockLevel__--;
_strresetvX+=__indent() +'ta #@(signedX_inc@190)'+ __context() + '\n';
return _strresetvX;
}
_str_main+=__indent() +' #@(signedX_inc@192)'+ __context() + '\n';
_str_main+=__indent() +'# macro setX(X,immValue) : set X*8 bits value on the head of stack #@(signedX_inc@193)'+ __context() + '\n';
var _setX; _setX=0;
var setX = function(X,immValue){
 _setX++;
var _strsetX; 
_strsetX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro setX(X,immValue)[' + [X,immValue] +']';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro setX(X,immValue)[' + [X,immValue] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro setX(X,immValue)[' + [X,immValue] +']';
for (var xx=0; xx < X+1; xx++) {
_strsetX+=__indent() +'bf < #@(signedX_inc@196)'+ __context() + '\n';
}
_strsetX+=__indent() +'reset #@(signedX_inc@198)'+ __context() + '\n';
_strsetX+=__indent() +'bf  > #@(signedX_inc@199)'+ __context() + '\n';
_strsetX+=__indent() +'set ' + ((immValue>=0?0:1)) + ' #@(signedX_inc@200)'+ __context() + '\n';
var absImmValue ; absImmValue = immValue>0?immValue:-immValue;
for (var xx = 0 ; xx < X ; xx++) {
var xx1; xx1 = X-xx-1; // X-1 to 0
absImmValue = absImmValue % Math.pow(256,xx1+1);
_strsetX+=__indent() +'bf > #@(signedX_inc@205)'+ __context() + '\n';
_strsetX+=__indent() +'set    ' + (((absImmValue/Math.pow(256,xx1)) | 0)) + ' #@(signedX_inc@206)'+ __context() + '\n';
}
return _strsetX;
}
_str_main+=__indent() +' #@(signedX_inc@209)'+ __context() + '\n';
_str_main+=__indent() +'# macro setvX(X,name, immValue) : set X*8 bits immediate value to a X*8 bits variable \'name\' #@(signedX_inc@210)'+ __context() + '\n';
var _setvX; _setvX=0;
var setvX = function(X,name,immValue){
 _setvX++;
var _strsetvX; 
_strsetvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro setvX(X,name,immValue)[' + [X,name,immValue] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro setvX(X,name,immValue)[' + [X,name,immValue] +']';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro setvX(X,name,immValue)[' + [X,name,immValue] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro setvX(X,name,immValue)[' + [X,name,immValue] +']';
_strsetvX+=__indent() +'at ' + (name) + '_0 #@(signedX_inc@212)'+ __context() + '\n';
__blockLevel__++;
_strsetvX+=__indent() +'#(begin macro)setX    ' + (X) + ',    ' + (immValue) + '' + '\n';
__context__.push('(signedX_inc@213)');
_strsetvX+=setX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (immValue) + '')*1))?('' + (immValue) + ''):(('' + (immValue) + '')*1)));
__context__.pop();
_strsetvX+=__indent() +'#(end macro)setX    ' + (X) + ',    ' + (immValue) + '' + '\n';
__blockLevel__--;
_strsetvX+=__indent() +'ta #@(signedX_inc@214)'+ __context() + '\n';
return _strsetvX;
}
_str_main+=__indent() +' #@(signedX_inc@216)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@217)'+ __context() + '\n';
_str_main+=__indent() +'# macro boolvX(X,name) : push on stack the bool(name) X*8 bits #@(signedX_inc@218)'+ __context() + '\n';
var _boolvX; _boolvX=0;
var boolvX = function(X,name){
 _boolvX++;
var _strboolvX; 
_strboolvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro boolvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro boolvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro boolvX(X,name)[' + [X,name] +']';
for (var xx = 0 ; xx < X; xx++) {
_strboolvX+=__indent() +'push ' + (name) + '_' + (xx) + ' #@(signedX_inc@221)'+ __context() + '\n';
_strboolvX+=__indent() +'bool #@(signedX_inc@222)'+ __context() + '\n';
}
for (var xx = 0 ; xx < X-1; xx++) {
_strboolvX+=__indent() +'or #@(signedX_inc@225)'+ __context() + '\n';
}
return _strboolvX;
}
_str_main+=__indent() +' #@(signedX_inc@228)'+ __context() + '\n';
_str_main+=__indent() +'# macro boolX(X) : same as \'bool\' but with a X*8 bits value on stack #@(signedX_inc@229)'+ __context() + '\n';
var _boolX; _boolX=0;
var boolX = function(X){
 _boolX++;
var _strboolX; 
_strboolX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro boolX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro boolX(X)[' + [X] +']';
_strboolX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _boolX' + (_boolX) + ', 0' + '\n';
__context__.push('(signedX_inc@231)');
_strboolX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_boolX' + (_boolX) + '')*1))?('_boolX' + (_boolX) + ''):(('_boolX' + (_boolX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strboolX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _boolX' + (_boolX) + ', 0' + '\n';
_strboolX+=__indent() +'#(begin macro)boolvX  ' + (X) + ',    _boolX' + (_boolX) + '' + '\n';
__context__.push('(signedX_inc@232)');
_strboolX+=boolvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_boolX' + (_boolX) + '')*1))?('_boolX' + (_boolX) + ''):(('_boolX' + (_boolX) + '')*1)));
__context__.pop();
_strboolX+=__indent() +'#(end macro)boolvX  ' + (X) + ',    _boolX' + (_boolX) + '' + '\n';
return _strboolX;
}
_str_main+=__indent() +' #@(signedX_inc@234)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@235)'+ __context() + '\n';
_str_main+=__indent() +'# macro incvX(X,name) : name = name +1 (X*8 bits) #@(signedX_inc@236)'+ __context() + '\n';
var _incvX; _incvX=0;
var incvX = function(X,name){
 _incvX++;
var _strincvX; 
_strincvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro incvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro incvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro incvX(X,name)[' + [X,name] +']';
_strincvX+=__indent() +'#(begin macro)if_equal    ' + (name) + '_s,   0  # positive number' + '\n';
__context__.push('(signedX_inc@238)');
_strincvX+=if_equal(((isNaN(('' + (name) + '_s')*1))?('' + (name) + '_s'):(('' + (name) + '_s')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strincvX+=__indent() +'#(end macro)if_equal    ' + (name) + '_s,   0  # positive number' + '\n';
for (var xx=0; xx < X; xx++) {
_strincvX+=__indent() +'#(begin macro)at_inc  ' + (name) + '_' + (xx) + '' + '\n';
__context__.push('(signedX_inc@240)');
_strincvX+=at_inc(((isNaN(('' + (name) + '_' + (xx) + '')*1))?('' + (name) + '_' + (xx) + ''):(('' + (name) + '_' + (xx) + '')*1)));
__context__.pop();
_strincvX+=__indent() +'#(end macro)at_inc  ' + (name) + '_' + (xx) + '' + '\n';
_strincvX+=__indent() +'#(begin macro)if_equal    ' + (name) + '_' + (xx) + ',    0 # reach zero (roll over)' + '\n';
__context__.push('(signedX_inc@241)');
_strincvX+=if_equal(((isNaN(('' + (name) + '_' + (xx) + '')*1))?('' + (name) + '_' + (xx) + ''):(('' + (name) + '_' + (xx) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strincvX+=__indent() +'#(end macro)if_equal    ' + (name) + '_' + (xx) + ',    0 # reach zero (roll over)' + '\n';
}
_strincvX+=__indent() +'#(begin macro)setcvX  ' + (X) + ',    ' + (name) + ' ## set carry (overflow)' + '\n';
__context__.push('(signedX_inc@243)');
_strincvX+=setcvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_strincvX+=__indent() +'#(end macro)setcvX  ' + (X) + ',    ' + (name) + ' ## set carry (overflow)' + '\n';
for (var xx=0; xx < X; xx++) {
__blockLevel__--;
_strincvX+=__indent() +'fi #@(signedX_inc@245)'+ __context() + '\n';
}
__blockLevel__--;
_strincvX+=__indent() +'else    # negative number #@(signedX_inc@247)'+ __context() + '\n';
__blockLevel__++;
for (var xx=0; xx < X; xx++) {
_strincvX+=__indent() +'#(begin macro)at_dec  ' + (name) + '_' + (xx) + '' + '\n';
__context__.push('(signedX_inc@249)');
_strincvX+=at_dec(((isNaN(('' + (name) + '_' + (xx) + '')*1))?('' + (name) + '_' + (xx) + ''):(('' + (name) + '_' + (xx) + '')*1)));
__context__.pop();
_strincvX+=__indent() +'#(end macro)at_dec  ' + (name) + '_' + (xx) + '' + '\n';
_strincvX+=__indent() +'#(begin macro)if_equal    ' + (name) + '_' + (xx) + ',    255 # reduced' + '\n';
__context__.push('(signedX_inc@250)');
_strincvX+=if_equal(((isNaN(('' + (name) + '_' + (xx) + '')*1))?('' + (name) + '_' + (xx) + ''):(('' + (name) + '_' + (xx) + '')*1)),((isNaN(('255')*1))?('255'):(('255')*1)));
__context__.pop();
_strincvX+=__indent() +'#(end macro)if_equal    ' + (name) + '_' + (xx) + ',    255 # reduced' + '\n';
}
_strincvX+=__indent() +'#(begin macro)setvX   ' + (X) + ',    ' + (name) + ', 1' + '\n';
__context__.push('(signedX_inc@252)');
_strincvX+=setvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strincvX+=__indent() +'#(end macro)setvX   ' + (X) + ',    ' + (name) + ', 1' + '\n';
for (var xx=0; xx < X; xx++) {
__blockLevel__--;
_strincvX+=__indent() +'fi #@(signedX_inc@254)'+ __context() + '\n';
}
_strincvX+=__indent() +'#(begin macro)fixsvX  ' + (X) + ',    ' + (name) + '' + '\n';
__context__.push('(signedX_inc@256)');
_strincvX+=fixsvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_strincvX+=__indent() +'#(end macro)fixsvX  ' + (X) + ',    ' + (name) + '' + '\n';
__blockLevel__--;
_strincvX+=__indent() +'fi #@(signedX_inc@257)'+ __context() + '\n';
return _strincvX;
}
_str_main+=__indent() +' #@(signedX_inc@259)'+ __context() + '\n';
_str_main+=__indent() +'# macro incX(X) : X*8 bits head of stack value incremented #@(signedX_inc@260)'+ __context() + '\n';
var _incX; _incX=0;
var incX = function(X){
 _incX++;
var _strincX; 
_strincX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro incX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro incX(X)[' + [X] +']';
_strincX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _incX' + (_incX) + ',   0' + '\n';
__context__.push('(signedX_inc@262)');
_strincX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_incX' + (_incX) + '')*1))?('_incX' + (_incX) + ''):(('_incX' + (_incX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strincX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _incX' + (_incX) + ',   0' + '\n';
_strincX+=__indent() +'#(begin macro)incvX   ' + (X) + ',    _incX' + (_incX) + '' + '\n';
__context__.push('(signedX_inc@263)');
_strincX+=incvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_incX' + (_incX) + '')*1))?('_incX' + (_incX) + ''):(('_incX' + (_incX) + '')*1)));
__context__.pop();
_strincX+=__indent() +'#(end macro)incvX   ' + (X) + ',    _incX' + (_incX) + '' + '\n';
return _strincX;
}
_str_main+=__indent() +' #@(signedX_inc@265)'+ __context() + '\n';
_str_main+=__indent() +'# macro decvX(X,name) : name-- (X*8 bits) #@(signedX_inc@266)'+ __context() + '\n';
var _decvX; _decvX=0;
var decvX = function(X,name){
 _decvX++;
var _strdecvX; 
_strdecvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro decvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro decvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro decvX(X,name)[' + [X,name] +']';
_strdecvX+=__indent() +'#(begin macro)if_equal    ' + (name) + '_s,   1  # negative number' + '\n';
__context__.push('(signedX_inc@268)');
_strdecvX+=if_equal(((isNaN(('' + (name) + '_s')*1))?('' + (name) + '_s'):(('' + (name) + '_s')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strdecvX+=__indent() +'#(end macro)if_equal    ' + (name) + '_s,   1  # negative number' + '\n';
for (var xx=0; xx < X; xx++) {
_strdecvX+=__indent() +'#(begin macro)at_inc      ' + (name) + '_' + (xx) + '' + '\n';
__context__.push('(signedX_inc@270)');
_strdecvX+=at_inc(((isNaN(('' + (name) + '_' + (xx) + '')*1))?('' + (name) + '_' + (xx) + ''):(('' + (name) + '_' + (xx) + '')*1)));
__context__.pop();
_strdecvX+=__indent() +'#(end macro)at_inc      ' + (name) + '_' + (xx) + '' + '\n';
_strdecvX+=__indent() +'#(begin macro)if_equal    ' + (name) + '_' + (xx) + ',    0 # reach zero (roll over)' + '\n';
__context__.push('(signedX_inc@271)');
_strdecvX+=if_equal(((isNaN(('' + (name) + '_' + (xx) + '')*1))?('' + (name) + '_' + (xx) + ''):(('' + (name) + '_' + (xx) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strdecvX+=__indent() +'#(end macro)if_equal    ' + (name) + '_' + (xx) + ',    0 # reach zero (roll over)' + '\n';
}
_strdecvX+=__indent() +'#(begin macro)setcvX   ' + (X) + ',    ' + (name) + ' ## set carry (overflow)' + '\n';
__context__.push('(signedX_inc@273)');
_strdecvX+=setcvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_strdecvX+=__indent() +'#(end macro)setcvX   ' + (X) + ',    ' + (name) + ' ## set carry (overflow)' + '\n';
for (var xx=0; xx < X; xx++) {
__blockLevel__--;
_strdecvX+=__indent() +'fi #@(signedX_inc@275)'+ __context() + '\n';
}
__blockLevel__--;
_strdecvX+=__indent() +'else    # positive number #@(signedX_inc@277)'+ __context() + '\n';
__blockLevel__++;
for (var xx=0; xx < X; xx++) {
_strdecvX+=__indent() +'#(begin macro)at_dec      ' + (name) + '_' + (xx) + '' + '\n';
__context__.push('(signedX_inc@279)');
_strdecvX+=at_dec(((isNaN(('' + (name) + '_' + (xx) + '')*1))?('' + (name) + '_' + (xx) + ''):(('' + (name) + '_' + (xx) + '')*1)));
__context__.pop();
_strdecvX+=__indent() +'#(end macro)at_dec      ' + (name) + '_' + (xx) + '' + '\n';
_strdecvX+=__indent() +'#(begin macro)if_equal    ' + (name) + '_' + (xx) + ',    255 # reduced' + '\n';
__context__.push('(signedX_inc@280)');
_strdecvX+=if_equal(((isNaN(('' + (name) + '_' + (xx) + '')*1))?('' + (name) + '_' + (xx) + ''):(('' + (name) + '_' + (xx) + '')*1)),((isNaN(('255')*1))?('255'):(('255')*1)));
__context__.pop();
_strdecvX+=__indent() +'#(end macro)if_equal    ' + (name) + '_' + (xx) + ',    255 # reduced' + '\n';
}
_strdecvX+=__indent() +'#(begin macro)setvX   ' + (X) + ',    ' + (name) + ', -1' + '\n';
__context__.push('(signedX_inc@282)');
_strdecvX+=setvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)),((isNaN(('-1')*1))?('-1'):(('-1')*1)));
__context__.pop();
_strdecvX+=__indent() +'#(end macro)setvX   ' + (X) + ',    ' + (name) + ', -1' + '\n';
for (var xx=0; xx < X; xx++) {
__blockLevel__--;
_strdecvX+=__indent() +'fi #@(signedX_inc@284)'+ __context() + '\n';
}
__blockLevel__--;
_strdecvX+=__indent() +'fi #@(signedX_inc@286)'+ __context() + '\n';
return _strdecvX;
}
_str_main+=__indent() +' #@(signedX_inc@288)'+ __context() + '\n';
_str_main+=__indent() +'# macro decX(X) : X*8 bits head of stack value decrement #@(signedX_inc@289)'+ __context() + '\n';
var _decX; _decX=0;
var decX = function(X){
 _decX++;
var _strdecX; 
_strdecX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro decX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro decX(X)[' + [X] +']';
_strdecX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _decX' + (_decX) + ',   0' + '\n';
__context__.push('(signedX_inc@291)');
_strdecX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_decX' + (_decX) + '')*1))?('_decX' + (_decX) + ''):(('_decX' + (_decX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strdecX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _decX' + (_decX) + ',   0' + '\n';
_strdecX+=__indent() +'#(begin macro)decvX   ' + (X) + ',    _decX' + (_decX) + '' + '\n';
__context__.push('(signedX_inc@292)');
_strdecX+=decvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_decX' + (_decX) + '')*1))?('_decX' + (_decX) + ''):(('_decX' + (_decX) + '')*1)));
__context__.pop();
_strdecX+=__indent() +'#(end macro)decvX   ' + (X) + ',    _decX' + (_decX) + '' + '\n';
return _strdecX;
}
_str_main+=__indent() +' #@(signedX_inc@294)'+ __context() + '\n';
_str_main+=__indent() +'# macro addviX(X,name, immValue) : name += immediate value #@(signedX_inc@295)'+ __context() + '\n';
var _addviX; _addviX=0;
var addviX = function(X,name,immValue){
 _addviX++;
var _straddviX; 
_straddviX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro addviX(X,name,immValue)[' + [X,name,immValue] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro addviX(X,name,immValue)[' + [X,name,immValue] +']';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro addviX(X,name,immValue)[' + [X,name,immValue] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro addviX(X,name,immValue)[' + [X,name,immValue] +']';
_straddviX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@297)');
_straddviX+=scope_begin();
__context__.pop();
_straddviX+=__indent() +'#(end macro)scope_begin' + '\n';
_straddviX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _addviXNameA' + (_addviX) + '' + '\n';
__context__.push('(signedX_inc@298)');
_straddviX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addviXNameA' + (_addviX) + '')*1))?('_addviXNameA' + (_addviX) + ''):(('_addviXNameA' + (_addviX) + '')*1)));
__context__.pop();
_straddviX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _addviXNameA' + (_addviX) + '' + '\n';
_straddviX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _addviXNameB' + (_addviX) + '' + '\n';
__context__.push('(signedX_inc@299)');
_straddviX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addviXNameB' + (_addviX) + '')*1))?('_addviXNameB' + (_addviX) + ''):(('_addviXNameB' + (_addviX) + '')*1)));
__context__.pop();
_straddviX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _addviXNameB' + (_addviX) + '' + '\n';
_straddviX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
__context__.push('(signedX_inc@300)');
_straddviX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_straddviX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
_straddviX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _addviXNameA' + (_addviX) + '' + '\n';
__context__.push('(signedX_inc@301)');
_straddviX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addviXNameA' + (_addviX) + '')*1))?('_addviXNameA' + (_addviX) + ''):(('_addviXNameA' + (_addviX) + '')*1)));
__context__.pop();
_straddviX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _addviXNameA' + (_addviX) + '' + '\n';
_straddviX+=__indent() +'#(begin macro)pushX   ' + (X) + ',    ' + (immValue) + '' + '\n';
__context__.push('(signedX_inc@302)');
_straddviX+=pushX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (immValue) + '')*1))?('' + (immValue) + ''):(('' + (immValue) + '')*1)));
__context__.pop();
_straddviX+=__indent() +'#(end macro)pushX   ' + (X) + ',    ' + (immValue) + '' + '\n';
_straddviX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _addviXNameB' + (_addviX) + '' + '\n';
__context__.push('(signedX_inc@303)');
_straddviX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addviXNameB' + (_addviX) + '')*1))?('_addviXNameB' + (_addviX) + ''):(('_addviXNameB' + (_addviX) + '')*1)));
__context__.pop();
_straddviX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _addviXNameB' + (_addviX) + '' + '\n';
_straddviX+=__indent() +'#(begin macro)addvvvX ' + (X) + ',    ' + (name) + ', _addviXNameA' + (_addviX) + ',  _addviXNameB' + (_addviX) + '' + '\n';
__context__.push('(signedX_inc@304)');
_straddviX+=addvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)),((isNaN(('_addviXNameA' + (_addviX) + '')*1))?('_addviXNameA' + (_addviX) + ''):(('_addviXNameA' + (_addviX) + '')*1)),((isNaN(('_addviXNameB' + (_addviX) + '')*1))?('_addviXNameB' + (_addviX) + ''):(('_addviXNameB' + (_addviX) + '')*1)));
__context__.pop();
_straddviX+=__indent() +'#(end macro)addvvvX ' + (X) + ',    ' + (name) + ', _addviXNameA' + (_addviX) + ',  _addviXNameB' + (_addviX) + '' + '\n';
_straddviX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@305)');
_straddviX+=scope_end();
__context__.pop();
_straddviX+=__indent() +'#(end macro)scope_end' + '\n';
return _straddviX;
}
_str_main+=__indent() +' #@(signedX_inc@307)'+ __context() + '\n';
_str_main+=__indent() +'# macro addiX(X,immValue) : X*8 bits head of stack value += immediate value #@(signedX_inc@308)'+ __context() + '\n';
var _addiX; _addiX=0;
var addiX = function(X,immValue){
 _addiX++;
var _straddiX; 
_straddiX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro addiX(X,immValue)[' + [X,immValue] +']';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro addiX(X,immValue)[' + [X,immValue] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro addiX(X,immValue)[' + [X,immValue] +']';
_straddiX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _addiXName' + (_addiX) + ', 0' + '\n';
__context__.push('(signedX_inc@310)');
_straddiX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addiXName' + (_addiX) + '')*1))?('_addiXName' + (_addiX) + ''):(('_addiXName' + (_addiX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_straddiX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _addiXName' + (_addiX) + ', 0' + '\n';
_straddiX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@311)');
_straddiX+=scope_begin();
__context__.pop();
_straddiX+=__indent() +'#(end macro)scope_begin' + '\n';
_straddiX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _addiXNameA' + (_addiX) + '' + '\n';
__context__.push('(signedX_inc@312)');
_straddiX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addiXNameA' + (_addiX) + '')*1))?('_addiXNameA' + (_addiX) + ''):(('_addiXNameA' + (_addiX) + '')*1)));
__context__.pop();
_straddiX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _addiXNameA' + (_addiX) + '' + '\n';
_straddiX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _addiXNameB' + (_addiX) + '' + '\n';
__context__.push('(signedX_inc@313)');
_straddiX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addiXNameB' + (_addiX) + '')*1))?('_addiXNameB' + (_addiX) + ''):(('_addiXNameB' + (_addiX) + '')*1)));
__context__.pop();
_straddiX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _addiXNameB' + (_addiX) + '' + '\n';
_straddiX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    _addiXName' + (_addiX) + '' + '\n';
__context__.push('(signedX_inc@314)');
_straddiX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addiXName' + (_addiX) + '')*1))?('_addiXName' + (_addiX) + ''):(('_addiXName' + (_addiX) + '')*1)));
__context__.pop();
_straddiX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    _addiXName' + (_addiX) + '' + '\n';
_straddiX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _addiXNameA' + (_addiX) + '' + '\n';
__context__.push('(signedX_inc@315)');
_straddiX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addiXNameA' + (_addiX) + '')*1))?('_addiXNameA' + (_addiX) + ''):(('_addiXNameA' + (_addiX) + '')*1)));
__context__.pop();
_straddiX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _addiXNameA' + (_addiX) + '' + '\n';
_straddiX+=__indent() +'#(begin macro)pushX   ' + (X) + ',    ' + (immValue) + '' + '\n';
__context__.push('(signedX_inc@316)');
_straddiX+=pushX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (immValue) + '')*1))?('' + (immValue) + ''):(('' + (immValue) + '')*1)));
__context__.pop();
_straddiX+=__indent() +'#(end macro)pushX   ' + (X) + ',    ' + (immValue) + '' + '\n';
_straddiX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _addiXNameB' + (_addiX) + '' + '\n';
__context__.push('(signedX_inc@317)');
_straddiX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addiXNameB' + (_addiX) + '')*1))?('_addiXNameB' + (_addiX) + ''):(('_addiXNameB' + (_addiX) + '')*1)));
__context__.pop();
_straddiX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _addiXNameB' + (_addiX) + '' + '\n';
_straddiX+=__indent() +'#(begin macro)addvvvX ' + (X) + ',    _addiXName' + (_addiX) + ', _addiXNameA' + (_addiX) + ',    _addiXNameB' + (_addiX) + '' + '\n';
__context__.push('(signedX_inc@318)');
_straddiX+=addvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addiXName' + (_addiX) + '')*1))?('_addiXName' + (_addiX) + ''):(('_addiXName' + (_addiX) + '')*1)),((isNaN(('_addiXNameA' + (_addiX) + '')*1))?('_addiXNameA' + (_addiX) + ''):(('_addiXNameA' + (_addiX) + '')*1)),((isNaN(('_addiXNameB' + (_addiX) + '')*1))?('_addiXNameB' + (_addiX) + ''):(('_addiXNameB' + (_addiX) + '')*1)));
__context__.pop();
_straddiX+=__indent() +'#(end macro)addvvvX ' + (X) + ',    _addiXName' + (_addiX) + ', _addiXNameA' + (_addiX) + ',    _addiXNameB' + (_addiX) + '' + '\n';
_straddiX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@319)');
_straddiX+=scope_end();
__context__.pop();
_straddiX+=__indent() +'#(end macro)scope_end' + '\n';
return _straddiX;
}
_str_main+=__indent() +' #@(signedX_inc@321)'+ __context() + '\n';
_str_main+=__indent() +'# macro subviX(X,name, immValue) : name -= immediate value #@(signedX_inc@322)'+ __context() + '\n';
var _subviX; _subviX=0;
var subviX = function(X,name,immValue){
 _subviX++;
var _strsubviX; 
_strsubviX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro subviX(X,name,immValue)[' + [X,name,immValue] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro subviX(X,name,immValue)[' + [X,name,immValue] +']';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro subviX(X,name,immValue)[' + [X,name,immValue] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro subviX(X,name,immValue)[' + [X,name,immValue] +']';
_strsubviX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@324)');
_strsubviX+=scope_begin();
__context__.pop();
_strsubviX+=__indent() +'#(end macro)scope_begin' + '\n';
_strsubviX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _subviXNameA' + (_subviX) + '' + '\n';
__context__.push('(signedX_inc@325)');
_strsubviX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subviXNameA' + (_subviX) + '')*1))?('_subviXNameA' + (_subviX) + ''):(('_subviXNameA' + (_subviX) + '')*1)));
__context__.pop();
_strsubviX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _subviXNameA' + (_subviX) + '' + '\n';
_strsubviX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _subviXNameB' + (_subviX) + '' + '\n';
__context__.push('(signedX_inc@326)');
_strsubviX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subviXNameB' + (_subviX) + '')*1))?('_subviXNameB' + (_subviX) + ''):(('_subviXNameB' + (_subviX) + '')*1)));
__context__.pop();
_strsubviX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _subviXNameB' + (_subviX) + '' + '\n';
_strsubviX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
__context__.push('(signedX_inc@327)');
_strsubviX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_strsubviX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
_strsubviX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _subviXNameA' + (_subviX) + '' + '\n';
__context__.push('(signedX_inc@328)');
_strsubviX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subviXNameA' + (_subviX) + '')*1))?('_subviXNameA' + (_subviX) + ''):(('_subviXNameA' + (_subviX) + '')*1)));
__context__.pop();
_strsubviX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _subviXNameA' + (_subviX) + '' + '\n';
_strsubviX+=__indent() +'#(begin macro)pushX   ' + (X) + ',    ' + (immValue) + '' + '\n';
__context__.push('(signedX_inc@329)');
_strsubviX+=pushX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (immValue) + '')*1))?('' + (immValue) + ''):(('' + (immValue) + '')*1)));
__context__.pop();
_strsubviX+=__indent() +'#(end macro)pushX   ' + (X) + ',    ' + (immValue) + '' + '\n';
_strsubviX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _subviXNameB' + (_subviX) + '' + '\n';
__context__.push('(signedX_inc@330)');
_strsubviX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subviXNameB' + (_subviX) + '')*1))?('_subviXNameB' + (_subviX) + ''):(('_subviXNameB' + (_subviX) + '')*1)));
__context__.pop();
_strsubviX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _subviXNameB' + (_subviX) + '' + '\n';
_strsubviX+=__indent() +'#(begin macro)subvvvX ' + (X) + ',    ' + (name) + ', _subviXNameA' + (_subviX) + ',  _subviXNameB' + (_subviX) + '' + '\n';
__context__.push('(signedX_inc@331)');
_strsubviX+=subvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)),((isNaN(('_subviXNameA' + (_subviX) + '')*1))?('_subviXNameA' + (_subviX) + ''):(('_subviXNameA' + (_subviX) + '')*1)),((isNaN(('_subviXNameB' + (_subviX) + '')*1))?('_subviXNameB' + (_subviX) + ''):(('_subviXNameB' + (_subviX) + '')*1)));
__context__.pop();
_strsubviX+=__indent() +'#(end macro)subvvvX ' + (X) + ',    ' + (name) + ', _subviXNameA' + (_subviX) + ',  _subviXNameB' + (_subviX) + '' + '\n';
_strsubviX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@332)');
_strsubviX+=scope_end();
__context__.pop();
_strsubviX+=__indent() +'#(end macro)scope_end' + '\n';
return _strsubviX;
}
_str_main+=__indent() +' #@(signedX_inc@334)'+ __context() + '\n';
_str_main+=__indent() +'# macro subiX(X,immValue) : X*8 bits head of stack value -= immediate value #@(signedX_inc@335)'+ __context() + '\n';
var _subiX; _subiX=0;
var subiX = function(X,immValue){
 _subiX++;
var _strsubiX; 
_strsubiX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro subiX(X,immValue)[' + [X,immValue] +']';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro subiX(X,immValue)[' + [X,immValue] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro subiX(X,immValue)[' + [X,immValue] +']';
_strsubiX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _subiXName' + (_subiX) + ', 0' + '\n';
__context__.push('(signedX_inc@337)');
_strsubiX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subiXName' + (_subiX) + '')*1))?('_subiXName' + (_subiX) + ''):(('_subiXName' + (_subiX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strsubiX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _subiXName' + (_subiX) + ', 0' + '\n';
_strsubiX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@338)');
_strsubiX+=scope_begin();
__context__.pop();
_strsubiX+=__indent() +'#(end macro)scope_begin' + '\n';
_strsubiX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _subixNameA' + (_subiX) + '' + '\n';
__context__.push('(signedX_inc@339)');
_strsubiX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subixNameA' + (_subiX) + '')*1))?('_subixNameA' + (_subiX) + ''):(('_subixNameA' + (_subiX) + '')*1)));
__context__.pop();
_strsubiX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _subixNameA' + (_subiX) + '' + '\n';
_strsubiX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _subixNameB' + (_subiX) + '' + '\n';
__context__.push('(signedX_inc@340)');
_strsubiX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subixNameB' + (_subiX) + '')*1))?('_subixNameB' + (_subiX) + ''):(('_subixNameB' + (_subiX) + '')*1)));
__context__.pop();
_strsubiX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _subixNameB' + (_subiX) + '' + '\n';
_strsubiX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    _subiXName' + (_subiX) + '' + '\n';
__context__.push('(signedX_inc@341)');
_strsubiX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subiXName' + (_subiX) + '')*1))?('_subiXName' + (_subiX) + ''):(('_subiXName' + (_subiX) + '')*1)));
__context__.pop();
_strsubiX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    _subiXName' + (_subiX) + '' + '\n';
_strsubiX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _subixNameA' + (_subiX) + '' + '\n';
__context__.push('(signedX_inc@342)');
_strsubiX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subixNameA' + (_subiX) + '')*1))?('_subixNameA' + (_subiX) + ''):(('_subixNameA' + (_subiX) + '')*1)));
__context__.pop();
_strsubiX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _subixNameA' + (_subiX) + '' + '\n';
_strsubiX+=__indent() +'#(begin macro)pushX   ' + (X) + ',    ' + (immValue) + '' + '\n';
__context__.push('(signedX_inc@343)');
_strsubiX+=pushX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (immValue) + '')*1))?('' + (immValue) + ''):(('' + (immValue) + '')*1)));
__context__.pop();
_strsubiX+=__indent() +'#(end macro)pushX   ' + (X) + ',    ' + (immValue) + '' + '\n';
_strsubiX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _subixNameB' + (_subiX) + '' + '\n';
__context__.push('(signedX_inc@344)');
_strsubiX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subixNameB' + (_subiX) + '')*1))?('_subixNameB' + (_subiX) + ''):(('_subixNameB' + (_subiX) + '')*1)));
__context__.pop();
_strsubiX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _subixNameB' + (_subiX) + '' + '\n';
_strsubiX+=__indent() +'#(begin macro)subvvvX ' + (X) + ',    _subiXName' + (_subiX) + ', _subiXNameA' + (_subiX) + ',    _subiXNameB' + (_subiX) + '' + '\n';
__context__.push('(signedX_inc@345)');
_strsubiX+=subvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subiXName' + (_subiX) + '')*1))?('_subiXName' + (_subiX) + ''):(('_subiXName' + (_subiX) + '')*1)),((isNaN(('_subiXNameA' + (_subiX) + '')*1))?('_subiXNameA' + (_subiX) + ''):(('_subiXNameA' + (_subiX) + '')*1)),((isNaN(('_subiXNameB' + (_subiX) + '')*1))?('_subiXNameB' + (_subiX) + ''):(('_subiXNameB' + (_subiX) + '')*1)));
__context__.pop();
_strsubiX+=__indent() +'#(end macro)subvvvX ' + (X) + ',    _subiXName' + (_subiX) + ', _subiXNameA' + (_subiX) + ',    _subiXNameB' + (_subiX) + '' + '\n';
_strsubiX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@346)');
_strsubiX+=scope_end();
__context__.pop();
_strsubiX+=__indent() +'#(end macro)scope_end' + '\n';
return _strsubiX;
}
_str_main+=__indent() +' #@(signedX_inc@348)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@349)'+ __context() + '\n';
_str_main+=__indent() +'# macro addvvvX(X,name, nameA, nameB) : name = nameA + nameB #@(signedX_inc@350)'+ __context() + '\n';
var _addvvvX; _addvvvX=0;
var addvvvX = function(X,name, nameA, nameB){
 _addvvvX++;
var _straddvvvX; 
_straddvvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro addvvvX(X,name, nameA, nameB)[' + [X,name, nameA, nameB] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro addvvvX(X,name, nameA, nameB)[' + [X,name, nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro addvvvX(X,name, nameA, nameB)[' + [X,name, nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro addvvvX(X,name, nameA, nameB)[' + [X,name, nameA, nameB] +']';
if (arguments.length != 4) throw 'Too much arguments provided to macro addvvvX(X,name, nameA, nameB)[' + [X,name, nameA, nameB] +']';
_straddvvvX+=__indent() +'push    ' + (nameA) + '_s #@(signedX_inc@352)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    ' + (nameB) + '_s #@(signedX_inc@353)'+ __context() + '\n';
_straddvvvX+=__indent() +'or #@(signedX_inc@354)'+ __context() + '\n';
_straddvvvX+=__indent() +'not #@(signedX_inc@355)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    ' + (nameA) + '_s #@(signedX_inc@356)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    ' + (nameB) + '_s #@(signedX_inc@357)'+ __context() + '\n';
_straddvvvX+=__indent() +'and #@(signedX_inc@358)'+ __context() + '\n';
_straddvvvX+=__indent() +'or #@(signedX_inc@359)'+ __context() + '\n';
_straddvvvX+=__indent() +'if      # nameA and nameB are both positive or negative #@(signedX_inc@360)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'push    ' + (nameA) + '_s #@(signedX_inc@361)'+ __context() + '\n';
_straddvvvX+=__indent() +'pop     ' + (name) + '_s    # name has same sign of nameA and nameB #@(signedX_inc@362)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    0 #@(signedX_inc@363)'+ __context() + '\n';
_straddvvvX+=__indent() +'sbm     _addvvvXCarryP' + (_addvvvX) + ' #@(signedX_inc@364)'+ __context() + '\n';
for (var xx = 0 ; xx < X; xx++) {
_straddvvvX+=__indent() +'push    ' + (nameA) + '_' + (xx) + ' #@(signedX_inc@366)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    ' + (nameB) + '_' + (xx) + ' #@(signedX_inc@367)'+ __context() + '\n';
_straddvvvX+=__indent() +'#(begin macro)addof' + '\n';
__context__.push('(signedX_inc@368)');
_straddvvvX+=addof();
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)addof' + '\n';
_straddvvvX+=__indent() +'push    _addvvvXCarryP' + (_addvvvX) + ' #@(signedX_inc@369)'+ __context() + '\n';
_straddvvvX+=__indent() +'#(begin macro)addof' + '\n';
__context__.push('(signedX_inc@370)');
_straddvvvX+=addof();
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)addof' + '\n';
_straddvvvX+=__indent() +'pop     ' + (name) + '_' + (xx) + ' #@(signedX_inc@371)'+ __context() + '\n';
_straddvvvX+=__indent() +'add #@(signedX_inc@372)'+ __context() + '\n';
_straddvvvX+=__indent() +'pop     _addvvvXCarryP' + (_addvvvX) + ' #@(signedX_inc@373)'+ __context() + '\n';
}
_straddvvvX+=__indent() +'pop     ' + (name) + '_c #@(signedX_inc@375)'+ __context() + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'else  # nameA has a different sign of nameB #@(signedX_inc@376)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@377)');
_straddvvvX+=scope_begin();
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)scope_begin' + '\n';
_straddvvvX+=__indent() +'#(begin macro)lvar    _asupb' + (_addvvvX) + ',   0  # by default absA is not sup to absB' + '\n';
__context__.push('(signedX_inc@378)');
_straddvvvX+=lvar(((isNaN(('_asupb' + (_addvvvX) + '')*1))?('_asupb' + (_addvvvX) + ''):(('_asupb' + (_addvvvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)lvar    _asupb' + (_addvvvX) + ',   0  # by default absA is not sup to absB' + '\n';
_straddvvvX+=__indent() +'#(begin macro)lvar    _aequb' + (_addvvvX) + ',   0  # by default absA is not equal to absB' + '\n';
__context__.push('(signedX_inc@379)');
_straddvvvX+=lvar(((isNaN(('_aequb' + (_addvvvX) + '')*1))?('_aequb' + (_addvvvX) + ''):(('_aequb' + (_addvvvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)lvar    _aequb' + (_addvvvX) + ',   0  # by default absA is not equal to absB' + '\n';
for (var xx = X-1 ; xx >=0; xx--) {
_straddvvvX+=__indent() +'push    ' + (nameA) + '_' + (xx) + ' #@(signedX_inc@381)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    ' + (nameB) + '_' + (xx) + ' #@(signedX_inc@382)'+ __context() + '\n';
_straddvvvX+=__indent() +'sup #@(signedX_inc@383)'+ __context() + '\n';
_straddvvvX+=__indent() +'if #@(signedX_inc@384)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'at _asupb' + (_addvvvX) + ' #@(signedX_inc@385)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'set 1 #@(signedX_inc@386)'+ __context() + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'ta #@(signedX_inc@387)'+ __context() + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'else #@(signedX_inc@388)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'push    ' + (nameA) + '_' + (xx) + ' #@(signedX_inc@389)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    ' + (nameB) + '_' + (xx) + ' #@(signedX_inc@390)'+ __context() + '\n';
_straddvvvX+=__indent() +'diff #@(signedX_inc@391)'+ __context() + '\n';
_straddvvvX+=__indent() +'if #@(signedX_inc@392)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'at _asupb' + (_addvvvX) + ' #@(signedX_inc@393)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'reset #@(signedX_inc@394)'+ __context() + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'ta #@(signedX_inc@395)'+ __context() + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'else #@(signedX_inc@396)'+ __context() + '\n';
__blockLevel__++;
}
_straddvvvX+=__indent() +'at _aequb' + (_addvvvX) + ' #@(signedX_inc@398)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'set 1 #@(signedX_inc@399)'+ __context() + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'ta #@(signedX_inc@400)'+ __context() + '\n';
for (var xx = 0 ; xx < X ; xx++) {
__blockLevel__--;
_straddvvvX+=__indent() +'fi #@(signedX_inc@402)'+ __context() + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'fi #@(signedX_inc@403)'+ __context() + '\n';
}
_straddvvvX+=__indent() +'push _asupb' + (_addvvvX) + ' #@(signedX_inc@405)'+ __context() + '\n';
_straddvvvX+=__indent() +'if  # absA > absB : do  absA-absB with sign of A #@(signedX_inc@406)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'# print("absA > absB\\n") #@(signedX_inc@407)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    ' + (nameA) + '_s #@(signedX_inc@408)'+ __context() + '\n';
_straddvvvX+=__indent() +'pop     ' + (name) + '_s    # name has same sign of nameA #@(signedX_inc@409)'+ __context() + '\n';
_straddvvvX+=__indent() +' #@(signedX_inc@410)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    0 #@(signedX_inc@411)'+ __context() + '\n';
_straddvvvX+=__indent() +'sbm     _addvvvXCarry' + (_addvvvX) + ' #@(signedX_inc@412)'+ __context() + '\n';
for (var xx = 0 ; xx < X; xx++) {
_straddvvvX+=__indent() +'push    ' + (nameA) + '_' + (xx) + ' #@(signedX_inc@414)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    ' + (nameB) + '_' + (xx) + ' #@(signedX_inc@415)'+ __context() + '\n';
_straddvvvX+=__indent() +'#(begin macro)subof' + '\n';
__context__.push('(signedX_inc@416)');
_straddvvvX+=subof();
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)subof' + '\n';
_straddvvvX+=__indent() +'push    _addvvvXCarry' + (_addvvvX) + ' #@(signedX_inc@417)'+ __context() + '\n';
_straddvvvX+=__indent() +'#(begin macro)subof' + '\n';
__context__.push('(signedX_inc@418)');
_straddvvvX+=subof();
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)subof' + '\n';
_straddvvvX+=__indent() +'pop     ' + (name) + '_' + (xx) + ' #@(signedX_inc@419)'+ __context() + '\n';
_straddvvvX+=__indent() +'add #@(signedX_inc@420)'+ __context() + '\n';
_straddvvvX+=__indent() +'pop     _addvvvXCarry' + (_addvvvX) + ' #@(signedX_inc@421)'+ __context() + '\n';
}
_straddvvvX+=__indent() +'pop     ' + (name) + '_c #@(signedX_inc@423)'+ __context() + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'else # absB >= absA : #@(signedX_inc@424)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'push    _aequb' + (_addvvvX) + ' #@(signedX_inc@425)'+ __context() + '\n';
_straddvvvX+=__indent() +'if # absA == absB , then name =0 (opposite sign then sum is zero) #@(signedX_inc@426)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'#(begin macro)setvX   ' + (X) + ',    ' + (name) + ', 0' + '\n';
__context__.push('(signedX_inc@427)');
_straddvvvX+=setvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)setvX   ' + (X) + ',    ' + (name) + ', 0' + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'else # absA < absB : do   absB-absA with sign of B #@(signedX_inc@428)'+ __context() + '\n';
__blockLevel__++;
_straddvvvX+=__indent() +'push    ' + (nameB) + '_s #@(signedX_inc@429)'+ __context() + '\n';
_straddvvvX+=__indent() +'pop     ' + (name) + '_s    # name has same sign of nameB #@(signedX_inc@430)'+ __context() + '\n';
_straddvvvX+=__indent() +' #@(signedX_inc@431)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    0 #@(signedX_inc@432)'+ __context() + '\n';
_straddvvvX+=__indent() +'sbm     _addvvvXCarry' + (_addvvvX) + ' #@(signedX_inc@433)'+ __context() + '\n';
for (var xx = 0 ; xx < X; xx++) {
_straddvvvX+=__indent() +'push    ' + (nameB) + '_' + (xx) + ' #@(signedX_inc@435)'+ __context() + '\n';
_straddvvvX+=__indent() +'push    ' + (nameA) + '_' + (xx) + ' #@(signedX_inc@436)'+ __context() + '\n';
_straddvvvX+=__indent() +'#(begin macro)subof' + '\n';
__context__.push('(signedX_inc@437)');
_straddvvvX+=subof();
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)subof' + '\n';
_straddvvvX+=__indent() +'push    _addvvvXCarry' + (_addvvvX) + ' #@(signedX_inc@438)'+ __context() + '\n';
_straddvvvX+=__indent() +'#(begin macro)subof' + '\n';
__context__.push('(signedX_inc@439)');
_straddvvvX+=subof();
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)subof' + '\n';
_straddvvvX+=__indent() +'pop     ' + (name) + '_' + (xx) + ' #@(signedX_inc@440)'+ __context() + '\n';
_straddvvvX+=__indent() +'add #@(signedX_inc@441)'+ __context() + '\n';
_straddvvvX+=__indent() +'pop     _addvvvXCarry' + (_addvvvX) + ' #@(signedX_inc@442)'+ __context() + '\n';
}
_straddvvvX+=__indent() +'pop     ' + (name) + '_c #@(signedX_inc@444)'+ __context() + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'fi #@(signedX_inc@445)'+ __context() + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'fi #@(signedX_inc@446)'+ __context() + '\n';
_straddvvvX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@447)');
_straddvvvX+=scope_end();
__context__.pop();
_straddvvvX+=__indent() +'#(end macro)scope_end' + '\n';
__blockLevel__--;
_straddvvvX+=__indent() +'fi #@(signedX_inc@448)'+ __context() + '\n';
return _straddvvvX;
}
_str_main+=__indent() +' #@(signedX_inc@450)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@451)'+ __context() + '\n';
_str_main+=__indent() +'# macro addvvX(X,name, nameA) : name += nameA #@(signedX_inc@452)'+ __context() + '\n';
var _addvvX; _addvvX=0;
var addvvX = function(X,name, nameA){
 _addvvX++;
var _straddvvX; 
_straddvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro addvvX(X,name, nameA)[' + [X,name, nameA] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro addvvX(X,name, nameA)[' + [X,name, nameA] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro addvvX(X,name, nameA)[' + [X,name, nameA] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro addvvX(X,name, nameA)[' + [X,name, nameA] +']';
_straddvvX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@454)');
_straddvvX+=scope_begin();
__context__.pop();
_straddvvX+=__indent() +'#(end macro)scope_begin' + '\n';
_straddvvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _addvvXnameB' + (_addvvX) + '' + '\n';
__context__.push('(signedX_inc@455)');
_straddvvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addvvXnameB' + (_addvvX) + '')*1))?('_addvvXnameB' + (_addvvX) + ''):(('_addvvXnameB' + (_addvvX) + '')*1)));
__context__.pop();
_straddvvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _addvvXnameB' + (_addvvX) + '' + '\n';
_straddvvX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
__context__.push('(signedX_inc@456)');
_straddvvX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_straddvvX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
_straddvvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _addvvXnameB' + (_addvvX) + '' + '\n';
__context__.push('(signedX_inc@457)');
_straddvvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addvvXnameB' + (_addvvX) + '')*1))?('_addvvXnameB' + (_addvvX) + ''):(('_addvvXnameB' + (_addvvX) + '')*1)));
__context__.pop();
_straddvvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _addvvXnameB' + (_addvvX) + '' + '\n';
_straddvvX+=__indent() +'#(begin macro)addvvvX ' + (X) + ',    ' + (name) + ', _addvvXnameB' + (_addvvX) + ',  ' + (nameA) + '' + '\n';
__context__.push('(signedX_inc@458)');
_straddvvX+=addvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)),((isNaN(('_addvvXnameB' + (_addvvX) + '')*1))?('_addvvXnameB' + (_addvvX) + ''):(('_addvvXnameB' + (_addvvX) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)));
__context__.pop();
_straddvvX+=__indent() +'#(end macro)addvvvX ' + (X) + ',    ' + (name) + ', _addvvXnameB' + (_addvvX) + ',  ' + (nameA) + '' + '\n';
_straddvvX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@459)');
_straddvvX+=scope_end();
__context__.pop();
_straddvvX+=__indent() +'#(end macro)scope_end' + '\n';
return _straddvvX;
}
_str_main+=__indent() +' #@(signedX_inc@461)'+ __context() + '\n';
_str_main+=__indent() +'# macro addvX(X,nameA) : head stack += nameA #@(signedX_inc@462)'+ __context() + '\n';
var _addvX; _addvX=0;
var addvX = function(nameA){
 _addvX++;
var _straddvX; 
_straddvX='';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro addvX(nameA)[' + [nameA] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro addvX(nameA)[' + [nameA] +']';
_straddvX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _addvXName' + (_addvX) + ', 0' + '\n';
__context__.push('(signedX_inc@464)');
_straddvX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addvXName' + (_addvX) + '')*1))?('_addvXName' + (_addvX) + ''):(('_addvXName' + (_addvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_straddvX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _addvXName' + (_addvX) + ', 0' + '\n';
_straddvX+=__indent() +'#(begin macro)addvvX  ' + (X) + ',    _addvXName' + (_addvX) + ', ' + (nameA) + '' + '\n';
__context__.push('(signedX_inc@465)');
_straddvX+=addvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addvXName' + (_addvX) + '')*1))?('_addvXName' + (_addvX) + ''):(('_addvXName' + (_addvX) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)));
__context__.pop();
_straddvX+=__indent() +'#(end macro)addvvX  ' + (X) + ',    _addvXName' + (_addvX) + ', ' + (nameA) + '' + '\n';
return _straddvX;
}
_str_main+=__indent() +' #@(signedX_inc@467)'+ __context() + '\n';
_str_main+=__indent() +'# macro addX(X) : stack-1 = stack-1 + stack ; stack-- #@(signedX_inc@468)'+ __context() + '\n';
var _addX; _addX=0;
var addX = function(X){
 _addX++;
var _straddX; 
_straddX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro addX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro addX(X)[' + [X] +']';
_straddX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _addXName' + (_addX) + ',   1' + '\n';
__context__.push('(signedX_inc@470)');
_straddX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addXName' + (_addX) + '')*1))?('_addXName' + (_addX) + ''):(('_addXName' + (_addX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_straddX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _addXName' + (_addX) + ',   1' + '\n';
_straddX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _addXNameB' + (_addX) + ',  0' + '\n';
__context__.push('(signedX_inc@471)');
_straddX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addXNameB' + (_addX) + '')*1))?('_addXNameB' + (_addX) + ''):(('_addXNameB' + (_addX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_straddX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _addXNameB' + (_addX) + ',  0' + '\n';
_straddX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@472)');
_straddX+=scope_begin();
__context__.pop();
_straddX+=__indent() +'#(end macro)scope_begin' + '\n';
_straddX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _addXNameA' + (_addX) + '' + '\n';
__context__.push('(signedX_inc@473)');
_straddX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addXNameA' + (_addX) + '')*1))?('_addXNameA' + (_addX) + ''):(('_addXNameA' + (_addX) + '')*1)));
__context__.pop();
_straddX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _addXNameA' + (_addX) + '' + '\n';
_straddX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    _addXName' + (_addX) + '' + '\n';
__context__.push('(signedX_inc@474)');
_straddX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addXName' + (_addX) + '')*1))?('_addXName' + (_addX) + ''):(('_addXName' + (_addX) + '')*1)));
__context__.pop();
_straddX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    _addXName' + (_addX) + '' + '\n';
_straddX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _addXNameA' + (_addX) + '' + '\n';
__context__.push('(signedX_inc@475)');
_straddX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addXNameA' + (_addX) + '')*1))?('_addXNameA' + (_addX) + ''):(('_addXNameA' + (_addX) + '')*1)));
__context__.pop();
_straddX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _addXNameA' + (_addX) + '' + '\n';
_straddX+=__indent() +'#(begin macro)addvvvX ' + (X) + ',    _addXName' + (_addX) + ',   _addXNameA' + (_addX) + ',  _addXNameB' + (_addX) + '' + '\n';
__context__.push('(signedX_inc@476)');
_straddX+=addvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_addXName' + (_addX) + '')*1))?('_addXName' + (_addX) + ''):(('_addXName' + (_addX) + '')*1)),((isNaN(('_addXNameA' + (_addX) + '')*1))?('_addXNameA' + (_addX) + ''):(('_addXNameA' + (_addX) + '')*1)),((isNaN(('_addXNameB' + (_addX) + '')*1))?('_addXNameB' + (_addX) + ''):(('_addXNameB' + (_addX) + '')*1)));
__context__.pop();
_straddX+=__indent() +'#(end macro)addvvvX ' + (X) + ',    _addXName' + (_addX) + ',   _addXNameA' + (_addX) + ',  _addXNameB' + (_addX) + '' + '\n';
_straddX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@477)');
_straddX+=scope_end();
__context__.pop();
_straddX+=__indent() +'#(end macro)scope_end' + '\n';
_straddX+=__indent() +'#(begin macro)dropX   ' + (X) + '' + '\n';
__context__.push('(signedX_inc@478)');
_straddX+=dropX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)));
__context__.pop();
_straddX+=__indent() +'#(end macro)dropX   ' + (X) + '' + '\n';
return _straddX;
}
_str_main+=__indent() +' #@(signedX_inc@480)'+ __context() + '\n';
_str_main+=__indent() +'# macro subvvvX(X,name, nameA, nameB) : name = nameA - nameB #@(signedX_inc@481)'+ __context() + '\n';
var _subvvvX; _subvvvX=0;
var subvvvX = function(X, name, nameA, nameB){
 _subvvvX++;
var _strsubvvvX; 
_strsubvvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro subvvvX(X, name, nameA, nameB)[' + [X, name, nameA, nameB] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro subvvvX(X, name, nameA, nameB)[' + [X, name, nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro subvvvX(X, name, nameA, nameB)[' + [X, name, nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro subvvvX(X, name, nameA, nameB)[' + [X, name, nameA, nameB] +']';
if (arguments.length != 4) throw 'Too much arguments provided to macro subvvvX(X, name, nameA, nameB)[' + [X, name, nameA, nameB] +']';
_strsubvvvX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@483)');
_strsubvvvX+=scope_begin();
__context__.pop();
_strsubvvvX+=__indent() +'#(end macro)scope_begin' + '\n';
_strsubvvvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _negNameB' + (_subvvvX) + '' + '\n';
__context__.push('(signedX_inc@484)');
_strsubvvvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_negNameB' + (_subvvvX) + '')*1))?('_negNameB' + (_subvvvX) + ''):(('_negNameB' + (_subvvvX) + '')*1)));
__context__.pop();
_strsubvvvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _negNameB' + (_subvvvX) + '' + '\n';
_strsubvvvX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (nameB) + '' + '\n';
__context__.push('(signedX_inc@485)');
_strsubvvvX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameB) + '')*1))?('' + (nameB) + ''):(('' + (nameB) + '')*1)));
__context__.pop();
_strsubvvvX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (nameB) + '' + '\n';
_strsubvvvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _negNameB' + (_subvvvX) + '' + '\n';
__context__.push('(signedX_inc@486)');
_strsubvvvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_negNameB' + (_subvvvX) + '')*1))?('_negNameB' + (_subvvvX) + ''):(('_negNameB' + (_subvvvX) + '')*1)));
__context__.pop();
_strsubvvvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _negNameB' + (_subvvvX) + '' + '\n';
_strsubvvvX+=__indent() +'#(begin macro)negvX   ' + (X) + ',    _negNameB' + (_subvvvX) + '' + '\n';
__context__.push('(signedX_inc@487)');
_strsubvvvX+=negvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_negNameB' + (_subvvvX) + '')*1))?('_negNameB' + (_subvvvX) + ''):(('_negNameB' + (_subvvvX) + '')*1)));
__context__.pop();
_strsubvvvX+=__indent() +'#(end macro)negvX   ' + (X) + ',    _negNameB' + (_subvvvX) + '' + '\n';
_strsubvvvX+=__indent() +'#(begin macro)addvvvX ' + (X) + ',    ' + (name) + ', ' + (nameA) + ',    _negNameB' + (_subvvvX) + '' + '\n';
__context__.push('(signedX_inc@488)');
_strsubvvvX+=addvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)),((isNaN(('_negNameB' + (_subvvvX) + '')*1))?('_negNameB' + (_subvvvX) + ''):(('_negNameB' + (_subvvvX) + '')*1)));
__context__.pop();
_strsubvvvX+=__indent() +'#(end macro)addvvvX ' + (X) + ',    ' + (name) + ', ' + (nameA) + ',    _negNameB' + (_subvvvX) + '' + '\n';
_strsubvvvX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@489)');
_strsubvvvX+=scope_end();
__context__.pop();
_strsubvvvX+=__indent() +'#(end macro)scope_end' + '\n';
return _strsubvvvX;
}
_str_main+=__indent() +' #@(signedX_inc@491)'+ __context() + '\n';
_str_main+=__indent() +'# macro subvvX(X,name, nameA) : name -= nameA #@(signedX_inc@492)'+ __context() + '\n';
var _subvvX; _subvvX=0;
var subvvX = function(X,name, nameA){
 _subvvX++;
var _strsubvvX; 
_strsubvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro subvvX(X,name, nameA)[' + [X,name, nameA] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro subvvX(X,name, nameA)[' + [X,name, nameA] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro subvvX(X,name, nameA)[' + [X,name, nameA] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro subvvX(X,name, nameA)[' + [X,name, nameA] +']';
_strsubvvX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@494)');
_strsubvvX+=scope_begin();
__context__.pop();
_strsubvvX+=__indent() +'#(end macro)scope_begin' + '\n';
_strsubvvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _subvvXNameB' + (_subvvX) + '' + '\n';
__context__.push('(signedX_inc@495)');
_strsubvvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subvvXNameB' + (_subvvX) + '')*1))?('_subvvXNameB' + (_subvvX) + ''):(('_subvvXNameB' + (_subvvX) + '')*1)));
__context__.pop();
_strsubvvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _subvvXNameB' + (_subvvX) + '' + '\n';
_strsubvvX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
__context__.push('(signedX_inc@496)');
_strsubvvX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_strsubvvX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
_strsubvvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _subvvXNameB' + (_subvvX) + '' + '\n';
__context__.push('(signedX_inc@497)');
_strsubvvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subvvXNameB' + (_subvvX) + '')*1))?('_subvvXNameB' + (_subvvX) + ''):(('_subvvXNameB' + (_subvvX) + '')*1)));
__context__.pop();
_strsubvvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _subvvXNameB' + (_subvvX) + '' + '\n';
_strsubvvX+=__indent() +'#(begin macro)subvvvX ' + (X) + ',    ' + (name) + ', _subvvXNameB' + (_subvvX) + ',  ' + (nameA) + '' + '\n';
__context__.push('(signedX_inc@498)');
_strsubvvX+=subvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)),((isNaN(('_subvvXNameB' + (_subvvX) + '')*1))?('_subvvXNameB' + (_subvvX) + ''):(('_subvvXNameB' + (_subvvX) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)));
__context__.pop();
_strsubvvX+=__indent() +'#(end macro)subvvvX ' + (X) + ',    ' + (name) + ', _subvvXNameB' + (_subvvX) + ',  ' + (nameA) + '' + '\n';
_strsubvvX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@499)');
_strsubvvX+=scope_end();
__context__.pop();
_strsubvvX+=__indent() +'#(end macro)scope_end' + '\n';
return _strsubvvX;
}
_str_main+=__indent() +' #@(signedX_inc@501)'+ __context() + '\n';
_str_main+=__indent() +'# macro subvX(X,nameB) : head stack -= nameB #@(signedX_inc@502)'+ __context() + '\n';
var _subvX; _subvX=0;
var subvX = function(X,nameB){
 _subvX++;
var _strsubvX; 
_strsubvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro subvX(X,nameB)[' + [X,nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro subvX(X,nameB)[' + [X,nameB] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro subvX(X,nameB)[' + [X,nameB] +']';
_strsubvX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _subvXName' + (_subX) + ',  0' + '\n';
__context__.push('(signedX_inc@504)');
_strsubvX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subvXName' + (_subX) + '')*1))?('_subvXName' + (_subX) + ''):(('_subvXName' + (_subX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strsubvX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _subvXName' + (_subX) + ',  0' + '\n';
_strsubvX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@505)');
_strsubvX+=scope_begin();
__context__.pop();
_strsubvX+=__indent() +'#(end macro)scope_begin' + '\n';
_strsubvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _subvXNameA' + (_subX) + '' + '\n';
__context__.push('(signedX_inc@506)');
_strsubvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subvXNameA' + (_subX) + '')*1))?('_subvXNameA' + (_subX) + ''):(('_subvXNameA' + (_subX) + '')*1)));
__context__.pop();
_strsubvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _subvXNameA' + (_subX) + '' + '\n';
_strsubvX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    _subvXName' + (_subX) + '' + '\n';
__context__.push('(signedX_inc@507)');
_strsubvX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subvXName' + (_subX) + '')*1))?('_subvXName' + (_subX) + ''):(('_subvXName' + (_subX) + '')*1)));
__context__.pop();
_strsubvX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    _subvXName' + (_subX) + '' + '\n';
_strsubvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _subvXNameA' + (_subX) + '' + '\n';
__context__.push('(signedX_inc@508)');
_strsubvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subvXNameA' + (_subX) + '')*1))?('_subvXNameA' + (_subX) + ''):(('_subvXNameA' + (_subX) + '')*1)));
__context__.pop();
_strsubvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _subvXNameA' + (_subX) + '' + '\n';
_strsubvX+=__indent() +'#(begin macro)subvvvX ' + (X) + ',    _subvXName' + (_subX) + ',  _subvXNameA' + (_subX) + ', nameB' + '\n';
__context__.push('(signedX_inc@509)');
_strsubvX+=subvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subvXName' + (_subX) + '')*1))?('_subvXName' + (_subX) + ''):(('_subvXName' + (_subX) + '')*1)),((isNaN(('_subvXNameA' + (_subX) + '')*1))?('_subvXNameA' + (_subX) + ''):(('_subvXNameA' + (_subX) + '')*1)),((isNaN(('nameB')*1))?('nameB'):(('nameB')*1)));
__context__.pop();
_strsubvX+=__indent() +'#(end macro)subvvvX ' + (X) + ',    _subvXName' + (_subX) + ',  _subvXNameA' + (_subX) + ', nameB' + '\n';
_strsubvX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@510)');
_strsubvX+=scope_end();
__context__.pop();
_strsubvX+=__indent() +'#(end macro)scope_end' + '\n';
return _strsubvX;
}
_str_main+=__indent() +' #@(signedX_inc@512)'+ __context() + '\n';
_str_main+=__indent() +'# macro subX(X) : stack-1 = stack-1 - stack ; stack-- #@(signedX_inc@513)'+ __context() + '\n';
var _subX; _subX=0;
var subX = function(X){
 _subX++;
var _strsubX; 
_strsubX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro subX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro subX(X)[' + [X] +']';
_strsubX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _subXName' + (_subX) + ',   1' + '\n';
__context__.push('(signedX_inc@515)');
_strsubX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subXName' + (_subX) + '')*1))?('_subXName' + (_subX) + ''):(('_subXName' + (_subX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strsubX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _subXName' + (_subX) + ',   1' + '\n';
_strsubX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _subXNameB' + (_subX) + ',  0' + '\n';
__context__.push('(signedX_inc@516)');
_strsubX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subXNameB' + (_subX) + '')*1))?('_subXNameB' + (_subX) + ''):(('_subXNameB' + (_subX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strsubX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _subXNameB' + (_subX) + ',  0' + '\n';
_strsubX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@517)');
_strsubX+=scope_begin();
__context__.pop();
_strsubX+=__indent() +'#(end macro)scope_begin' + '\n';
_strsubX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _subXNameA' + (_subX) + '' + '\n';
__context__.push('(signedX_inc@518)');
_strsubX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subXNameA' + (_subX) + '')*1))?('_subXNameA' + (_subX) + ''):(('_subXNameA' + (_subX) + '')*1)));
__context__.pop();
_strsubX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _subXNameA' + (_subX) + '' + '\n';
_strsubX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    _subXName' + (_subX) + '' + '\n';
__context__.push('(signedX_inc@519)');
_strsubX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subXName' + (_subX) + '')*1))?('_subXName' + (_subX) + ''):(('_subXName' + (_subX) + '')*1)));
__context__.pop();
_strsubX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    _subXName' + (_subX) + '' + '\n';
_strsubX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _subXNameA' + (_subX) + '' + '\n';
__context__.push('(signedX_inc@520)');
_strsubX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subXNameA' + (_subX) + '')*1))?('_subXNameA' + (_subX) + ''):(('_subXNameA' + (_subX) + '')*1)));
__context__.pop();
_strsubX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _subXNameA' + (_subX) + '' + '\n';
_strsubX+=__indent() +'#(begin macro)subvvvX ' + (X) + ',    _subXName' + (_subX) + ',   _subXNameA' + (_subX) + ',  _subXNameB' + (_subX) + '' + '\n';
__context__.push('(signedX_inc@521)');
_strsubX+=subvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_subXName' + (_subX) + '')*1))?('_subXName' + (_subX) + ''):(('_subXName' + (_subX) + '')*1)),((isNaN(('_subXNameA' + (_subX) + '')*1))?('_subXNameA' + (_subX) + ''):(('_subXNameA' + (_subX) + '')*1)),((isNaN(('_subXNameB' + (_subX) + '')*1))?('_subXNameB' + (_subX) + ''):(('_subXNameB' + (_subX) + '')*1)));
__context__.pop();
_strsubX+=__indent() +'#(end macro)subvvvX ' + (X) + ',    _subXName' + (_subX) + ',   _subXNameA' + (_subX) + ',  _subXNameB' + (_subX) + '' + '\n';
_strsubX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@522)');
_strsubX+=scope_end();
__context__.pop();
_strsubX+=__indent() +'#(end macro)scope_end' + '\n';
_strsubX+=__indent() +'#(begin macro)dropX   ' + (X) + '' + '\n';
__context__.push('(signedX_inc@523)');
_strsubX+=dropX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)));
__context__.pop();
_strsubX+=__indent() +'#(end macro)dropX   ' + (X) + '' + '\n';
return _strsubX;
}
_str_main+=__indent() +' #@(signedX_inc@525)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@526)'+ __context() + '\n';
_str_main+=__indent() +'# algo from https://en.wikipedia.org/wiki/Multiplication_algorithm #@(signedX_inc@527)'+ __context() + '\n';
_str_main+=__indent() +'#multiply(a[1..p], b[1..q], base)                            // Operands containing rightmost digits at index 1 #@(signedX_inc@528)'+ __context() + '\n';
_str_main+=__indent() +'#  product = [1..p+q]                                        // Allocate space for result #@(signedX_inc@529)'+ __context() + '\n';
_str_main+=__indent() +'#  for b_i = 1 to q                                          // for all digits in b #@(signedX_inc@530)'+ __context() + '\n';
_str_main+=__indent() +'#    carry = 0 #@(signedX_inc@531)'+ __context() + '\n';
_str_main+=__indent() +'#    for a_i = 1 to p                                        // for all digits in a #@(signedX_inc@532)'+ __context() + '\n';
_str_main+=__indent() +'#      product[a_i + b_i - 1] += carry + a[a_i] * b[b_i] #@(signedX_inc@533)'+ __context() + '\n';
_str_main+=__indent() +'#      carry = product[a_i + b_i - 1] / base #@(signedX_inc@534)'+ __context() + '\n';
_str_main+=__indent() +'#      product[a_i + b_i - 1] = product[a_i + b_i - 1] mod base #@(signedX_inc@535)'+ __context() + '\n';
_str_main+=__indent() +'#    product[b_i + p] += carry                               // last digit comes from final carry #@(signedX_inc@536)'+ __context() + '\n';
_str_main+=__indent() +'#  return product #@(signedX_inc@537)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@538)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulvvvX(X,name, nameA, nameB) : name = nameA * nameB #@(signedX_inc@539)'+ __context() + '\n';
var _mulvvvX; _mulvvvX=0;
var mulvvvX = function(X, name, nameA, nameB){
 _mulvvvX++;
var _strmulvvvX; 
_strmulvvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro mulvvvX(X, name, nameA, nameB)[' + [X, name, nameA, nameB] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro mulvvvX(X, name, nameA, nameB)[' + [X, name, nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro mulvvvX(X, name, nameA, nameB)[' + [X, name, nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro mulvvvX(X, name, nameA, nameB)[' + [X, name, nameA, nameB] +']';
if (arguments.length != 4) throw 'Too much arguments provided to macro mulvvvX(X, name, nameA, nameB)[' + [X, name, nameA, nameB] +']';
_strmulvvvX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@541)');
_strmulvvvX+=scope_begin();
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)scope_begin' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _mulvvvXabsNameA' + (_mulvvvX) + '' + '\n';
__context__.push('(signedX_inc@542)');
_strmulvvvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulvvvXabsNameA' + (_mulvvvX) + '')*1))?('_mulvvvXabsNameA' + (_mulvvvX) + ''):(('_mulvvvXabsNameA' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _mulvvvXabsNameA' + (_mulvvvX) + '' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (nameA) + '' + '\n';
__context__.push('(signedX_inc@543)');
_strmulvvvX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (nameA) + '' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _mulvvvXabsNameA' + (_mulvvvX) + '' + '\n';
__context__.push('(signedX_inc@544)');
_strmulvvvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulvvvXabsNameA' + (_mulvvvX) + '')*1))?('_mulvvvXabsNameA' + (_mulvvvX) + ''):(('_mulvvvXabsNameA' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _mulvvvXabsNameA' + (_mulvvvX) + '' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)lvar    _mulvvvXsA' + (_mulvvvX) + ',   0' + '\n';
__context__.push('(signedX_inc@545)');
_strmulvvvX+=lvar(((isNaN(('_mulvvvXsA' + (_mulvvvX) + '')*1))?('_mulvvvXsA' + (_mulvvvX) + ''):(('_mulvvvXsA' + (_mulvvvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)lvar    _mulvvvXsA' + (_mulvvvX) + ',   0' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)pushsvX ' + (X) + ',    _mulvvvXabsNameA' + (_mulvvvX) + '' + '\n';
__context__.push('(signedX_inc@546)');
_strmulvvvX+=pushsvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulvvvXabsNameA' + (_mulvvvX) + '')*1))?('_mulvvvXabsNameA' + (_mulvvvX) + ''):(('_mulvvvXabsNameA' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)pushsvX ' + (X) + ',    _mulvvvXabsNameA' + (_mulvvvX) + '' + '\n';
_strmulvvvX+=__indent() +'pop _mulvvvXsA' + (_mulvvvX) + ' #@(signedX_inc@547)'+ __context() + '\n';
_strmulvvvX+=__indent() +'#(begin macro)absvX   ' + (X) + ',    _mulvvvXabsNameA' + (_mulvvvX) + '   # absNameA = abs(nameA)' + '\n';
__context__.push('(signedX_inc@548)');
_strmulvvvX+=absvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulvvvXabsNameA' + (_mulvvvX) + '')*1))?('_mulvvvXabsNameA' + (_mulvvvX) + ''):(('_mulvvvXabsNameA' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)absvX   ' + (X) + ',    _mulvvvXabsNameA' + (_mulvvvX) + '   # absNameA = abs(nameA)' + '\n';
_strmulvvvX+=__indent() +' #@(signedX_inc@549)'+ __context() + '\n';
_strmulvvvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _mulvvvXabsNameB' + (_mulvvvX) + '' + '\n';
__context__.push('(signedX_inc@550)');
_strmulvvvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulvvvXabsNameB' + (_mulvvvX) + '')*1))?('_mulvvvXabsNameB' + (_mulvvvX) + ''):(('_mulvvvXabsNameB' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _mulvvvXabsNameB' + (_mulvvvX) + '' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (nameB) + '' + '\n';
__context__.push('(signedX_inc@551)');
_strmulvvvX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameB) + '')*1))?('' + (nameB) + ''):(('' + (nameB) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (nameB) + '' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _mulvvvXabsNameB' + (_mulvvvX) + '' + '\n';
__context__.push('(signedX_inc@552)');
_strmulvvvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulvvvXabsNameB' + (_mulvvvX) + '')*1))?('_mulvvvXabsNameB' + (_mulvvvX) + ''):(('_mulvvvXabsNameB' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _mulvvvXabsNameB' + (_mulvvvX) + '' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)lvar    _mulvvvXsB' + (_mulvvvX) + ',   0' + '\n';
__context__.push('(signedX_inc@553)');
_strmulvvvX+=lvar(((isNaN(('_mulvvvXsB' + (_mulvvvX) + '')*1))?('_mulvvvXsB' + (_mulvvvX) + ''):(('_mulvvvXsB' + (_mulvvvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)lvar    _mulvvvXsB' + (_mulvvvX) + ',   0' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)pushsvX ' + (X) + ',    _mulvvvXabsNameB' + (_mulvvvX) + '' + '\n';
__context__.push('(signedX_inc@554)');
_strmulvvvX+=pushsvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulvvvXabsNameB' + (_mulvvvX) + '')*1))?('_mulvvvXabsNameB' + (_mulvvvX) + ''):(('_mulvvvXabsNameB' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)pushsvX ' + (X) + ',    _mulvvvXabsNameB' + (_mulvvvX) + '' + '\n';
_strmulvvvX+=__indent() +'pop     _mulvvvXsB' + (_mulvvvX) + ' #@(signedX_inc@555)'+ __context() + '\n';
_strmulvvvX+=__indent() +'#(begin macro)absvX   ' + (X) + ',    _mulvvvXabsNameB' + (_mulvvvX) + '   # absNameB = abs(nameB)' + '\n';
__context__.push('(signedX_inc@556)');
_strmulvvvX+=absvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulvvvXabsNameB' + (_mulvvvX) + '')*1))?('_mulvvvXabsNameB' + (_mulvvvX) + ''):(('_mulvvvXabsNameB' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)absvX   ' + (X) + ',    _mulvvvXabsNameB' + (_mulvvvX) + '   # absNameB = abs(nameB)' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)lvarX   ' + ((2*X)) + ',    _mulvvvXName' + (_mulvvvX) + '' + '\n';
__context__.push('(signedX_inc@557)');
_strmulvvvX+=lvarX(((isNaN(('' + ((2*X)) + '')*1))?('' + ((2*X)) + ''):(('' + ((2*X)) + '')*1)),((isNaN(('_mulvvvXName' + (_mulvvvX) + '')*1))?('_mulvvvXName' + (_mulvvvX) + ''):(('_mulvvvXName' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)lvarX   ' + ((2*X)) + ',    _mulvvvXName' + (_mulvvvX) + '' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)lvar    _mulvvvXCarry' + (_mulvvvX) + ',  0' + '\n';
__context__.push('(signedX_inc@558)');
_strmulvvvX+=lvar(((isNaN(('_mulvvvXCarry' + (_mulvvvX) + '')*1))?('_mulvvvXCarry' + (_mulvvvX) + ''):(('_mulvvvXCarry' + (_mulvvvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)lvar    _mulvvvXCarry' + (_mulvvvX) + ',  0' + '\n';
_strmulvvvX+=__indent() +' #@(signedX_inc@559)'+ __context() + '\n';
for(var b_i = 0 ; b_i < X; b_i++) {
_strmulvvvX+=__indent() +'#(begin macro)at_reset    _mulvvvXCarry' + (_mulvvvX) + '' + '\n';
__context__.push('(signedX_inc@561)');
_strmulvvvX+=at_reset(((isNaN(('_mulvvvXCarry' + (_mulvvvX) + '')*1))?('_mulvvvXCarry' + (_mulvvvX) + ''):(('_mulvvvXCarry' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)at_reset    _mulvvvXCarry' + (_mulvvvX) + '' + '\n';
for (var a_i =0 ; a_i < X; a_i++) {
_strmulvvvX+=__indent() +'push    _mulvvvXabsNameA' + (_mulvvvX) + '_' + (a_i) + ' #@(signedX_inc@563)'+ __context() + '\n';
_strmulvvvX+=__indent() +'push    _mulvvvXabsNameB' + (_mulvvvX) + '_' + (b_i) + ' #@(signedX_inc@564)'+ __context() + '\n';
_strmulvvvX+=__indent() +'#(begin macro)mulof' + '\n';
__context__.push('(signedX_inc@565)');
_strmulvvvX+=mulof();
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)mulof' + '\n';
_strmulvvvX+=__indent() +'push    _mulvvvXCarry' + (_mulvvvX) + ' #@(signedX_inc@566)'+ __context() + '\n';
_strmulvvvX+=__indent() +'#(begin macro)addof' + '\n';
__context__.push('(signedX_inc@567)');
_strmulvvvX+=addof();
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)addof' + '\n';
_strmulvvvX+=__indent() +'push    _mulvvvXName' + (_mulvvvX) + '_' + ((a_i+b_i)) + ' #@(signedX_inc@568)'+ __context() + '\n';
_strmulvvvX+=__indent() +'#(begin macro)addof' + '\n';
__context__.push('(signedX_inc@569)');
_strmulvvvX+=addof();
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)addof' + '\n';
_strmulvvvX+=__indent() +'pop     _mulvvvXName' + (_mulvvvX) + '_' + ((a_i+b_i)) + ' #@(signedX_inc@570)'+ __context() + '\n';
_strmulvvvX+=__indent() +'add #@(signedX_inc@571)'+ __context() + '\n';
_strmulvvvX+=__indent() +'add #@(signedX_inc@572)'+ __context() + '\n';
_strmulvvvX+=__indent() +'pop     _mulvvvXCarry' + (_mulvvvX) + ' #@(signedX_inc@573)'+ __context() + '\n';
}
_strmulvvvX+=__indent() +'push    _mulvvvXName' + (_mulvvvX) + '_' + ((b_i+X)) + ' #@(signedX_inc@575)'+ __context() + '\n';
_strmulvvvX+=__indent() +'push    _mulvvvXCarry' + (_mulvvvX) + ' #@(signedX_inc@576)'+ __context() + '\n';
_strmulvvvX+=__indent() +'add #@(signedX_inc@577)'+ __context() + '\n';
_strmulvvvX+=__indent() +'pop     _mulvvvXName' + (_mulvvvX) + '_' + ((b_i+X)) + ' #@(signedX_inc@578)'+ __context() + '\n';
}
_strmulvvvX+=__indent() +'# resolve sign #@(signedX_inc@580)'+ __context() + '\n';
_strmulvvvX+=__indent() +'push _mulvvvXsA' + (_mulvvvX) + ' #@(signedX_inc@581)'+ __context() + '\n';
_strmulvvvX+=__indent() +'push _mulvvvXsB' + (_mulvvvX) + ' #@(signedX_inc@582)'+ __context() + '\n';
_strmulvvvX+=__indent() +'diff    # if sign(nameA) <> sign(nameB) then name is negative #@(signedX_inc@583)'+ __context() + '\n';
_strmulvvvX+=__indent() +'if #@(signedX_inc@584)'+ __context() + '\n';
__blockLevel__++;
_strmulvvvX+=__indent() +'#(begin macro)at_set  _mulvvvXName' + (_mulvvvX) + '_s,   1' + '\n';
__context__.push('(signedX_inc@585)');
_strmulvvvX+=at_set(((isNaN(('_mulvvvXName' + (_mulvvvX) + '_s')*1))?('_mulvvvXName' + (_mulvvvX) + '_s'):(('_mulvvvXName' + (_mulvvvX) + '_s')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)at_set  _mulvvvXName' + (_mulvvvX) + '_s,   1' + '\n';
__blockLevel__--;
_strmulvvvX+=__indent() +'fi #@(signedX_inc@586)'+ __context() + '\n';
_strmulvvvX+=__indent() +'#(begin macro)pushvX  ' + ((2*X)) + ',    _mulvvvXName' + (_mulvvvX) + '' + '\n';
__context__.push('(signedX_inc@587)');
_strmulvvvX+=pushvX(((isNaN(('' + ((2*X)) + '')*1))?('' + ((2*X)) + ''):(('' + ((2*X)) + '')*1)),((isNaN(('_mulvvvXName' + (_mulvvvX) + '')*1))?('_mulvvvXName' + (_mulvvvX) + ''):(('_mulvvvXName' + (_mulvvvX) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)pushvX  ' + ((2*X)) + ',    _mulvvvXName' + (_mulvvvX) + '' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)castX   ' + ((2*X)) + ',    ' + (X) + '' + '\n';
__context__.push('(signedX_inc@588)');
_strmulvvvX+=castX(((isNaN(('' + ((2*X)) + '')*1))?('' + ((2*X)) + ''):(('' + ((2*X)) + '')*1)),((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)castX   ' + ((2*X)) + ',    ' + (X) + '' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    ' + (name) + '' + '\n';
__context__.push('(signedX_inc@589)');
_strmulvvvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    ' + (name) + '' + '\n';
_strmulvvvX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@590)');
_strmulvvvX+=scope_end();
__context__.pop();
_strmulvvvX+=__indent() +'#(end macro)scope_end' + '\n';
return _strmulvvvX;
}
_str_main+=__indent() +' #@(signedX_inc@592)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulvvX(X,name, nameB) : name *= nameB #@(signedX_inc@593)'+ __context() + '\n';
var _mulvvX; _mulvvX=0;
var mulvvX = function(X,name, nameB){
 _mulvvX++;
var _strmulvvX; 
_strmulvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro mulvvX(X,name, nameB)[' + [X,name, nameB] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro mulvvX(X,name, nameB)[' + [X,name, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro mulvvX(X,name, nameB)[' + [X,name, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro mulvvX(X,name, nameB)[' + [X,name, nameB] +']';
_strmulvvX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@595)');
_strmulvvX+=scope_begin();
__context__.pop();
_strmulvvX+=__indent() +'#(end macro)scope_begin' + '\n';
_strmulvvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _milvvXNameA' + (_mulvvX) + '' + '\n';
__context__.push('(signedX_inc@596)');
_strmulvvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_milvvXNameA' + (_mulvvX) + '')*1))?('_milvvXNameA' + (_mulvvX) + ''):(('_milvvXNameA' + (_mulvvX) + '')*1)));
__context__.pop();
_strmulvvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _milvvXNameA' + (_mulvvX) + '' + '\n';
_strmulvvX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
__context__.push('(signedX_inc@597)');
_strmulvvX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_strmulvvX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
_strmulvvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _milvvXNameA' + (_mulvvX) + '' + '\n';
__context__.push('(signedX_inc@598)');
_strmulvvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_milvvXNameA' + (_mulvvX) + '')*1))?('_milvvXNameA' + (_mulvvX) + ''):(('_milvvXNameA' + (_mulvvX) + '')*1)));
__context__.pop();
_strmulvvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _milvvXNameA' + (_mulvvX) + '' + '\n';
_strmulvvX+=__indent() +'#(begin macro)mulvvvX ' + (X) + ',    ' + (name) + ', _milvvXNameA' + (_mulvvX) + ',  ' + (nameB) + '' + '\n';
__context__.push('(signedX_inc@599)');
_strmulvvX+=mulvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)),((isNaN(('_milvvXNameA' + (_mulvvX) + '')*1))?('_milvvXNameA' + (_mulvvX) + ''):(('_milvvXNameA' + (_mulvvX) + '')*1)),((isNaN(('' + (nameB) + '')*1))?('' + (nameB) + ''):(('' + (nameB) + '')*1)));
__context__.pop();
_strmulvvX+=__indent() +'#(end macro)mulvvvX ' + (X) + ',    ' + (name) + ', _milvvXNameA' + (_mulvvX) + ',  ' + (nameB) + '' + '\n';
_strmulvvX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@600)');
_strmulvvX+=scope_end();
__context__.pop();
_strmulvvX+=__indent() +'#(end macro)scope_end' + '\n';
return _strmulvvX;
}
_str_main+=__indent() +' #@(signedX_inc@602)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulvX(X,name) : head of stack *= name #@(signedX_inc@603)'+ __context() + '\n';
var _mulvX; _mulvX=0;
var mulvX = function(X,name){
 _mulvX++;
var _strmulvX; 
_strmulvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro mulvX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro mulvX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro mulvX(X,name)[' + [X,name] +']';
_strmulvX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _mulvXName' + (_mulvX) + ', 0' + '\n';
__context__.push('(signedX_inc@605)');
_strmulvX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulvXName' + (_mulvX) + '')*1))?('_mulvXName' + (_mulvX) + ''):(('_mulvXName' + (_mulvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulvX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _mulvXName' + (_mulvX) + ', 0' + '\n';
_strmulvX+=__indent() +'#(begin macro)mulvvX  ' + (X) + ',    _mulvXName' + (_mulvX) + ', ' + (name) + '' + '\n';
__context__.push('(signedX_inc@606)');
_strmulvX+=mulvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulvXName' + (_mulvX) + '')*1))?('_mulvXName' + (_mulvX) + ''):(('_mulvXName' + (_mulvX) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_strmulvX+=__indent() +'#(end macro)mulvvX  ' + (X) + ',    _mulvXName' + (_mulvX) + ', ' + (name) + '' + '\n';
return _strmulvX;
}
_str_main+=__indent() +' #@(signedX_inc@608)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulX(X) : stack-1 = stack-1 * stack : stack-- #@(signedX_inc@609)'+ __context() + '\n';
var _mulX; _mulX=0;
var mulX = function(X){
 _mulX++;
var _strmulX; 
_strmulX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro mulX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro mulX(X)[' + [X] +']';
_strmulX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _mulXName' + (_mulX) + ',   1' + '\n';
__context__.push('(signedX_inc@611)');
_strmulX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulXName' + (_mulX) + '')*1))?('_mulXName' + (_mulX) + ''):(('_mulXName' + (_mulX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strmulX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _mulXName' + (_mulX) + ',   1' + '\n';
_strmulX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _mulXNameB' + (_mulX) + ',  0' + '\n';
__context__.push('(signedX_inc@612)');
_strmulX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulXNameB' + (_mulX) + '')*1))?('_mulXNameB' + (_mulX) + ''):(('_mulXNameB' + (_mulX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strmulX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _mulXNameB' + (_mulX) + ',  0' + '\n';
_strmulX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@613)');
_strmulX+=scope_begin();
__context__.pop();
_strmulX+=__indent() +'#(end macro)scope_begin' + '\n';
_strmulX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _mulXNameA' + (_mulX) + '' + '\n';
__context__.push('(signedX_inc@614)');
_strmulX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulXNameA' + (_mulX) + '')*1))?('_mulXNameA' + (_mulX) + ''):(('_mulXNameA' + (_mulX) + '')*1)));
__context__.pop();
_strmulX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _mulXNameA' + (_mulX) + '' + '\n';
_strmulX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    _mulXName' + (_mulX) + '' + '\n';
__context__.push('(signedX_inc@615)');
_strmulX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulXName' + (_mulX) + '')*1))?('_mulXName' + (_mulX) + ''):(('_mulXName' + (_mulX) + '')*1)));
__context__.pop();
_strmulX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    _mulXName' + (_mulX) + '' + '\n';
_strmulX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _mulXNameA' + (_mulX) + '' + '\n';
__context__.push('(signedX_inc@616)');
_strmulX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulXNameA' + (_mulX) + '')*1))?('_mulXNameA' + (_mulX) + ''):(('_mulXNameA' + (_mulX) + '')*1)));
__context__.pop();
_strmulX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _mulXNameA' + (_mulX) + '' + '\n';
_strmulX+=__indent() +'#(begin macro)mulvvvX ' + (X) + ',    _mulXName' + (_mulX) + ',   _mulXNameA' + (_mulX) + ',  _mulXNameB' + (_mulX) + '' + '\n';
__context__.push('(signedX_inc@617)');
_strmulX+=mulvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_mulXName' + (_mulX) + '')*1))?('_mulXName' + (_mulX) + ''):(('_mulXName' + (_mulX) + '')*1)),((isNaN(('_mulXNameA' + (_mulX) + '')*1))?('_mulXNameA' + (_mulX) + ''):(('_mulXNameA' + (_mulX) + '')*1)),((isNaN(('_mulXNameB' + (_mulX) + '')*1))?('_mulXNameB' + (_mulX) + ''):(('_mulXNameB' + (_mulX) + '')*1)));
__context__.pop();
_strmulX+=__indent() +'#(end macro)mulvvvX ' + (X) + ',    _mulXName' + (_mulX) + ',   _mulXNameA' + (_mulX) + ',  _mulXNameB' + (_mulX) + '' + '\n';
_strmulX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@618)');
_strmulX+=scope_end();
__context__.pop();
_strmulX+=__indent() +'#(end macro)scope_end' + '\n';
_strmulX+=__indent() +'#(begin macro)dropX   ' + (X) + '' + '\n';
__context__.push('(signedX_inc@619)');
_strmulX+=dropX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)));
__context__.pop();
_strmulX+=__indent() +'#(end macro)dropX   ' + (X) + '' + '\n';
return _strmulX;
}
_str_main+=__indent() +' #@(signedX_inc@621)'+ __context() + '\n';
_str_main+=__indent() +'# macro equalvvX(X,nameA, nameB) : push 1 if NameA == NameB , push 0 otherwise #@(signedX_inc@622)'+ __context() + '\n';
var _equalvvX; _equalvvX=0;
var equalvvX = function(X,nameA, nameB){
 _equalvvX++;
var _strequalvvX; 
_strequalvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro equalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro equalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro equalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro equalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
_strequalvvX+=__indent() +'push    ' + (nameA) + '_s #@(signedX_inc@624)'+ __context() + '\n';
_strequalvvX+=__indent() +'push    ' + (nameB) + '_s #@(signedX_inc@625)'+ __context() + '\n';
_strequalvvX+=__indent() +'equal #@(signedX_inc@626)'+ __context() + '\n';
for (var xx = 0 ; xx< X ; xx++) {
_strequalvvX+=__indent() +'push    ' + (nameA) + '_' + (xx) + ' #@(signedX_inc@628)'+ __context() + '\n';
_strequalvvX+=__indent() +'push    ' + (nameB) + '_' + (xx) + ' #@(signedX_inc@629)'+ __context() + '\n';
_strequalvvX+=__indent() +'equal #@(signedX_inc@630)'+ __context() + '\n';
}
for (var xx = 0 ; xx < X-1 ; xx++) {
_strequalvvX+=__indent() +'and #@(signedX_inc@633)'+ __context() + '\n';
}
_strequalvvX+=__indent() +'and #@(signedX_inc@635)'+ __context() + '\n';
return _strequalvvX;
}
_str_main+=__indent() +' #@(signedX_inc@637)'+ __context() + '\n';
_str_main+=__indent() +'# macro equalX(X) : same as "equal" but with X*8 bits value in stack #@(signedX_inc@638)'+ __context() + '\n';
var _equalX; _equalX=0;
var equalX = function(X){
 _equalX++;
var _strequalX; 
_strequalX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro equalX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro equalX(X)[' + [X] +']';
_strequalX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _equalXA' + (_equalX) + ',  1' + '\n';
__context__.push('(signedX_inc@640)');
_strequalX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_equalXA' + (_equalX) + '')*1))?('_equalXA' + (_equalX) + ''):(('_equalXA' + (_equalX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strequalX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _equalXA' + (_equalX) + ',  1' + '\n';
_strequalX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _equalXB' + (_equalX) + ',  0' + '\n';
__context__.push('(signedX_inc@641)');
_strequalX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_equalXB' + (_equalX) + '')*1))?('_equalXB' + (_equalX) + ''):(('_equalXB' + (_equalX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strequalX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _equalXB' + (_equalX) + ',  0' + '\n';
_strequalX+=__indent() +'sbm     _equalX' + (_equalX) + ' - ' + (((X+2)*2-1)) + ' #@(signedX_inc@642)'+ __context() + '\n';
_strequalX+=__indent() +'#(begin macro)equalvvX    ' + (X) + ',    _equalXA' + (_equalX) + ',  _equalXB' + (_equalX) + '' + '\n';
__context__.push('(signedX_inc@643)');
_strequalX+=equalvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_equalXA' + (_equalX) + '')*1))?('_equalXA' + (_equalX) + ''):(('_equalXA' + (_equalX) + '')*1)),((isNaN(('_equalXB' + (_equalX) + '')*1))?('_equalXB' + (_equalX) + ''):(('_equalXB' + (_equalX) + '')*1)));
__context__.pop();
_strequalX+=__indent() +'#(end macro)equalvvX    ' + (X) + ',    _equalXA' + (_equalX) + ',  _equalXB' + (_equalX) + '' + '\n';
_strequalX+=__indent() +'pop     _equalX' + (_equalX) + ' #@(signedX_inc@644)'+ __context() + '\n';
for (var xx=0 ; xx < (X+2)*2-1 ; xx++) {
_strequalX+=__indent() +'drop #@(signedX_inc@646)'+ __context() + '\n';
}
return _strequalX;
}
_str_main+=__indent() +' #@(signedX_inc@649)'+ __context() + '\n';
_str_main+=__indent() +'# macro diffvvX(X,nameA, nameB) : push 1 if Name != NameB , push 0 otherwise #@(signedX_inc@650)'+ __context() + '\n';
var _diffvvX; _diffvvX=0;
var diffvvX = function(X,nameA, nameB){
 _diffvvX++;
var _strdiffvvX; 
_strdiffvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro diffvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro diffvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro diffvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro diffvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
_strdiffvvX+=__indent() +'#(begin macro)equalvvX    ' + (X) + ',    ' + (nameA) + ',    ' + (nameB) + '' + '\n';
__context__.push('(signedX_inc@652)');
_strdiffvvX+=equalvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)),((isNaN(('' + (nameB) + '')*1))?('' + (nameB) + ''):(('' + (nameB) + '')*1)));
__context__.pop();
_strdiffvvX+=__indent() +'#(end macro)equalvvX    ' + (X) + ',    ' + (nameA) + ',    ' + (nameB) + '' + '\n';
_strdiffvvX+=__indent() +'not #@(signedX_inc@653)'+ __context() + '\n';
return _strdiffvvX;
}
_str_main+=__indent() +' #@(signedX_inc@655)'+ __context() + '\n';
_str_main+=__indent() +'# macro diffX(X) : same as "diff" but with X*8 bits value in stack #@(signedX_inc@656)'+ __context() + '\n';
var _diffX; _diffX=0;
var diffX = function(X){
 _diffX++;
var _strdiffX; 
_strdiffX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro diffX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro diffX(X)[' + [X] +']';
_strdiffX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _diffXA' + (_diffX) + ',    1' + '\n';
__context__.push('(signedX_inc@658)');
_strdiffX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_diffXA' + (_diffX) + '')*1))?('_diffXA' + (_diffX) + ''):(('_diffXA' + (_diffX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strdiffX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _diffXA' + (_diffX) + ',    1' + '\n';
_strdiffX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _diffXB' + (_diffX) + ',    0' + '\n';
__context__.push('(signedX_inc@659)');
_strdiffX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_diffXB' + (_diffX) + '')*1))?('_diffXB' + (_diffX) + ''):(('_diffXB' + (_diffX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strdiffX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _diffXB' + (_diffX) + ',    0' + '\n';
_strdiffX+=__indent() +'sbm     _diffX' + (_diffX) + ' - ' + (((X+2)*2-1)) + ' #@(signedX_inc@660)'+ __context() + '\n';
_strdiffX+=__indent() +'#(begin macro)diffvvX ' + (X) + ',    _diffXA' + (_diffX) + ',    _diffXB' + (_diffX) + '' + '\n';
__context__.push('(signedX_inc@661)');
_strdiffX+=diffvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_diffXA' + (_diffX) + '')*1))?('_diffXA' + (_diffX) + ''):(('_diffXA' + (_diffX) + '')*1)),((isNaN(('_diffXB' + (_diffX) + '')*1))?('_diffXB' + (_diffX) + ''):(('_diffXB' + (_diffX) + '')*1)));
__context__.pop();
_strdiffX+=__indent() +'#(end macro)diffvvX ' + (X) + ',    _diffXA' + (_diffX) + ',    _diffXB' + (_diffX) + '' + '\n';
_strdiffX+=__indent() +'pop     _diffX' + (_diffX) + ' #@(signedX_inc@662)'+ __context() + '\n';
for (var xx=0 ; xx < (X+2)*2-1 ; xx++) {
_strdiffX+=__indent() +'drop #@(signedX_inc@664)'+ __context() + '\n';
}
return _strdiffX;
}
_str_main+=__indent() +' #@(signedX_inc@667)'+ __context() + '\n';
_str_main+=__indent() +'# macro supequalvvX(X,nameA, nameB) : push 1 if nameA >= nameB push 0 otherwise #@(signedX_inc@668)'+ __context() + '\n';
var _supequalvvX; _supequalvvX=0;
var supequalvvX = function(X,nameA, nameB){
 _supequalvvX++;
var _strsupequalvvX; 
_strsupequalvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro supequalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro supequalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro supequalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro supequalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
_strsupequalvvX+=__indent() +'push    0 #@(signedX_inc@670)'+ __context() + '\n';
_strsupequalvvX+=__indent() +'sbm     _supequalvvX' + (_supequalvvX) + ' #@(signedX_inc@671)'+ __context() + '\n';
_strsupequalvvX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@672)');
_strsupequalvvX+=scope_begin();
__context__.pop();
_strsupequalvvX+=__indent() +'#(end macro)scope_begin' + '\n';
_strsupequalvvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _supequalvvXName' + (_supequalvvX) + '' + '\n';
__context__.push('(signedX_inc@673)');
_strsupequalvvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_supequalvvXName' + (_supequalvvX) + '')*1))?('_supequalvvXName' + (_supequalvvX) + ''):(('_supequalvvXName' + (_supequalvvX) + '')*1)));
__context__.pop();
_strsupequalvvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _supequalvvXName' + (_supequalvvX) + '' + '\n';
_strsupequalvvX+=__indent() +'#(begin macro)subvvvX ' + (X) + ',    _supequalvvXName' + (_supequalvvX) + ', ' + (nameA) + ',    ' + (nameB) + '' + '\n';
__context__.push('(signedX_inc@674)');
_strsupequalvvX+=subvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_supequalvvXName' + (_supequalvvX) + '')*1))?('_supequalvvXName' + (_supequalvvX) + ''):(('_supequalvvXName' + (_supequalvvX) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)),((isNaN(('' + (nameB) + '')*1))?('' + (nameB) + ''):(('' + (nameB) + '')*1)));
__context__.pop();
_strsupequalvvX+=__indent() +'#(end macro)subvvvX ' + (X) + ',    _supequalvvXName' + (_supequalvvX) + ', ' + (nameA) + ',    ' + (nameB) + '' + '\n';
_strsupequalvvX+=__indent() +'push    _supequalvvXName' + (_supequalvvX) + '_s #@(signedX_inc@675)'+ __context() + '\n';
_strsupequalvvX+=__indent() +'not #@(signedX_inc@676)'+ __context() + '\n';
_strsupequalvvX+=__indent() +'pop     _supequalvvX' + (_supequalvvX) + ' #@(signedX_inc@677)'+ __context() + '\n';
_strsupequalvvX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@678)');
_strsupequalvvX+=scope_end();
__context__.pop();
_strsupequalvvX+=__indent() +'#(end macro)scope_end' + '\n';
return _strsupequalvvX;
}
_str_main+=__indent() +' #@(signedX_inc@680)'+ __context() + '\n';
_str_main+=__indent() +'# macro supequalX(X) : push 1 if stack-1 >= stack , push 0 otherwise : after dropped 2 X*8 bits value from stack #@(signedX_inc@681)'+ __context() + '\n';
var _supequalX; _supequalX=0;
var supequalX = function(X){
 _supequalX++;
var _strsupequalX; 
_strsupequalX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro supequalX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro supequalX(X)[' + [X] +']';
_strsupequalX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _supequalXA' + (_supequalX) + ',    1' + '\n';
__context__.push('(signedX_inc@683)');
_strsupequalX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_supequalXA' + (_supequalX) + '')*1))?('_supequalXA' + (_supequalX) + ''):(('_supequalXA' + (_supequalX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strsupequalX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _supequalXA' + (_supequalX) + ',    1' + '\n';
_strsupequalX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _supequalXB' + (_supequalX) + ',    0' + '\n';
__context__.push('(signedX_inc@684)');
_strsupequalX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_supequalXB' + (_supequalX) + '')*1))?('_supequalXB' + (_supequalX) + ''):(('_supequalXB' + (_supequalX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strsupequalX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _supequalXB' + (_supequalX) + ',    0' + '\n';
_strsupequalX+=__indent() +'sbm     _supequalX' + (_supequalX) + ' - ' + (((X+2)*2-1)) + ' #@(signedX_inc@685)'+ __context() + '\n';
_strsupequalX+=__indent() +'#(begin macro)supequalvvX ' + (X) + ',    _supequalXA' + (_supequalX) + ',    _supequalXB' + (_supequalX) + '' + '\n';
__context__.push('(signedX_inc@686)');
_strsupequalX+=supequalvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_supequalXA' + (_supequalX) + '')*1))?('_supequalXA' + (_supequalX) + ''):(('_supequalXA' + (_supequalX) + '')*1)),((isNaN(('_supequalXB' + (_supequalX) + '')*1))?('_supequalXB' + (_supequalX) + ''):(('_supequalXB' + (_supequalX) + '')*1)));
__context__.pop();
_strsupequalX+=__indent() +'#(end macro)supequalvvX ' + (X) + ',    _supequalXA' + (_supequalX) + ',    _supequalXB' + (_supequalX) + '' + '\n';
_strsupequalX+=__indent() +'pop     _supequalX' + (_supequalX) + ' #@(signedX_inc@687)'+ __context() + '\n';
for (var xx=0 ; xx < (X+2)*2-1 ; xx++) {
_strsupequalX+=__indent() +'drop #@(signedX_inc@689)'+ __context() + '\n';
}
return _strsupequalX;
}
_str_main+=__indent() +' #@(signedX_inc@692)'+ __context() + '\n';
_str_main+=__indent() +'# macro infvvX(X,nameA, nameB) : push 1 if nameA < nameB push 0 otherwise #@(signedX_inc@693)'+ __context() + '\n';
var _infvvX; _infvvX=0;
var infvvX = function(X,nameA, nameB){
 _infvvX++;
var _strinfvvX; 
_strinfvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro infvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro infvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro infvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro infvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
_strinfvvX+=__indent() +'push    0 #@(signedX_inc@695)'+ __context() + '\n';
_strinfvvX+=__indent() +'sbm     _infvvX' + (_infvvX) + ' #@(signedX_inc@696)'+ __context() + '\n';
_strinfvvX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@697)');
_strinfvvX+=scope_begin();
__context__.pop();
_strinfvvX+=__indent() +'#(end macro)scope_begin' + '\n';
_strinfvvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _infvvXName' + (_infvvX) + '' + '\n';
__context__.push('(signedX_inc@698)');
_strinfvvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_infvvXName' + (_infvvX) + '')*1))?('_infvvXName' + (_infvvX) + ''):(('_infvvXName' + (_infvvX) + '')*1)));
__context__.pop();
_strinfvvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _infvvXName' + (_infvvX) + '' + '\n';
_strinfvvX+=__indent() +'#(begin macro)subvvvX ' + (X) + ',    _infvvXName' + (_infvvX) + ',   ' + (nameA) + ',    ' + (nameB) + '' + '\n';
__context__.push('(signedX_inc@699)');
_strinfvvX+=subvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_infvvXName' + (_infvvX) + '')*1))?('_infvvXName' + (_infvvX) + ''):(('_infvvXName' + (_infvvX) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)),((isNaN(('' + (nameB) + '')*1))?('' + (nameB) + ''):(('' + (nameB) + '')*1)));
__context__.pop();
_strinfvvX+=__indent() +'#(end macro)subvvvX ' + (X) + ',    _infvvXName' + (_infvvX) + ',   ' + (nameA) + ',    ' + (nameB) + '' + '\n';
_strinfvvX+=__indent() +'push    _infvvXName' + (_infvvX) + '_s #@(signedX_inc@700)'+ __context() + '\n';
_strinfvvX+=__indent() +'pop     _infvvX' + (_infvvX) + ' #@(signedX_inc@701)'+ __context() + '\n';
_strinfvvX+=__indent() +'#(begin macro)scope_end()' + '\n';
__context__.push('(signedX_inc@702)');
_strinfvvX+=scope_end();
__context__.pop();
_strinfvvX+=__indent() +'#(end macro)scope_end()' + '\n';
return _strinfvvX;
}
_str_main+=__indent() +' #@(signedX_inc@704)'+ __context() + '\n';
_str_main+=__indent() +'# macro infX(X) : push 1 if stack-1 < stack, push 0 otherwise : after dropped 2 X*8 bits value from stack #@(signedX_inc@705)'+ __context() + '\n';
var _infX; _infX=0;
var infX = function(X){
 _infX++;
var _strinfX; 
_strinfX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro infX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro infX(X)[' + [X] +']';
_strinfX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _infXA' + (_infX) + ',  1' + '\n';
__context__.push('(signedX_inc@707)');
_strinfX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_infXA' + (_infX) + '')*1))?('_infXA' + (_infX) + ''):(('_infXA' + (_infX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strinfX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _infXA' + (_infX) + ',  1' + '\n';
_strinfX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _infXB' + (_infX) + ',  0' + '\n';
__context__.push('(signedX_inc@708)');
_strinfX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_infXB' + (_infX) + '')*1))?('_infXB' + (_infX) + ''):(('_infXB' + (_infX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strinfX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _infXB' + (_infX) + ',  0' + '\n';
_strinfX+=__indent() +'sbm     _infX' + (_infX) + ' - ' + (((X+2)*2-1)) + ' #@(signedX_inc@709)'+ __context() + '\n';
_strinfX+=__indent() +'#(begin macro)infvvX  ' + (X) + ',    _infXA' + (_infX) + ',  _infXB' + (_infX) + '' + '\n';
__context__.push('(signedX_inc@710)');
_strinfX+=infvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_infXA' + (_infX) + '')*1))?('_infXA' + (_infX) + ''):(('_infXA' + (_infX) + '')*1)),((isNaN(('_infXB' + (_infX) + '')*1))?('_infXB' + (_infX) + ''):(('_infXB' + (_infX) + '')*1)));
__context__.pop();
_strinfX+=__indent() +'#(end macro)infvvX  ' + (X) + ',    _infXA' + (_infX) + ',  _infXB' + (_infX) + '' + '\n';
_strinfX+=__indent() +'pop     _infX' + (_infX) + ' #@(signedX_inc@711)'+ __context() + '\n';
for (var xx=0 ; xx < (X+2)*2-1 ; xx++) {
_strinfX+=__indent() +'drop #@(signedX_inc@713)'+ __context() + '\n';
}
return _strinfX;
}
_str_main+=__indent() +' #@(signedX_inc@716)'+ __context() + '\n';
_str_main+=__indent() +'# macro infequalvvX(X,nameA, nameB) : push 1 if nameA <= nameB push 0 otherwise #@(signedX_inc@717)'+ __context() + '\n';
var _infequalvvX; _infequalvvX=0;
var infequalvvX = function(X,nameA, nameB){
 _infequalvvX++;
var _strinfequalvvX; 
_strinfequalvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro infequalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro infequalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro infequalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro infequalvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
_strinfequalvvX+=__indent() +'#(begin macro)supequalvvX ' + (X) + ',    ' + (nameB) + ',    ' + (nameA) + '' + '\n';
__context__.push('(signedX_inc@719)');
_strinfequalvvX+=supequalvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameB) + '')*1))?('' + (nameB) + ''):(('' + (nameB) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)));
__context__.pop();
_strinfequalvvX+=__indent() +'#(end macro)supequalvvX ' + (X) + ',    ' + (nameB) + ',    ' + (nameA) + '' + '\n';
return _strinfequalvvX;
}
_str_main+=__indent() +' #@(signedX_inc@721)'+ __context() + '\n';
_str_main+=__indent() +'# macro infequalX(X) : push 1 if stack-1 <= stack, push 0 otherwise : after dropped 2 X*8 bits value from stack #@(signedX_inc@722)'+ __context() + '\n';
var _infequalX; _infequalX=0;
var infequalX = function(X){
 _infequalX++;
var _strinfequalX; 
_strinfequalX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro infequalX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro infequalX(X)[' + [X] +']';
_strinfequalX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _infequalXA' + (_infequalX) + ',    1' + '\n';
__context__.push('(signedX_inc@724)');
_strinfequalX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_infequalXA' + (_infequalX) + '')*1))?('_infequalXA' + (_infequalX) + ''):(('_infequalXA' + (_infequalX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strinfequalX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _infequalXA' + (_infequalX) + ',    1' + '\n';
_strinfequalX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _infequalXB' + (_infequalX) + ',    0' + '\n';
__context__.push('(signedX_inc@725)');
_strinfequalX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_infequalXB' + (_infequalX) + '')*1))?('_infequalXB' + (_infequalX) + ''):(('_infequalXB' + (_infequalX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strinfequalX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _infequalXB' + (_infequalX) + ',    0' + '\n';
_strinfequalX+=__indent() +'sbm     _infequalX' + (_infequalX) + ' - ' + (((X+2)*2-1)) + ' #@(signedX_inc@726)'+ __context() + '\n';
_strinfequalX+=__indent() +'#(begin macro)infequalvvX ' + (X) + ',    _infequalXA' + (_infequalX) + ',    _infequalXB' + (_infequalX) + '' + '\n';
__context__.push('(signedX_inc@727)');
_strinfequalX+=infequalvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_infequalXA' + (_infequalX) + '')*1))?('_infequalXA' + (_infequalX) + ''):(('_infequalXA' + (_infequalX) + '')*1)),((isNaN(('_infequalXB' + (_infequalX) + '')*1))?('_infequalXB' + (_infequalX) + ''):(('_infequalXB' + (_infequalX) + '')*1)));
__context__.pop();
_strinfequalX+=__indent() +'#(end macro)infequalvvX ' + (X) + ',    _infequalXA' + (_infequalX) + ',    _infequalXB' + (_infequalX) + '' + '\n';
_strinfequalX+=__indent() +'pop     _infequalX' + (_infequalX) + ' #@(signedX_inc@728)'+ __context() + '\n';
for (var xx=0 ; xx < (X+2)*2-1 ; xx++) {
_strinfequalX+=__indent() +'drop #@(signedX_inc@730)'+ __context() + '\n';
}
return _strinfequalX;
}
_str_main+=__indent() +' #@(signedX_inc@733)'+ __context() + '\n';
_str_main+=__indent() +'# macro supvvX(X,nameA , nameB) : push 1 if nameA > nameB push 0 otherwise #@(signedX_inc@734)'+ __context() + '\n';
var _supvvX; _supvvX=0;
var supvvX = function(X,nameA, nameB){
 _supvvX++;
var _strsupvvX; 
_strsupvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro supvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro supvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro supvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro supvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
_strsupvvX+=__indent() +'#(begin macro)infvvX  ' + (X) + ',    ' + (nameB) + ',    ' + (nameA) + '' + '\n';
__context__.push('(signedX_inc@736)');
_strsupvvX+=infvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameB) + '')*1))?('' + (nameB) + ''):(('' + (nameB) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)));
__context__.pop();
_strsupvvX+=__indent() +'#(end macro)infvvX  ' + (X) + ',    ' + (nameB) + ',    ' + (nameA) + '' + '\n';
return _strsupvvX;
}
_str_main+=__indent() +' #@(signedX_inc@738)'+ __context() + '\n';
_str_main+=__indent() +'# macro supX(X) : push 1 if stack-1 > stack, push 0 otherwise : after dropped 2 X*8 bits value from stack #@(signedX_inc@739)'+ __context() + '\n';
var _supX; _supX=0;
var supX = function(X){
 _supX++;
var _strsupX; 
_strsupX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro supX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro supX(X)[' + [X] +']';
_strsupX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _supXA' + (_supX) + ',  1' + '\n';
__context__.push('(signedX_inc@741)');
_strsupX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_supXA' + (_supX) + '')*1))?('_supXA' + (_supX) + ''):(('_supXA' + (_supX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strsupX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _supXA' + (_supX) + ',  1' + '\n';
_strsupX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _supXB' + (_supX) + ',  0' + '\n';
__context__.push('(signedX_inc@742)');
_strsupX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_supXB' + (_supX) + '')*1))?('_supXB' + (_supX) + ''):(('_supXB' + (_supX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strsupX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _supXB' + (_supX) + ',  0' + '\n';
_strsupX+=__indent() +'sbm     _supX' + (_supX) + ' - ' + (((X+2)*2-1)) + ' #@(signedX_inc@743)'+ __context() + '\n';
_strsupX+=__indent() +'#(begin macro)supvvX  ' + (X) + ',    _supXA' + (_supX) + ',  _supXB' + (_supX) + '' + '\n';
__context__.push('(signedX_inc@744)');
_strsupX+=supvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_supXA' + (_supX) + '')*1))?('_supXA' + (_supX) + ''):(('_supXA' + (_supX) + '')*1)),((isNaN(('_supXB' + (_supX) + '')*1))?('_supXB' + (_supX) + ''):(('_supXB' + (_supX) + '')*1)));
__context__.pop();
_strsupX+=__indent() +'#(end macro)supvvX  ' + (X) + ',    _supXA' + (_supX) + ',  _supXB' + (_supX) + '' + '\n';
_strsupX+=__indent() +'pop     _supX' + (_supX) + ' #@(signedX_inc@745)'+ __context() + '\n';
for (var xx=0 ; xx < (X+2)*2-1 ; xx++) {
_strsupX+=__indent() +'drop #@(signedX_inc@747)'+ __context() + '\n';
}
return _strsupX;
}
_str_main+=__indent() +' #@(signedX_inc@750)'+ __context() + '\n';
_str_main+=__indent() +'# macro divvvvvX(X,nameAdivB, nameAmodB, nameA, nameB) : nameAdivB = nameA div nameB ; nameAmodB = nameA mod nameB #@(signedX_inc@751)'+ __context() + '\n';
var _divvvvvX; _divvvvvX=0;
var divvvvvX = function(X,nameAdivB, nameAmodB, nameA, nameB){
 _divvvvvX++;
var _strdivvvvvX; 
_strdivvvvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro divvvvvX(X,nameAdivB, nameAmodB, nameA, nameB)[' + [X,nameAdivB, nameAmodB, nameA, nameB] +']';
if (typeof nameAdivB == 'undefined') throw 'Parameter nameAdivB is undefined in call of  macro divvvvvX(X,nameAdivB, nameAmodB, nameA, nameB)[' + [X,nameAdivB, nameAmodB, nameA, nameB] +']';
if (typeof nameAmodB == 'undefined') throw 'Parameter nameAmodB is undefined in call of  macro divvvvvX(X,nameAdivB, nameAmodB, nameA, nameB)[' + [X,nameAdivB, nameAmodB, nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro divvvvvX(X,nameAdivB, nameAmodB, nameA, nameB)[' + [X,nameAdivB, nameAmodB, nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro divvvvvX(X,nameAdivB, nameAmodB, nameA, nameB)[' + [X,nameAdivB, nameAmodB, nameA, nameB] +']';
if (arguments.length != 5) throw 'Too much arguments provided to macro divvvvvX(X,nameAdivB, nameAmodB, nameA, nameB)[' + [X,nameAdivB, nameAmodB, nameA, nameB] +']';
_strdivvvvvX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@753)');
_strdivvvvvX+=scope_begin();
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)scope_begin' + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _divvvvvXabsNameA' + (_divvvvvX) + '' + '\n';
__context__.push('(signedX_inc@754)');
_strdivvvvvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvvvXabsNameA' + (_divvvvvX) + '')*1))?('_divvvvvXabsNameA' + (_divvvvvX) + ''):(('_divvvvvXabsNameA' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _divvvvvXabsNameA' + (_divvvvvX) + '' + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (nameA) + '' + '\n';
__context__.push('(signedX_inc@755)');
_strdivvvvvX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (nameA) + '' + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _divvvvvXabsNameA' + (_divvvvvX) + '' + '\n';
__context__.push('(signedX_inc@756)');
_strdivvvvvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvvvXabsNameA' + (_divvvvvX) + '')*1))?('_divvvvvXabsNameA' + (_divvvvvX) + ''):(('_divvvvvXabsNameA' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _divvvvvXabsNameA' + (_divvvvvX) + '' + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)lvar    _divvvvvXsA' + (_divvvvvX) + ', 0' + '\n';
__context__.push('(signedX_inc@757)');
_strdivvvvvX+=lvar(((isNaN(('_divvvvvXsA' + (_divvvvvX) + '')*1))?('_divvvvvXsA' + (_divvvvvX) + ''):(('_divvvvvXsA' + (_divvvvvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)lvar    _divvvvvXsA' + (_divvvvvX) + ', 0' + '\n';
_strdivvvvvX+=__indent() +'push    ' + (nameA) + '_s #@(signedX_inc@758)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'pop     _divvvvvXsA' + (_divvvvvX) + ' #@(signedX_inc@759)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)absvX   ' + (X) + ',    _divvvvvXabsNameA' + (_divvvvvX) + '' + '\n';
__context__.push('(signedX_inc@760)');
_strdivvvvvX+=absvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvvvXabsNameA' + (_divvvvvX) + '')*1))?('_divvvvvXabsNameA' + (_divvvvvX) + ''):(('_divvvvvXabsNameA' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)absvX   ' + (X) + ',    _divvvvvXabsNameA' + (_divvvvvX) + '' + '\n';
_strdivvvvvX+=__indent() +' #@(signedX_inc@761)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
__context__.push('(signedX_inc@762)');
_strdivvvvvX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1))?('_divvvvvXabsNameB' + (_divvvvvX) + ''):(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (nameB) + '' + '\n';
__context__.push('(signedX_inc@763)');
_strdivvvvvX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameB) + '')*1))?('' + (nameB) + ''):(('' + (nameB) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (nameB) + '' + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
__context__.push('(signedX_inc@764)');
_strdivvvvvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1))?('_divvvvvXabsNameB' + (_divvvvvX) + ''):(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)lvar    _divvvvvXsB' + (_divvvvvX) + ', 0' + '\n';
__context__.push('(signedX_inc@765)');
_strdivvvvvX+=lvar(((isNaN(('_divvvvvXsB' + (_divvvvvX) + '')*1))?('_divvvvvXsB' + (_divvvvvX) + ''):(('_divvvvvXsB' + (_divvvvvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)lvar    _divvvvvXsB' + (_divvvvvX) + ', 0' + '\n';
_strdivvvvvX+=__indent() +'push    ' + (nameB) + '_s #@(signedX_inc@766)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'pop     _divvvvvXsB' + (_divvvvvX) + ' #@(signedX_inc@767)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)absvX   ' + (X) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
__context__.push('(signedX_inc@768)');
_strdivvvvvX+=absvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1))?('_divvvvvXabsNameB' + (_divvvvvX) + ''):(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)absvX   ' + (X) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
_strdivvvvvX+=__indent() +' #@(signedX_inc@769)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    _divvvvvXabsNameA' + (_divvvvvX) + '' + '\n';
__context__.push('(signedX_inc@770)');
_strdivvvvvX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvvvXabsNameA' + (_divvvvvX) + '')*1))?('_divvvvvXabsNameA' + (_divvvvvX) + ''):(('_divvvvvXabsNameA' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    _divvvvvXabsNameA' + (_divvvvvX) + '' + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    ' + (nameAmodB) + '' + '\n';
__context__.push('(signedX_inc@771)');
_strdivvvvvX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameAmodB) + '')*1))?('' + (nameAmodB) + ''):(('' + (nameAmodB) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)popvX   ' + (X) + ',    ' + (nameAmodB) + '' + '\n';
_strdivvvvvX+=__indent() +' #@(signedX_inc@772)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)resetvX ' + (X) + ',    ' + (nameAdivB) + '' + '\n';
__context__.push('(signedX_inc@773)');
_strdivvvvvX+=resetvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameAdivB) + '')*1))?('' + (nameAdivB) + ''):(('' + (nameAdivB) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)resetvX ' + (X) + ',    ' + (nameAdivB) + '' + '\n';
_strdivvvvvX+=__indent() +' #@(signedX_inc@774)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)boolvX  ' + (X) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
__context__.push('(signedX_inc@775)');
_strdivvvvvX+=boolvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1))?('_divvvvvXabsNameB' + (_divvvvvX) + ''):(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)boolvX  ' + (X) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
_strdivvvvvX+=__indent() +'if #@(signedX_inc@776)'+ __context() + '\n';
__blockLevel__++;
_strdivvvvvX+=__indent() +'push    1 #@(signedX_inc@777)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'sbm     _divvvvvX_g' + (_divvvvvX) + ' #@(signedX_inc@778)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'while #@(signedX_inc@779)'+ __context() + '\n';
__blockLevel__++;
_strdivvvvvX+=__indent() +'#(begin macro)supequalvvX ' + (X) + ',    ' + (nameAmodB) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
__context__.push('(signedX_inc@780)');
_strdivvvvvX+=supequalvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameAmodB) + '')*1))?('' + (nameAmodB) + ''):(('' + (nameAmodB) + '')*1)),((isNaN(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1))?('_divvvvvXabsNameB' + (_divvvvvX) + ''):(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)supequalvvX ' + (X) + ',    ' + (nameAmodB) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
_strdivvvvvX+=__indent() +'if #@(signedX_inc@781)'+ __context() + '\n';
__blockLevel__++;
_strdivvvvvX+=__indent() +'#(begin macro)incvX   ' + (X) + ',    ' + (nameAdivB) + '' + '\n';
__context__.push('(signedX_inc@782)');
_strdivvvvvX+=incvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameAdivB) + '')*1))?('' + (nameAdivB) + ''):(('' + (nameAdivB) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)incvX   ' + (X) + ',    ' + (nameAdivB) + '' + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)subvvX  ' + (X) + ',    ' + (nameAmodB) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
__context__.push('(signedX_inc@783)');
_strdivvvvvX+=subvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameAmodB) + '')*1))?('' + (nameAmodB) + ''):(('' + (nameAmodB) + '')*1)),((isNaN(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1))?('_divvvvvXabsNameB' + (_divvvvvX) + ''):(('_divvvvvXabsNameB' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)subvvX  ' + (X) + ',    ' + (nameAmodB) + ',    _divvvvvXabsNameB' + (_divvvvvX) + '' + '\n';
__blockLevel__--;
_strdivvvvvX+=__indent() +'else #@(signedX_inc@784)'+ __context() + '\n';
__blockLevel__++;
_strdivvvvvX+=__indent() +'#(begin macro)at_reset    _divvvvvX_g' + (_divvvvvX) + ' # break while/wend' + '\n';
__context__.push('(signedX_inc@785)');
_strdivvvvvX+=at_reset(((isNaN(('_divvvvvX_g' + (_divvvvvX) + '')*1))?('_divvvvvX_g' + (_divvvvvX) + ''):(('_divvvvvX_g' + (_divvvvvX) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)at_reset    _divvvvvX_g' + (_divvvvvX) + ' # break while/wend' + '\n';
__blockLevel__--;
_strdivvvvvX+=__indent() +'fi #@(signedX_inc@786)'+ __context() + '\n';
__blockLevel__--;
_strdivvvvvX+=__indent() +'wend #@(signedX_inc@787)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'# treat sign of nameAmodB and nameAdivB #@(signedX_inc@788)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'push    _divvvvvXsA' + (_divvvvvX) + ' #@(signedX_inc@789)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'pop     ' + (nameAmodB) + '_s   # sign of nameAmodB is sign of nameA #@(signedX_inc@790)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'push    _divvvvvXsA' + (_divvvvvX) + ' #@(signedX_inc@791)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'push    _divvvvvXsB' + (_divvvvvX) + ' #@(signedX_inc@792)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'diff #@(signedX_inc@793)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'if #@(signedX_inc@794)'+ __context() + '\n';
__blockLevel__++;
_strdivvvvvX+=__indent() +'push    1 #@(signedX_inc@795)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'pop     ' + (nameAdivB) + '_s # nameAdivB is negative if sign NameA <> sign nameB #@(signedX_inc@796)'+ __context() + '\n';
__blockLevel__--;
_strdivvvvvX+=__indent() +'fi #@(signedX_inc@797)'+ __context() + '\n';
__blockLevel__--;
_strdivvvvvX+=__indent() +'else #@(signedX_inc@798)'+ __context() + '\n';
__blockLevel__++;
_strdivvvvvX+=__indent() +'#(begin macro)setcvX  ' + (X) + ',    ' + (nameAdivB) + '' + '\n';
__context__.push('(signedX_inc@799)');
_strdivvvvvX+=setcvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameAdivB) + '')*1))?('' + (nameAdivB) + ''):(('' + (nameAdivB) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)setcvX  ' + (X) + ',    ' + (nameAdivB) + '' + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)setcvX  ' + (X) + ',    ' + (nameAmodB) + '' + '\n';
__context__.push('(signedX_inc@800)');
_strdivvvvvX+=setcvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (nameAmodB) + '')*1))?('' + (nameAmodB) + ''):(('' + (nameAmodB) + '')*1)));
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)setcvX  ' + (X) + ',    ' + (nameAmodB) + '' + '\n';
__blockLevel__--;
_strdivvvvvX+=__indent() +'fi #@(signedX_inc@801)'+ __context() + '\n';
_strdivvvvvX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@802)');
_strdivvvvvX+=scope_end();
__context__.pop();
_strdivvvvvX+=__indent() +'#(end macro)scope_end' + '\n';
return _strdivvvvvX;
}
_str_main+=__indent() +' #@(signedX_inc@804)'+ __context() + '\n';
_str_main+=__indent() +'# macro divvvX(X,nameA, nameB) : Push 2 X*8 bits values  : stack-1 = nameA mod nameB ; stack = nameA div nameB #@(signedX_inc@805)'+ __context() + '\n';
var _divvvX; _divvvX=0;
var divvvX = function(X,nameA, nameB){
 _divvvX++;
var _strdivvvX; 
_strdivvvX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro divvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro divvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro divvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro divvvX(X,nameA, nameB)[' + [X,nameA, nameB] +']';
_strdivvvX+=__indent() +'#(begin macro)pushX   ' + (X) + ',    0' + '\n';
__context__.push('(signedX_inc@807)');
_strdivvvX+=pushX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strdivvvX+=__indent() +'#(end macro)pushX   ' + (X) + ',    0' + '\n';
_strdivvvX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _divvvXB' + (_divvvX) + ',  0 # nameA mod nameB' + '\n';
__context__.push('(signedX_inc@808)');
_strdivvvX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvXB' + (_divvvX) + '')*1))?('_divvvXB' + (_divvvX) + ''):(('_divvvXB' + (_divvvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strdivvvX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _divvvXB' + (_divvvX) + ',  0 # nameA mod nameB' + '\n';
_strdivvvX+=__indent() +'#(begin macro)pushX   ' + (X) + ',    0' + '\n';
__context__.push('(signedX_inc@809)');
_strdivvvX+=pushX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strdivvvX+=__indent() +'#(end macro)pushX   ' + (X) + ',    0' + '\n';
_strdivvvX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _divvvXA' + (_divvvX) + ',  0 # nameA div nameB' + '\n';
__context__.push('(signedX_inc@810)');
_strdivvvX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvXA' + (_divvvX) + '')*1))?('_divvvXA' + (_divvvX) + ''):(('_divvvXA' + (_divvvX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strdivvvX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _divvvXA' + (_divvvX) + ',  0 # nameA div nameB' + '\n';
_strdivvvX+=__indent() +'#(begin macro)divvvvvX    ' + (X) + ',    _divvvXA' + (_divvvX) + ',  _divvvXB' + (_divvvX) + ',  ' + (nameA) + ',    ' + (nameB) + '' + '\n';
__context__.push('(signedX_inc@811)');
_strdivvvX+=divvvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divvvXA' + (_divvvX) + '')*1))?('_divvvXA' + (_divvvX) + ''):(('_divvvXA' + (_divvvX) + '')*1)),((isNaN(('_divvvXB' + (_divvvX) + '')*1))?('_divvvXB' + (_divvvX) + ''):(('_divvvXB' + (_divvvX) + '')*1)),((isNaN(('' + (nameA) + '')*1))?('' + (nameA) + ''):(('' + (nameA) + '')*1)),((isNaN(('' + (nameB) + '')*1))?('' + (nameB) + ''):(('' + (nameB) + '')*1)));
__context__.pop();
_strdivvvX+=__indent() +'#(end macro)divvvvvX    ' + (X) + ',    _divvvXA' + (_divvvX) + ',  _divvvXB' + (_divvvX) + ',  ' + (nameA) + ',    ' + (nameB) + '' + '\n';
return _strdivvvX;
}
_str_main+=__indent() +' #@(signedX_inc@813)'+ __context() + '\n';
_str_main+=__indent() +'# macro divX(X) : stack-1 == A , stack == B ; stack-1 = A mod B , stack = A div B #@(signedX_inc@814)'+ __context() + '\n';
var _divX; _divX=0;
var divX = function(X){
 _divX++;
var _strdivX; 
_strdivX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro divX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro divX(X)[' + [X] +']';
_strdivX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _divXA' + (_divX) + ',  1 # A before div, A mod B after' + '\n';
__context__.push('(signedX_inc@816)');
_strdivX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divXA' + (_divX) + '')*1))?('_divXA' + (_divX) + ''):(('_divXA' + (_divX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strdivX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _divXA' + (_divX) + ',  1 # A before div, A mod B after' + '\n';
_strdivX+=__indent() +'#(begin macro)sbmX    ' + (X) + ',    _divXB' + (_divX) + ',  0 # B before div, A div B after' + '\n';
__context__.push('(signedX_inc@817)');
_strdivX+=sbmX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divXB' + (_divX) + '')*1))?('_divXB' + (_divX) + ''):(('_divXB' + (_divX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strdivX+=__indent() +'#(end macro)sbmX    ' + (X) + ',    _divXB' + (_divX) + ',  0 # B before div, A div B after' + '\n';
_strdivX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@818)');
_strdivX+=scope_begin();
__context__.pop();
_strdivX+=__indent() +'#(end macro)scope_begin' + '\n';
_strdivX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _divXC' + (_divX) + '' + '\n';
__context__.push('(signedX_inc@819)');
_strdivX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divXC' + (_divX) + '')*1))?('_divXC' + (_divX) + ''):(('_divXC' + (_divX) + '')*1)));
__context__.pop();
_strdivX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _divXC' + (_divX) + '' + '\n';
_strdivX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    _divXD' + (_divX) + '' + '\n';
__context__.push('(signedX_inc@820)');
_strdivX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divXD' + (_divX) + '')*1))?('_divXD' + (_divX) + ''):(('_divXD' + (_divX) + '')*1)));
__context__.pop();
_strdivX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    _divXD' + (_divX) + '' + '\n';
_strdivX+=__indent() +'#(begin macro)divvvvvX    ' + (X) + ',    _divXC' + (_divX) + ',  _divXD' + (_divX) + ',  _divXA' + (_divX) + ',  _divXB' + (_divX) + '' + '\n';
__context__.push('(signedX_inc@821)');
_strdivX+=divvvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divXC' + (_divX) + '')*1))?('_divXC' + (_divX) + ''):(('_divXC' + (_divX) + '')*1)),((isNaN(('_divXD' + (_divX) + '')*1))?('_divXD' + (_divX) + ''):(('_divXD' + (_divX) + '')*1)),((isNaN(('_divXA' + (_divX) + '')*1))?('_divXA' + (_divX) + ''):(('_divXA' + (_divX) + '')*1)),((isNaN(('_divXB' + (_divX) + '')*1))?('_divXB' + (_divX) + ''):(('_divXB' + (_divX) + '')*1)));
__context__.pop();
_strdivX+=__indent() +'#(end macro)divvvvvX    ' + (X) + ',    _divXC' + (_divX) + ',  _divXD' + (_divX) + ',  _divXA' + (_divX) + ',  _divXB' + (_divX) + '' + '\n';
_strdivX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    _divXC' + (_divX) + '' + '\n';
__context__.push('(signedX_inc@822)');
_strdivX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divXC' + (_divX) + '')*1))?('_divXC' + (_divX) + ''):(('_divXC' + (_divX) + '')*1)));
__context__.pop();
_strdivX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    _divXC' + (_divX) + '' + '\n';
_strdivX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _divXB' + (_divX) + '  # B = C = A div B' + '\n';
__context__.push('(signedX_inc@823)');
_strdivX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divXB' + (_divX) + '')*1))?('_divXB' + (_divX) + ''):(('_divXB' + (_divX) + '')*1)));
__context__.pop();
_strdivX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _divXB' + (_divX) + '  # B = C = A div B' + '\n';
_strdivX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    _divXD' + (_divX) + '' + '\n';
__context__.push('(signedX_inc@824)');
_strdivX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divXD' + (_divX) + '')*1))?('_divXD' + (_divX) + ''):(('_divXD' + (_divX) + '')*1)));
__context__.pop();
_strdivX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    _divXD' + (_divX) + '' + '\n';
_strdivX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    _divXA' + (_divX) + '  # A = D = A mod B' + '\n';
__context__.push('(signedX_inc@825)');
_strdivX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('_divXA' + (_divX) + '')*1))?('_divXA' + (_divX) + ''):(('_divXA' + (_divX) + '')*1)));
__context__.pop();
_strdivX+=__indent() +'#(end macro)popvX   ' + (X) + ',    _divXA' + (_divX) + '  # A = D = A mod B' + '\n';
_strdivX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@826)');
_strdivX+=scope_end();
__context__.pop();
_strdivX+=__indent() +'#(end macro)scope_end' + '\n';
return _strdivX;
}
_str_main+=__indent() +' #@(signedX_inc@828)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@829)'+ __context() + '\n';
_str_main+=__indent() +'# macro castX(X1,X2) : transform stack X1*8 bits value to X2*8 bits value #@(signedX_inc@830)'+ __context() + '\n';
var _castX; _castX=0;
var castX = function(X1,X2){
 _castX++;
var _strcastX; 
_strcastX='';
if (typeof X1 == 'undefined') throw 'Parameter X1 is undefined in call of  macro castX(X1,X2)[' + [X1,X2] +']';
if (typeof X2 == 'undefined') throw 'Parameter X2 is undefined in call of  macro castX(X1,X2)[' + [X1,X2] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro castX(X1,X2)[' + [X1,X2] +']';
if (X1 != X2 && X1 > 0 && X2 > 0) {
_strcastX+=__indent() +'#(begin macro)sbmX    ' + (X1) + ',   _castXInput' + (_castX) + ',    0' + '\n';
__context__.push('(signedX_inc@833)');
_strcastX+=sbmX(((isNaN(('' + (X1) + '')*1))?('' + (X1) + ''):(('' + (X1) + '')*1)),((isNaN(('_castXInput' + (_castX) + '')*1))?('_castXInput' + (_castX) + ''):(('_castXInput' + (_castX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strcastX+=__indent() +'#(end macro)sbmX    ' + (X1) + ',   _castXInput' + (_castX) + ',    0' + '\n';
_strcastX+=__indent() +'#(begin macro)varX    ' + (X2) + ',   _castXoutput' + (_castX) + '' + '\n';
__context__.push('(signedX_inc@834)');
_strcastX+=varX(((isNaN(('' + (X2) + '')*1))?('' + (X2) + ''):(('' + (X2) + '')*1)),((isNaN(('_castXoutput' + (_castX) + '')*1))?('_castXoutput' + (_castX) + ''):(('_castXoutput' + (_castX) + '')*1)));
__context__.pop();
_strcastX+=__indent() +'#(end macro)varX    ' + (X2) + ',   _castXoutput' + (_castX) + '' + '\n';
_strcastX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@835)');
_strcastX+=scope_begin();
__context__.pop();
_strcastX+=__indent() +'#(end macro)scope_begin' + '\n';
_strcastX+=__indent() +'#(begin macro)lvarX   ' + (X1) + ',   _castXori' + (_castX) + '' + '\n';
__context__.push('(signedX_inc@836)');
_strcastX+=lvarX(((isNaN(('' + (X1) + '')*1))?('' + (X1) + ''):(('' + (X1) + '')*1)),((isNaN(('_castXori' + (_castX) + '')*1))?('_castXori' + (_castX) + ''):(('_castXori' + (_castX) + '')*1)));
__context__.pop();
_strcastX+=__indent() +'#(end macro)lvarX   ' + (X1) + ',   _castXori' + (_castX) + '' + '\n';
_strcastX+=__indent() +'#(begin macro)lvarX   ' + (X2) + ',   _castXdest' + (_castX) + '' + '\n';
__context__.push('(signedX_inc@837)');
_strcastX+=lvarX(((isNaN(('' + (X2) + '')*1))?('' + (X2) + ''):(('' + (X2) + '')*1)),((isNaN(('_castXdest' + (_castX) + '')*1))?('_castXdest' + (_castX) + ''):(('_castXdest' + (_castX) + '')*1)));
__context__.pop();
_strcastX+=__indent() +'#(end macro)lvarX   ' + (X2) + ',   _castXdest' + (_castX) + '' + '\n';
_strcastX+=__indent() +' #@(signedX_inc@838)'+ __context() + '\n';
_strcastX+=__indent() +'#(begin macro)pushvX  ' + (X1) + ',   _castXInput' + (_castX) + '' + '\n';
__context__.push('(signedX_inc@839)');
_strcastX+=pushvX(((isNaN(('' + (X1) + '')*1))?('' + (X1) + ''):(('' + (X1) + '')*1)),((isNaN(('_castXInput' + (_castX) + '')*1))?('_castXInput' + (_castX) + ''):(('_castXInput' + (_castX) + '')*1)));
__context__.pop();
_strcastX+=__indent() +'#(end macro)pushvX  ' + (X1) + ',   _castXInput' + (_castX) + '' + '\n';
_strcastX+=__indent() +'#(begin macro)popvX   ' + (X1) + ',   _castXori' + (_castX) + '' + '\n';
__context__.push('(signedX_inc@840)');
_strcastX+=popvX(((isNaN(('' + (X1) + '')*1))?('' + (X1) + ''):(('' + (X1) + '')*1)),((isNaN(('_castXori' + (_castX) + '')*1))?('_castXori' + (_castX) + ''):(('_castXori' + (_castX) + '')*1)));
__context__.pop();
_strcastX+=__indent() +'#(end macro)popvX   ' + (X1) + ',   _castXori' + (_castX) + '' + '\n';
_strcastX+=__indent() +'push    _castXori' + (_castX) + '_s #@(signedX_inc@841)'+ __context() + '\n';
_strcastX+=__indent() +'pop     _castXdest' + (_castX) + '_s  # keep sign #@(signedX_inc@842)'+ __context() + '\n';
if (X1 < X2) {
for (var xx = 0 ; xx < X1; xx++) {
_strcastX+=__indent() +'push    _castXori' + (_castX) + '_' + (xx) + ' #@(signedX_inc@845)'+ __context() + '\n';
_strcastX+=__indent() +'pop     _castXdest' + (_castX) + '_' + (xx) + ' #@(signedX_inc@846)'+ __context() + '\n';
}
for (var xx = X1; xx < X2 ; xx++ ) {
_strcastX+=__indent() +'push    0 #@(signedX_inc@849)'+ __context() + '\n';
_strcastX+=__indent() +'pop     _castXdest' + (_castX) + '_' + (xx) + ' #@(signedX_inc@850)'+ __context() + '\n';
}
} else { // if X1 > X2
for (var xx = 0 ; xx < X2; xx++) {
_strcastX+=__indent() +'push    _castXori' + (_castX) + '_' + (xx) + ' #@(signedX_inc@854)'+ __context() + '\n';
_strcastX+=__indent() +'pop     _castXdest' + (_castX) + '_' + (xx) + ' #@(signedX_inc@855)'+ __context() + '\n';
}
_strcastX+=__indent() +' #@(signedX_inc@857)'+ __context() + '\n';
}
_strcastX+=__indent() +'#(begin macro)pushvX  ' + (X2) + ',   _castXdest' + (_castX) + '' + '\n';
__context__.push('(signedX_inc@859)');
_strcastX+=pushvX(((isNaN(('' + (X2) + '')*1))?('' + (X2) + ''):(('' + (X2) + '')*1)),((isNaN(('_castXdest' + (_castX) + '')*1))?('_castXdest' + (_castX) + ''):(('_castXdest' + (_castX) + '')*1)));
__context__.pop();
_strcastX+=__indent() +'#(end macro)pushvX  ' + (X2) + ',   _castXdest' + (_castX) + '' + '\n';
_strcastX+=__indent() +'#(begin macro)popvX   ' + (X2) + ',   _castXoutput' + (_castX) + '' + '\n';
__context__.push('(signedX_inc@860)');
_strcastX+=popvX(((isNaN(('' + (X2) + '')*1))?('' + (X2) + ''):(('' + (X2) + '')*1)),((isNaN(('_castXoutput' + (_castX) + '')*1))?('_castXoutput' + (_castX) + ''):(('_castXoutput' + (_castX) + '')*1)));
__context__.pop();
_strcastX+=__indent() +'#(end macro)popvX   ' + (X2) + ',   _castXoutput' + (_castX) + '' + '\n';
_strcastX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@861)');
_strcastX+=scope_end();
__context__.pop();
_strcastX+=__indent() +'#(end macro)scope_end' + '\n';
_strcastX+=__indent() +'#(begin macro)dropX   ' + (X1) + '' + '\n';
__context__.push('(signedX_inc@862)');
_strcastX+=dropX(((isNaN(('' + (X1) + '')*1))?('' + (X1) + ''):(('' + (X1) + '')*1)));
__context__.pop();
_strcastX+=__indent() +'#(end macro)dropX   ' + (X1) + '' + '\n';
_strcastX+=__indent() +'#(begin macro)pushvX  ' + (X2) + ',   _castXoutput' + (_castX) + '' + '\n';
__context__.push('(signedX_inc@863)');
_strcastX+=pushvX(((isNaN(('' + (X2) + '')*1))?('' + (X2) + ''):(('' + (X2) + '')*1)),((isNaN(('_castXoutput' + (_castX) + '')*1))?('_castXoutput' + (_castX) + ''):(('_castXoutput' + (_castX) + '')*1)));
__context__.pop();
_strcastX+=__indent() +'#(end macro)pushvX  ' + (X2) + ',   _castXoutput' + (_castX) + '' + '\n';
}
return _strcastX;
}
_str_main+=__indent() +' #@(signedX_inc@866)'+ __context() + '\n';
_str_main+=__indent() +'# macro sbmX2(X,name,backward,offset) : sbm a X*8 bit head of stack - (backward X*8 bits value+ offset) #@(signedX_inc@867)'+ __context() + '\n';
var _sbmX2; _sbmX2=0;
var sbmX2 = function(X,name,backward,offset){
 _sbmX2++;
var _strsbmX2; 
_strsbmX2='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro sbmX2(X,name,backward,offset)[' + [X,name,backward,offset] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro sbmX2(X,name,backward,offset)[' + [X,name,backward,offset] +']';
if (typeof backward == 'undefined') throw 'Parameter backward is undefined in call of  macro sbmX2(X,name,backward,offset)[' + [X,name,backward,offset] +']';
if (typeof offset == 'undefined') throw 'Parameter offset is undefined in call of  macro sbmX2(X,name,backward,offset)[' + [X,name,backward,offset] +']';
if (arguments.length != 4) throw 'Too much arguments provided to macro sbmX2(X,name,backward,offset)[' + [X,name,backward,offset] +']';
for (var xx=0; xx <X ; xx++) {
_strsbmX2+=__indent() +'sbm     ' + (name) + '_' + (xx) + ' - ' + ((backward*(X+2)+xx+offset)) + ' #@(signedX_inc@870)'+ __context() + '\n';
}
_strsbmX2+=__indent() +'sbm     ' + (name) + '_s - ' + ((backward*(X+2)+X+offset)) + ' #@(signedX_inc@872)'+ __context() + '\n';
_strsbmX2+=__indent() +'sbm     ' + (name) + '_c - ' + ((backward*(X+2)+X+1+offset)) + ' #@(signedX_inc@873)'+ __context() + '\n';
return _strsbmX2;
}
_str_main+=__indent() +' #@(signedX_inc@875)'+ __context() + '\n';
_str_main+=__indent() +'# macro sbmX(X,name,backward) : sbm a X*8 bit head of stack - (backward X*8 bits value) #@(signedX_inc@876)'+ __context() + '\n';
var _sbmX; _sbmX=0;
var sbmX = function(X,name,backward){
 _sbmX++;
var _strsbmX; 
_strsbmX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro sbmX(X,name,backward)[' + [X,name,backward] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro sbmX(X,name,backward)[' + [X,name,backward] +']';
if (typeof backward == 'undefined') throw 'Parameter backward is undefined in call of  macro sbmX(X,name,backward)[' + [X,name,backward] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro sbmX(X,name,backward)[' + [X,name,backward] +']';
_strsbmX+=__indent() +'#(begin macro)sbmX2   ' + (X) + ',    ' + (name) + ', ' + (backward) + ', 0' + '\n';
__context__.push('(signedX_inc@878)');
_strsbmX+=sbmX2(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)),((isNaN(('' + (backward) + '')*1))?('' + (backward) + ''):(('' + (backward) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strsbmX+=__indent() +'#(end macro)sbmX2   ' + (X) + ',    ' + (name) + ', ' + (backward) + ', 0' + '\n';
return _strsbmX;
}
_str_main+=__indent() +' #@(signedX_inc@880)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@881)'+ __context() + '\n';
_str_main+=__indent() +'# upcast macro #@(signedX_inc@882)'+ __context() + '\n';
var _cast8to16; _cast8to16=0;
var cast8to16 = function(){
 _cast8to16++;
var _strcast8to16; 
_strcast8to16='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast8to16()[' + [] +']';
_strcast8to16+=__indent() +'#(begin macro)castX   1,  2' + '\n';
__context__.push('(signedX_inc@884)');
_strcast8to16+=castX(((isNaN(('1')*1))?('1'):(('1')*1)),((isNaN(('2')*1))?('2'):(('2')*1)));
__context__.pop();
_strcast8to16+=__indent() +'#(end macro)castX   1,  2' + '\n';
return _strcast8to16;
}
_str_main+=__indent() +' #@(signedX_inc@886)'+ __context() + '\n';
var _cast8to24; _cast8to24=0;
var cast8to24 = function(){
 _cast8to24++;
var _strcast8to24; 
_strcast8to24='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast8to24()[' + [] +']';
_strcast8to24+=__indent() +'#(begin macro)castX   1,  3' + '\n';
__context__.push('(signedX_inc@888)');
_strcast8to24+=castX(((isNaN(('1')*1))?('1'):(('1')*1)),((isNaN(('3')*1))?('3'):(('3')*1)));
__context__.pop();
_strcast8to24+=__indent() +'#(end macro)castX   1,  3' + '\n';
return _strcast8to24;
}
_str_main+=__indent() +' #@(signedX_inc@890)'+ __context() + '\n';
var _cast8to32; _cast8to32=0;
var cast8to32 = function(){
 _cast8to32++;
var _strcast8to32; 
_strcast8to32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast8to32()[' + [] +']';
_strcast8to32+=__indent() +'#(begin macro)castX   1,  4' + '\n';
__context__.push('(signedX_inc@892)');
_strcast8to32+=castX(((isNaN(('1')*1))?('1'):(('1')*1)),((isNaN(('4')*1))?('4'):(('4')*1)));
__context__.pop();
_strcast8to32+=__indent() +'#(end macro)castX   1,  4' + '\n';
return _strcast8to32;
}
_str_main+=__indent() +' #@(signedX_inc@894)'+ __context() + '\n';
var _cast16to24; _cast16to24=0;
var cast16to24 = function(){
 _cast16to24++;
var _strcast16to24; 
_strcast16to24='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast16to24()[' + [] +']';
_strcast16to24+=__indent() +'#(begin macro)castX   2,  3' + '\n';
__context__.push('(signedX_inc@896)');
_strcast16to24+=castX(((isNaN(('2')*1))?('2'):(('2')*1)),((isNaN(('3')*1))?('3'):(('3')*1)));
__context__.pop();
_strcast16to24+=__indent() +'#(end macro)castX   2,  3' + '\n';
return _strcast16to24;
}
_str_main+=__indent() +' #@(signedX_inc@898)'+ __context() + '\n';
var _cast16to32; _cast16to32=0;
var cast16to32 = function(){
 _cast16to32++;
var _strcast16to32; 
_strcast16to32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast16to32()[' + [] +']';
_strcast16to32+=__indent() +'#(begin macro)castX   2,  4' + '\n';
__context__.push('(signedX_inc@900)');
_strcast16to32+=castX(((isNaN(('2')*1))?('2'):(('2')*1)),((isNaN(('4')*1))?('4'):(('4')*1)));
__context__.pop();
_strcast16to32+=__indent() +'#(end macro)castX   2,  4' + '\n';
return _strcast16to32;
}
_str_main+=__indent() +' #@(signedX_inc@902)'+ __context() + '\n';
var _cast24to32; _cast24to32=0;
var cast24to32 = function(){
 _cast24to32++;
var _strcast24to32; 
_strcast24to32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast24to32()[' + [] +']';
_strcast24to32+=__indent() +'#(begin macro)castX   3,  4' + '\n';
__context__.push('(signedX_inc@904)');
_strcast24to32+=castX(((isNaN(('3')*1))?('3'):(('3')*1)),((isNaN(('4')*1))?('4'):(('4')*1)));
__context__.pop();
_strcast24to32+=__indent() +'#(end macro)castX   3,  4' + '\n';
return _strcast24to32;
}
_str_main+=__indent() +' #@(signedX_inc@906)'+ __context() + '\n';
_str_main+=__indent() +'# downcast macro #@(signedX_inc@907)'+ __context() + '\n';
var _cast16to8; _cast16to8=0;
var cast16to8 = function(){
 _cast16to8++;
var _strcast16to8; 
_strcast16to8='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast16to8()[' + [] +']';
_strcast16to8+=__indent() +'#(begin macro)castX   2,  1' + '\n';
__context__.push('(signedX_inc@909)');
_strcast16to8+=castX(((isNaN(('2')*1))?('2'):(('2')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strcast16to8+=__indent() +'#(end macro)castX   2,  1' + '\n';
return _strcast16to8;
}
_str_main+=__indent() +' #@(signedX_inc@911)'+ __context() + '\n';
var _cast24to8; _cast24to8=0;
var cast24to8 = function(){
 _cast24to8++;
var _strcast24to8; 
_strcast24to8='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast24to8()[' + [] +']';
_strcast24to8+=__indent() +'#(begin macro)castX   3,  1' + '\n';
__context__.push('(signedX_inc@913)');
_strcast24to8+=castX(((isNaN(('3')*1))?('3'):(('3')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strcast24to8+=__indent() +'#(end macro)castX   3,  1' + '\n';
return _strcast24to8;
}
_str_main+=__indent() +' #@(signedX_inc@915)'+ __context() + '\n';
var _cast32to8; _cast32to8=0;
var cast32to8 = function(){
 _cast32to8++;
var _strcast32to8; 
_strcast32to8='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast32to8()[' + [] +']';
_strcast32to8+=__indent() +'#(begin macro)castX   4,  1' + '\n';
__context__.push('(signedX_inc@917)');
_strcast32to8+=castX(((isNaN(('4')*1))?('4'):(('4')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strcast32to8+=__indent() +'#(end macro)castX   4,  1' + '\n';
return _strcast32to8;
}
_str_main+=__indent() +' #@(signedX_inc@919)'+ __context() + '\n';
var _cast24to16; _cast24to16=0;
var cast24to16 = function(){
 _cast24to16++;
var _strcast24to16; 
_strcast24to16='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast24to16()[' + [] +']';
_strcast24to16+=__indent() +'#(begin macro)castX   3,  2' + '\n';
__context__.push('(signedX_inc@921)');
_strcast24to16+=castX(((isNaN(('3')*1))?('3'):(('3')*1)),((isNaN(('2')*1))?('2'):(('2')*1)));
__context__.pop();
_strcast24to16+=__indent() +'#(end macro)castX   3,  2' + '\n';
return _strcast24to16;
}
_str_main+=__indent() +' #@(signedX_inc@923)'+ __context() + '\n';
var _cast32to16; _cast32to16=0;
var cast32to16 = function(){
 _cast32to16++;
var _strcast32to16; 
_strcast32to16='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast32to16()[' + [] +']';
_strcast32to16+=__indent() +'#(begin macro)castX   3,  2' + '\n';
__context__.push('(signedX_inc@925)');
_strcast32to16+=castX(((isNaN(('3')*1))?('3'):(('3')*1)),((isNaN(('2')*1))?('2'):(('2')*1)));
__context__.pop();
_strcast32to16+=__indent() +'#(end macro)castX   3,  2' + '\n';
return _strcast32to16;
}
_str_main+=__indent() +' #@(signedX_inc@927)'+ __context() + '\n';
var _cast32to24; _cast32to24=0;
var cast32to24 = function(){
 _cast32to24++;
var _strcast32to24; 
_strcast32to24='';
if (arguments.length != 0) throw 'Too much arguments provided to macro cast32to24()[' + [] +']';
_strcast32to24+=__indent() +'#(begin macro)castX   4,  3' + '\n';
__context__.push('(signedX_inc@929)');
_strcast32to24+=castX(((isNaN(('4')*1))?('4'):(('4')*1)),((isNaN(('3')*1))?('3'):(('3')*1)));
__context__.pop();
_strcast32to24+=__indent() +'#(end macro)castX   4,  3' + '\n';
return _strcast32to24;
}
_str_main+=__indent() +' #@(signedX_inc@931)'+ __context() + '\n';
_str_main+=__indent() +'# macro writeX(X,name) : print out the decimal value (signed) #@(signedX_inc@932)'+ __context() + '\n';
var _writeX; _writeX=0;
var writeX = function(X,name){
 _writeX++;
var _strwriteX; 
_strwriteX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro writeX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro writeX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro writeX(X,name)[' + [X,name] +']';
var _xbits; _xbits = X * 8;
_strwriteX+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(signedX_inc@935)');
_strwriteX+=scope_begin();
__context__.pop();
_strwriteX+=__indent() +'#(end macro)scope_begin' + '\n';
_strwriteX+=__indent() +'#(begin macro)lvar    writeXprefixzero' + (_writeX) + ',  1' + '\n';
__context__.push('(signedX_inc@936)');
_strwriteX+=lvar(((isNaN(('writeXprefixzero' + (_writeX) + '')*1))?('writeXprefixzero' + (_writeX) + ''):(('writeXprefixzero' + (_writeX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)lvar    writeXprefixzero' + (_writeX) + ',  1' + '\n';
_strwriteX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    writeX_A' + (_writeX) + '' + '\n';
__context__.push('(signedX_inc@937)');
_strwriteX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('writeX_A' + (_writeX) + '')*1))?('writeX_A' + (_writeX) + ''):(('writeX_A' + (_writeX) + '')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    writeX_A' + (_writeX) + '' + '\n';
_strwriteX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    writeX_B' + (_writeX) + '' + '\n';
__context__.push('(signedX_inc@938)');
_strwriteX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('writeX_B' + (_writeX) + '')*1))?('writeX_B' + (_writeX) + ''):(('writeX_B' + (_writeX) + '')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    writeX_B' + (_writeX) + '' + '\n';
_strwriteX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    writeX_AmodB' + (_writeX) + '' + '\n';
__context__.push('(signedX_inc@939)');
_strwriteX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('writeX_AmodB' + (_writeX) + '')*1))?('writeX_AmodB' + (_writeX) + ''):(('writeX_AmodB' + (_writeX) + '')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    writeX_AmodB' + (_writeX) + '' + '\n';
_strwriteX+=__indent() +'#(begin macro)lvarX   ' + (X) + ',    writeX_AdivB' + (_writeX) + '' + '\n';
__context__.push('(signedX_inc@940)');
_strwriteX+=lvarX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('writeX_AdivB' + (_writeX) + '')*1))?('writeX_AdivB' + (_writeX) + ''):(('writeX_AdivB' + (_writeX) + '')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)lvarX   ' + (X) + ',    writeX_AdivB' + (_writeX) + '' + '\n';
_strwriteX+=__indent() +' #@(signedX_inc@941)'+ __context() + '\n';
_strwriteX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
__context__.push('(signedX_inc@942)');
_strwriteX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('' + (name) + '')*1))?('' + (name) + ''):(('' + (name) + '')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    ' + (name) + '' + '\n';
_strwriteX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    writeX_A' + (_writeX) + '' + '\n';
__context__.push('(signedX_inc@943)');
_strwriteX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('writeX_A' + (_writeX) + '')*1))?('writeX_A' + (_writeX) + ''):(('writeX_A' + (_writeX) + '')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)popvX   ' + (X) + ',    writeX_A' + (_writeX) + '' + '\n';
_strwriteX+=__indent() +' #@(signedX_inc@944)'+ __context() + '\n';
_strwriteX+=__indent() +'#(begin macro)setvX   ' + (X) + ',    writeX_B' + (_writeX) + ',  10' + '\n';
__context__.push('(signedX_inc@945)');
_strwriteX+=setvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('writeX_B' + (_writeX) + '')*1))?('writeX_B' + (_writeX) + ''):(('writeX_B' + (_writeX) + '')*1)),((isNaN(('10')*1))?('10'):(('10')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)setvX   ' + (X) + ',    writeX_B' + (_writeX) + ',  10' + '\n';
_strwriteX+=__indent() +' #@(signedX_inc@946)'+ __context() + '\n';
_strwriteX+=__indent() +'push    writeX_A' + (_writeX) + '_s #@(signedX_inc@947)'+ __context() + '\n';
_strwriteX+=__indent() +'if #@(signedX_inc@948)'+ __context() + '\n';
__blockLevel__++;
_strwriteX+=__indent() +'push    \'-\' #@(signedX_inc@949)'+ __context() + '\n';
_strwriteX+=__indent() +'pop     out   # write \'-\' if name < 0 #@(signedX_inc@950)'+ __context() + '\n';
__blockLevel__--;
_strwriteX+=__indent() +'fi #@(signedX_inc@951)'+ __context() + '\n';
_strwriteX+=__indent() +' #@(signedX_inc@952)'+ __context() + '\n';
_strwriteX+=__indent() +'push    _stringDecimal' + (_xbits) + '_.size #@(signedX_inc@953)'+ __context() + '\n';
_strwriteX+=__indent() +'loop #@(signedX_inc@954)'+ __context() + '\n';
__blockLevel__++;
_strwriteX+=__indent() +'# output = input mod 10 ; input = input div 10 #@(signedX_inc@955)'+ __context() + '\n';
_strwriteX+=__indent() +'#(begin macro)divvvvvX    ' + (X) + ',    writeX_AdivB' + (_writeX) + ',  writeX_AmodB' + (_writeX) + ',  writeX_A' + (_writeX) + ',  writeX_B' + (_writeX) + '' + '\n';
__context__.push('(signedX_inc@956)');
_strwriteX+=divvvvvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('writeX_AdivB' + (_writeX) + '')*1))?('writeX_AdivB' + (_writeX) + ''):(('writeX_AdivB' + (_writeX) + '')*1)),((isNaN(('writeX_AmodB' + (_writeX) + '')*1))?('writeX_AmodB' + (_writeX) + ''):(('writeX_AmodB' + (_writeX) + '')*1)),((isNaN(('writeX_A' + (_writeX) + '')*1))?('writeX_A' + (_writeX) + ''):(('writeX_A' + (_writeX) + '')*1)),((isNaN(('writeX_B' + (_writeX) + '')*1))?('writeX_B' + (_writeX) + ''):(('writeX_B' + (_writeX) + '')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)divvvvvX    ' + (X) + ',    writeX_AdivB' + (_writeX) + ',  writeX_AmodB' + (_writeX) + ',  writeX_A' + (_writeX) + ',  writeX_B' + (_writeX) + '' + '\n';
_strwriteX+=__indent() +'push    writeX_AmodB' + (_writeX) + '_0 #@(signedX_inc@957)'+ __context() + '\n';
_strwriteX+=__indent() +'pop     _stringDecimal' + (_xbits) + '_ #@(signedX_inc@958)'+ __context() + '\n';
_strwriteX+=__indent() +'#(begin macro)pushvX  ' + (X) + ',    writeX_AdivB' + (_writeX) + '' + '\n';
__context__.push('(signedX_inc@959)');
_strwriteX+=pushvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('writeX_AdivB' + (_writeX) + '')*1))?('writeX_AdivB' + (_writeX) + ''):(('writeX_AdivB' + (_writeX) + '')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)pushvX  ' + (X) + ',    writeX_AdivB' + (_writeX) + '' + '\n';
_strwriteX+=__indent() +'#(begin macro)popvX   ' + (X) + ',    writeX_A' + (_writeX) + '' + '\n';
__context__.push('(signedX_inc@960)');
_strwriteX+=popvX(((isNaN(('' + (X) + '')*1))?('' + (X) + ''):(('' + (X) + '')*1)),((isNaN(('writeX_A' + (_writeX) + '')*1))?('writeX_A' + (_writeX) + ''):(('writeX_A' + (_writeX) + '')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)popvX   ' + (X) + ',    writeX_A' + (_writeX) + '' + '\n';
_strwriteX+=__indent() +'arotl   _stringDecimal' + (_xbits) + '_ #@(signedX_inc@961)'+ __context() + '\n';
__blockLevel__--;
_strwriteX+=__indent() +'endloop #@(signedX_inc@962)'+ __context() + '\n';
_strwriteX+=__indent() +' #@(signedX_inc@963)'+ __context() + '\n';
_strwriteX+=__indent() +'push    _stringDecimal' + (_xbits) + '_.size #@(signedX_inc@964)'+ __context() + '\n';
_strwriteX+=__indent() +'sbm     writeXcnt' + (_writeX) + ' #@(signedX_inc@965)'+ __context() + '\n';
_strwriteX+=__indent() +'loop #@(signedX_inc@966)'+ __context() + '\n';
__blockLevel__++;
_strwriteX+=__indent() +'arotr   _stringDecimal' + (_xbits) + '_ #@(signedX_inc@967)'+ __context() + '\n';
_strwriteX+=__indent() +'#(begin macro)if_sup  writeXcnt' + (_writeX) + ', 1   # cnt > 1 (5, 4 , 3 or 2)' + '\n';
__context__.push('(signedX_inc@968)');
_strwriteX+=if_sup(((isNaN(('writeXcnt' + (_writeX) + '')*1))?('writeXcnt' + (_writeX) + ''):(('writeXcnt' + (_writeX) + '')*1)),((isNaN(('1')*1))?('1'):(('1')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)if_sup  writeXcnt' + (_writeX) + ', 1   # cnt > 1 (5, 4 , 3 or 2)' + '\n';
_strwriteX+=__indent() +'#(begin macro)if_diff _stringDecimal' + (_xbits) + '_,    0' + '\n';
__context__.push('(signedX_inc@969)');
_strwriteX+=if_diff(((isNaN(('_stringDecimal' + (_xbits) + '_')*1))?('_stringDecimal' + (_xbits) + '_'):(('_stringDecimal' + (_xbits) + '_')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)if_diff _stringDecimal' + (_xbits) + '_,    0' + '\n';
_strwriteX+=__indent() +'push    _stringDecimal' + (_xbits) + '_ #@(signedX_inc@970)'+ __context() + '\n';
_strwriteX+=__indent() +'#(begin macro)popouthexa' + '\n';
__context__.push('(signedX_inc@971)');
_strwriteX+=popouthexa();
__context__.pop();
_strwriteX+=__indent() +'#(end macro)popouthexa' + '\n';
_strwriteX+=__indent() +'#(begin macro)at_set  writeXprefixzero' + (_writeX) + ',  0' + '\n';
__context__.push('(signedX_inc@972)');
_strwriteX+=at_set(((isNaN(('writeXprefixzero' + (_writeX) + '')*1))?('writeXprefixzero' + (_writeX) + ''):(('writeXprefixzero' + (_writeX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)at_set  writeXprefixzero' + (_writeX) + ',  0' + '\n';
__blockLevel__--;
_strwriteX+=__indent() +'else #@(signedX_inc@973)'+ __context() + '\n';
__blockLevel__++;
_strwriteX+=__indent() +'#(begin macro)if_equal    writeXprefixzero' + (_writeX) + ',  0' + '\n';
__context__.push('(signedX_inc@974)');
_strwriteX+=if_equal(((isNaN(('writeXprefixzero' + (_writeX) + '')*1))?('writeXprefixzero' + (_writeX) + ''):(('writeXprefixzero' + (_writeX) + '')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_strwriteX+=__indent() +'#(end macro)if_equal    writeXprefixzero' + (_writeX) + ',  0' + '\n';
_strwriteX+=__indent() +'push    _stringDecimal' + (_xbits) + '_ #@(signedX_inc@975)'+ __context() + '\n';
_strwriteX+=__indent() +'#(begin macro)popouthexa' + '\n';
__context__.push('(signedX_inc@976)');
_strwriteX+=popouthexa();
__context__.pop();
_strwriteX+=__indent() +'#(end macro)popouthexa' + '\n';
__blockLevel__--;
_strwriteX+=__indent() +'fi #@(signedX_inc@977)'+ __context() + '\n';
__blockLevel__--;
_strwriteX+=__indent() +'fi #@(signedX_inc@978)'+ __context() + '\n';
__blockLevel__--;
_strwriteX+=__indent() +'else #@(signedX_inc@979)'+ __context() + '\n';
__blockLevel__++;
_strwriteX+=__indent() +'push    _stringDecimal' + (_xbits) + '_ #@(signedX_inc@980)'+ __context() + '\n';
_strwriteX+=__indent() +'#(begin macro)popouthexa' + '\n';
__context__.push('(signedX_inc@981)');
_strwriteX+=popouthexa();
__context__.pop();
_strwriteX+=__indent() +'#(end macro)popouthexa' + '\n';
__blockLevel__--;
_strwriteX+=__indent() +'fi #@(signedX_inc@982)'+ __context() + '\n';
__blockLevel__--;
_strwriteX+=__indent() +'endloop #@(signedX_inc@983)'+ __context() + '\n';
_strwriteX+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(signedX_inc@984)');
_strwriteX+=scope_end();
__context__.pop();
_strwriteX+=__indent() +'#(end macro)scope_end' + '\n';
return _strwriteX;
}
_str_main+=__indent() +' #@(signedX_inc@986)'+ __context() + '\n';
_str_main+=__indent() +'# macro printhexaX(X,name) : print the X*8 bit variable in hexadecimal #@(signedX_inc@987)'+ __context() + '\n';
var _printhexaX; _printhexaX=0;
var printhexaX = function(X,name){
 _printhexaX++;
var _strprinthexaX; 
_strprinthexaX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro printhexaX(X,name)[' + [X,name] +']';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro printhexaX(X,name)[' + [X,name] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro printhexaX(X,name)[' + [X,name] +']';
_strprinthexaX+=__indent() +'push    ' + (name) + '_c #@(signedX_inc@989)'+ __context() + '\n';
_strprinthexaX+=__indent() +'#(begin macro)popout8hexa' + '\n';
__context__.push('(signedX_inc@990)');
_strprinthexaX+=popout8hexa();
__context__.pop();
_strprinthexaX+=__indent() +'#(end macro)popout8hexa' + '\n';
_strprinthexaX+=__indent() +'push    ' + (name) + '_s #@(signedX_inc@991)'+ __context() + '\n';
_strprinthexaX+=__indent() +'#(begin macro)popout8hexa' + '\n';
__context__.push('(signedX_inc@992)');
_strprinthexaX+=popout8hexa();
__context__.pop();
_strprinthexaX+=__indent() +'#(end macro)popout8hexa' + '\n';
for (var xx = 0 ; xx < X ; xx++) {
var xx1; xx1= X-xx-1
_strprinthexaX+=__indent() +'push    ' + (name) + '_' + (xx1) + ' #@(signedX_inc@995)'+ __context() + '\n';
_strprinthexaX+=__indent() +'#(begin macro)popout8hexa()' + '\n';
__context__.push('(signedX_inc@996)');
_strprinthexaX+=popout8hexa();
__context__.pop();
_strprinthexaX+=__indent() +'#(end macro)popout8hexa()' + '\n';
}
return _strprinthexaX;
}
_str_main+=__indent() +' #@(signedX_inc@999)'+ __context() + '\n';
_str_main+=__indent() +' #@(signedX_inc@1000)'+ __context() + '\n';
_str_main+=__indent() +'# declare temporary X*8 bits value used for signedX.inc macros #@(signedX_inc@1001)'+ __context() + '\n';
var _declareTmpX; _declareTmpX=0;
var declareTmpX = function(X){
 _declareTmpX++;
var _strdeclareTmpX; 
_strdeclareTmpX='';
if (typeof X == 'undefined') throw 'Parameter X is undefined in call of  macro declareTmpX(X)[' + [X] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro declareTmpX(X)[' + [X] +']';
var _xbits; _xbits = X * 8;
var _nDecimal ; _nDecimal = ("" + (Math.pow(2,8*X)-1)).length;
_strdeclareTmpX+=__indent() +'var  _stringDecimal' + (_xbits) + '_*' + (_nDecimal) + ' #@(signedX_inc@1005)'+ __context() + '\n';
_strdeclareTmpX+=__indent() +' #@(signedX_inc@1006)'+ __context() + '\n';
return _strdeclareTmpX;
}
_str_main+=__indent() +'#(end include)signedX.inc' + '\n';
_str_main+=__indent() +' #@(signedX32_inc@4)'+ __context() + '\n';
_str_main+=__indent() +'# macro var32(name) :declare global 32 bits #@(signedX32_inc@5)'+ __context() + '\n';
var _var32; _var32=0;
var var32 = function(name){
 _var32++;
var _strvar32; 
_strvar32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro var32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro var32(name)[' + [name] +']';
_strvar32+=__indent() +'#(begin macro)varX(4,name)' + '\n';
__context__.push('(signedX32_inc@7)');
_strvar32+=varX(4,name);
__context__.pop();
_strvar32+=__indent() +'#(end macro)varX(4,name)' + '\n';
return _strvar32;
}
_str_main+=__indent() +' #@(signedX32_inc@9)'+ __context() + '\n';
_str_main+=__indent() +'# macro lvar32(name) : declare local 32 bits #@(signedX32_inc@10)'+ __context() + '\n';
var _lvar32; _lvar32=0;
var lvar32 = function(name){
 _lvar32++;
var _strlvar32; 
_strlvar32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro lvar32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro lvar32(name)[' + [name] +']';
_strlvar32+=__indent() +'#(begin macro)lvarX(4,name)' + '\n';
__context__.push('(signedX32_inc@12)');
_strlvar32+=lvarX(4,name);
__context__.pop();
_strlvar32+=__indent() +'#(end macro)lvarX(4,name)' + '\n';
return _strlvar32;
}
_str_main+=__indent() +' #@(signedX32_inc@14)'+ __context() + '\n';
_str_main+=__indent() +'# macro fixsv32(name) : be sure that name is positive if equal to zero #@(signedX32_inc@15)'+ __context() + '\n';
var _fixsv32; _fixsv32=0;
var fixsv32 = function(name){
 _fixsv32++;
var _strfixsv32; 
_strfixsv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro fixsv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro fixsv32(name)[' + [name] +']';
_strfixsv32+=__indent() +'#(begin macro)fixsvX(4,name)' + '\n';
__context__.push('(signedX32_inc@17)');
_strfixsv32+=fixsvX(4,name);
__context__.pop();
_strfixsv32+=__indent() +'#(end macro)fixsvX(4,name)' + '\n';
return _strfixsv32;
}
_str_main+=__indent() +' #@(signedX32_inc@19)'+ __context() + '\n';
_str_main+=__indent() +'# macro pushv32(name) : push 32 bits name on stack #@(signedX32_inc@20)'+ __context() + '\n';
var _pushv32; _pushv32=0;
var pushv32 = function(name){
 _pushv32++;
var _strpushv32; 
_strpushv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro pushv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro pushv32(name)[' + [name] +']';
_strpushv32+=__indent() +'#(begin macro)pushvX(4,name)' + '\n';
__context__.push('(signedX32_inc@22)');
_strpushv32+=pushvX(4,name);
__context__.pop();
_strpushv32+=__indent() +'#(end macro)pushvX(4,name)' + '\n';
return _strpushv32;
}
_str_main+=__indent() +' #@(signedX32_inc@24)'+ __context() + '\n';
_str_main+=__indent() +'# macro push32(immValue) : push immediate32 bits value on the stack #@(signedX32_inc@25)'+ __context() + '\n';
var _push32; _push32=0;
var push32 = function(immValue){
 _push32++;
var _strpush32; 
_strpush32='';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro push32(immValue)[' + [immValue] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro push32(immValue)[' + [immValue] +']';
_strpush32+=__indent() +'#(begin macro)pushX(4, immValue)' + '\n';
__context__.push('(signedX32_inc@27)');
_strpush32+=pushX(4, immValue);
__context__.pop();
_strpush32+=__indent() +'#(end macro)pushX(4, immValue)' + '\n';
return _strpush32;
}
_str_main+=__indent() +' #@(signedX32_inc@29)'+ __context() + '\n';
_str_main+=__indent() +'# macro dup32() : duplicate 32bits value on stack #@(signedX32_inc@30)'+ __context() + '\n';
var _dup32; _dup32=0;
var dup32 = function(){
 _dup32++;
var _strdup32; 
_strdup32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro dup32()[' + [] +']';
_strdup32+=__indent() +'#(begin macro)dupX(4)' + '\n';
__context__.push('(signedX32_inc@32)');
_strdup32+=dupX(4);
__context__.pop();
_strdup32+=__indent() +'#(end macro)dupX(4)' + '\n';
return _strdup32;
}
_str_main+=__indent() +' #@(signedX32_inc@34)'+ __context() + '\n';
_str_main+=__indent() +'# macro pushsv32(name) : push the sign of the 32 bits variable \'name\' #@(signedX32_inc@35)'+ __context() + '\n';
var _pushsv32; _pushsv32=0;
var pushsv32 = function(name){
 _pushsv32++;
var _strpushsv32; 
_strpushsv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro pushsv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro pushsv32(name)[' + [name] +']';
_strpushsv32+=__indent() +'#(begin macro)pushsvX(4,name)' + '\n';
__context__.push('(signedX32_inc@37)');
_strpushsv32+=pushsvX(4,name);
__context__.pop();
_strpushsv32+=__indent() +'#(end macro)pushsvX(4,name)' + '\n';
return _strpushsv32;
}
_str_main+=__indent() +' #@(signedX32_inc@39)'+ __context() + '\n';
_str_main+=__indent() +'# macro pushcv32(name) : push the carry of the 32 bits variable \'name\' #@(signedX32_inc@40)'+ __context() + '\n';
var _pushcv32; _pushcv32=0;
var pushcv32 = function(name){
 _pushcv32++;
var _strpushcv32; 
_strpushcv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro pushcv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro pushcv32(name)[' + [name] +']';
_strpushcv32+=__indent() +'#(begin macro)pushcvX(4,name)' + '\n';
__context__.push('(signedX32_inc@42)');
_strpushcv32+=pushcvX(4,name);
__context__.pop();
_strpushcv32+=__indent() +'#(end macro)pushcvX(4,name)' + '\n';
return _strpushcv32;
}
_str_main+=__indent() +' #@(signedX32_inc@44)'+ __context() + '\n';
_str_main+=__indent() +'# macro popv32(name) : pop the stack to the 32 bits variable \'name\' #@(signedX32_inc@45)'+ __context() + '\n';
var _popv32; _popv32=0;
var popv32 = function(name){
 _popv32++;
var _strpopv32; 
_strpopv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro popv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro popv32(name)[' + [name] +']';
_strpopv32+=__indent() +'#(begin macro)popvX(4,name)' + '\n';
__context__.push('(signedX32_inc@47)');
_strpopv32+=popvX(4,name);
__context__.pop();
_strpopv32+=__indent() +'#(end macro)popvX(4,name)' + '\n';
return _strpopv32;
}
_str_main+=__indent() +' #@(signedX32_inc@49)'+ __context() + '\n';
_str_main+=__indent() +'# macro popsv32(name) : pop the sign(8 bits 0/1) to the 32 bits variable \'name\' #@(signedX32_inc@50)'+ __context() + '\n';
var _popsv32; _popsv32=0;
var popsv32 = function(name){
 _popsv32++;
var _strpopsv32; 
_strpopsv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro popsv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro popsv32(name)[' + [name] +']';
_strpopsv32+=__indent() +'#(begin macro)popsvX(4,name)' + '\n';
__context__.push('(signedX32_inc@52)');
_strpopsv32+=popsvX(4,name);
__context__.pop();
_strpopsv32+=__indent() +'#(end macro)popsvX(4,name)' + '\n';
return _strpopsv32;
}
_str_main+=__indent() +' #@(signedX32_inc@54)'+ __context() + '\n';
_str_main+=__indent() +'# macro popcv32(name) : pop the carry(8 bit 0/1) to the 32 bits variable \'name\' #@(signedX32_inc@55)'+ __context() + '\n';
var _popcv32; _popcv32=0;
var popcv32 = function(name){
 _popcv32++;
var _strpopcv32; 
_strpopcv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro popcv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro popcv32(name)[' + [name] +']';
_strpopcv32+=__indent() +'#(begin macro)popcvX(4,name)' + '\n';
__context__.push('(signedX32_inc@57)');
_strpopcv32+=popcvX(4,name);
__context__.pop();
_strpopcv32+=__indent() +'#(end macro)popcvX(4,name)' + '\n';
return _strpopcv32;
}
_str_main+=__indent() +' #@(signedX32_inc@59)'+ __context() + '\n';
_str_main+=__indent() +'# macro negv32(name) : name = -name #@(signedX32_inc@60)'+ __context() + '\n';
var _negv32; _negv32=0;
var negv32 = function(name){
 _negv32++;
var _strnegv32; 
_strnegv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro negv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro negv32(name)[' + [name] +']';
_strnegv32+=__indent() +'#(begin macro)negvX(4,name)' + '\n';
__context__.push('(signedX32_inc@62)');
_strnegv32+=negvX(4,name);
__context__.pop();
_strnegv32+=__indent() +'#(end macro)negvX(4,name)' + '\n';
return _strnegv32;
}
_str_main+=__indent() +' #@(signedX32_inc@64)'+ __context() + '\n';
_str_main+=__indent() +'# macro absv32(name) : name = abs(name) #@(signedX32_inc@65)'+ __context() + '\n';
var _absv32; _absv32=0;
var absv32 = function(name){
 _absv32++;
var _strabsv32; 
_strabsv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro absv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro absv32(name)[' + [name] +']';
_strabsv32+=__indent() +'#(begin macro)absvX(4,name)' + '\n';
__context__.push('(signedX32_inc@67)');
_strabsv32+=absvX(4,name);
__context__.pop();
_strabsv32+=__indent() +'#(end macro)absvX(4,name)' + '\n';
return _strabsv32;
}
_str_main+=__indent() +' #@(signedX32_inc@69)'+ __context() + '\n';
_str_main+=__indent() +'# macro abs32() : 32 bits head of stack = abs(32 bits head of stack) #@(signedX32_inc@70)'+ __context() + '\n';
var _abs32; _abs32=0;
var abs32 = function(){
 _abs32++;
var _strabs32; 
_strabs32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro abs32()[' + [] +']';
_strabs32+=__indent() +'#(begin macro)absX(4)' + '\n';
__context__.push('(signedX32_inc@72)');
_strabs32+=absX(4);
__context__.pop();
_strabs32+=__indent() +'#(end macro)absX(4)' + '\n';
return _strabs32;
}
_str_main+=__indent() +' #@(signedX32_inc@74)'+ __context() + '\n';
_str_main+=__indent() +'# macro neg32() : 32 bits head of stack = - (32 bits head of stack) #@(signedX32_inc@75)'+ __context() + '\n';
var _neg32; _neg32=0;
var neg32 = function(){
 _neg32++;
var _strneg32; 
_strneg32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro neg32()[' + [] +']';
_strneg32+=__indent() +'#(begin macro)negX(4)' + '\n';
__context__.push('(signedX32_inc@77)');
_strneg32+=negX(4);
__context__.pop();
_strneg32+=__indent() +'#(end macro)negX(4)' + '\n';
return _strneg32;
}
_str_main+=__indent() +' #@(signedX32_inc@79)'+ __context() + '\n';
_str_main+=__indent() +'# macro setc32() : set 1 to 32 bits head of stack carry #@(signedX32_inc@80)'+ __context() + '\n';
var _setc32; _setc32=0;
var setc32 = function(){
 _setc32++;
var _strsetc32; 
_strsetc32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro setc32()[' + [] +']';
_strsetc32+=__indent() +'#(begin macro)setcX(4)' + '\n';
__context__.push('(signedX32_inc@82)');
_strsetc32+=setcX(4);
__context__.pop();
_strsetc32+=__indent() +'#(end macro)setcX(4)' + '\n';
return _strsetc32;
}
_str_main+=__indent() +' #@(signedX32_inc@84)'+ __context() + '\n';
_str_main+=__indent() +'# macro setcv32(name) : set 1 to 32 bits variable \'name\' carry #@(signedX32_inc@85)'+ __context() + '\n';
var _setcv32; _setcv32=0;
var setcv32 = function(name){
 _setcv32++;
var _strsetcv32; 
_strsetcv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro setcv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro setcv32(name)[' + [name] +']';
_strsetcv32+=__indent() +'#(begin macro)setcvX(4,name)' + '\n';
__context__.push('(signedX32_inc@87)');
_strsetcv32+=setcvX(4,name);
__context__.pop();
_strsetcv32+=__indent() +'#(end macro)setcvX(4,name)' + '\n';
return _strsetcv32;
}
_str_main+=__indent() +' #@(signedX32_inc@89)'+ __context() + '\n';
_str_main+=__indent() +'# macro clearc32() : set 0 to 32 bits head of stack carry #@(signedX32_inc@90)'+ __context() + '\n';
var _clearc32; _clearc32=0;
var clearc32 = function(){
 _clearc32++;
var _strclearc32; 
_strclearc32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro clearc32()[' + [] +']';
_strclearc32+=__indent() +'#(begin macro)clearcX(4)' + '\n';
__context__.push('(signedX32_inc@92)');
_strclearc32+=clearcX(4);
__context__.pop();
_strclearc32+=__indent() +'#(end macro)clearcX(4)' + '\n';
return _strclearc32;
}
_str_main+=__indent() +' #@(signedX32_inc@94)'+ __context() + '\n';
_str_main+=__indent() +'# macro clearcv32(name) : set 0 to 32 bits variable \'name\' carry #@(signedX32_inc@95)'+ __context() + '\n';
var _clearcv32; _clearcv32=0;
var clearcv32 = function(name){
 _clearcv32++;
var _strclearcv32; 
_strclearcv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro clearcv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro clearcv32(name)[' + [name] +']';
_strclearcv32+=__indent() +'#(begin macro)clearcvX(4,name)' + '\n';
__context__.push('(signedX32_inc@97)');
_strclearcv32+=clearcvX(4,name);
__context__.pop();
_strclearcv32+=__indent() +'#(end macro)clearcvX(4,name)' + '\n';
return _strclearcv32;
}
_str_main+=__indent() +' #@(signedX32_inc@99)'+ __context() + '\n';
_str_main+=__indent() +'# macro drop32() : drop 32 bits value from stack #@(signedX32_inc@100)'+ __context() + '\n';
var _drop32; _drop32=0;
var drop32 = function(){
 _drop32++;
var _strdrop32; 
_strdrop32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro drop32()[' + [] +']';
_strdrop32+=__indent() +'#(begin macro)dropX(4)' + '\n';
__context__.push('(signedX32_inc@102)');
_strdrop32+=dropX(4);
__context__.pop();
_strdrop32+=__indent() +'#(end macro)dropX(4)' + '\n';
return _strdrop32;
}
_str_main+=__indent() +' #@(signedX32_inc@104)'+ __context() + '\n';
_str_main+=__indent() +'# macro reset32() : reset 32 bits value of the head of stack #@(signedX32_inc@105)'+ __context() + '\n';
var _reset32; _reset32=0;
var reset32 = function(){
 _reset32++;
var _strreset32; 
_strreset32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro reset32()[' + [] +']';
_strreset32+=__indent() +'#(begin macro)resetX(4)' + '\n';
__context__.push('(signedX32_inc@107)');
_strreset32+=resetX(4);
__context__.pop();
_strreset32+=__indent() +'#(end macro)resetX(4)' + '\n';
return _strreset32;
}
_str_main+=__indent() +' #@(signedX32_inc@109)'+ __context() + '\n';
_str_main+=__indent() +'# macro resetv32(name) : reset 32 bits variable \'name\' #@(signedX32_inc@110)'+ __context() + '\n';
var _resetv32; _resetv32=0;
var resetv32 = function(name){
 _resetv32++;
var _strresetv32; 
_strresetv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro resetv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro resetv32(name)[' + [name] +']';
_strresetv32+=__indent() +'#(begin macro)resetvX(4,name)' + '\n';
__context__.push('(signedX32_inc@112)');
_strresetv32+=resetvX(4,name);
__context__.pop();
_strresetv32+=__indent() +'#(end macro)resetvX(4,name)' + '\n';
return _strresetv32;
}
_str_main+=__indent() +' #@(signedX32_inc@114)'+ __context() + '\n';
_str_main+=__indent() +'# macro set32(immValue) : set 32 bits value on the head of stack #@(signedX32_inc@115)'+ __context() + '\n';
var _set32; _set32=0;
var set32 = function(immValue){
 _set32++;
var _strset32; 
_strset32='';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro set32(immValue)[' + [immValue] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro set32(immValue)[' + [immValue] +']';
_strset32+=__indent() +'#(begin macro)setX(4,immValue)' + '\n';
__context__.push('(signedX32_inc@117)');
_strset32+=setX(4,immValue);
__context__.pop();
_strset32+=__indent() +'#(end macro)setX(4,immValue)' + '\n';
return _strset32;
}
_str_main+=__indent() +' #@(signedX32_inc@119)'+ __context() + '\n';
_str_main+=__indent() +'# macro setv32(name, immValue) : set 32 bits immediate value to a 32 bits variable \'name\' #@(signedX32_inc@120)'+ __context() + '\n';
var _setv32; _setv32=0;
var setv32 = function(name,immValue){
 _setv32++;
var _strsetv32; 
_strsetv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro setv32(name,immValue)[' + [name,immValue] +']';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro setv32(name,immValue)[' + [name,immValue] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro setv32(name,immValue)[' + [name,immValue] +']';
_strsetv32+=__indent() +'#(begin macro)setvX(4,name, immValue)' + '\n';
__context__.push('(signedX32_inc@122)');
_strsetv32+=setvX(4,name, immValue);
__context__.pop();
_strsetv32+=__indent() +'#(end macro)setvX(4,name, immValue)' + '\n';
return _strsetv32;
}
_str_main+=__indent() +' #@(signedX32_inc@124)'+ __context() + '\n';
_str_main+=__indent() +'# macro fixsv32(name) : be sure to have sign to zero if 32 bits variable \'name\' is zero #@(signedX32_inc@125)'+ __context() + '\n';
var _fixsv32; _fixsv32=0;
var fixsv32 = function(name){
 _fixsv32++;
var _strfixsv32; 
_strfixsv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro fixsv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro fixsv32(name)[' + [name] +']';
_strfixsv32+=__indent() +'#(begin macro)fixsvX(4,name)' + '\n';
__context__.push('(signedX32_inc@127)');
_strfixsv32+=fixsvX(4,name);
__context__.pop();
_strfixsv32+=__indent() +'#(end macro)fixsvX(4,name)' + '\n';
return _strfixsv32;
}
_str_main+=__indent() +' #@(signedX32_inc@129)'+ __context() + '\n';
_str_main+=__indent() +'# macro fixs32() : be sure to have sign to zero if 32 bits head of stack value is zero #@(signedX32_inc@130)'+ __context() + '\n';
var _fixs32; _fixs32=0;
var fixs32 = function(){
 _fixs32++;
var _strfixs32; 
_strfixs32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro fixs32()[' + [] +']';
_strfixs32+=__indent() +'#(begin macro)fixsX(4)' + '\n';
__context__.push('(signedX32_inc@132)');
_strfixs32+=fixsX(4);
__context__.pop();
_strfixs32+=__indent() +'#(end macro)fixsX(4)' + '\n';
return _strfixs32;
}
_str_main+=__indent() +' #@(signedX32_inc@134)'+ __context() + '\n';
_str_main+=__indent() +'# macro bool32() : same as \'bool\' but with a 32 bits value on stack #@(signedX32_inc@135)'+ __context() + '\n';
var _bool32; _bool32=0;
var bool32 = function(){
 _bool32++;
var _strbool32; 
_strbool32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro bool32()[' + [] +']';
_strbool32+=__indent() +'#(begin macro)boolX(4)' + '\n';
__context__.push('(signedX32_inc@137)');
_strbool32+=boolX(4);
__context__.pop();
_strbool32+=__indent() +'#(end macro)boolX(4)' + '\n';
return _strbool32;
}
_str_main+=__indent() +' #@(signedX32_inc@139)'+ __context() + '\n';
_str_main+=__indent() +'# macro boolv32(name) : push on stack the bool(name) 32 bits #@(signedX32_inc@140)'+ __context() + '\n';
var _boolv32; _boolv32=0;
var boolv32 = function(name){
 _boolv32++;
var _strboolv32; 
_strboolv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro boolv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro boolv32(name)[' + [name] +']';
_strboolv32+=__indent() +'#(begin macro)boolvX(4,name)' + '\n';
__context__.push('(signedX32_inc@142)');
_strboolv32+=boolvX(4,name);
__context__.pop();
_strboolv32+=__indent() +'#(end macro)boolvX(4,name)' + '\n';
return _strboolv32;
}
_str_main+=__indent() +' #@(signedX32_inc@144)'+ __context() + '\n';
_str_main+=__indent() +'# macro incv32(name) : name = name +1 (32 bits) #@(signedX32_inc@145)'+ __context() + '\n';
var _incv32; _incv32=0;
var incv32 = function(name){
 _incv32++;
var _strincv32; 
_strincv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro incv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro incv32(name)[' + [name] +']';
_strincv32+=__indent() +'#(begin macro)incvX(4,name)' + '\n';
__context__.push('(signedX32_inc@147)');
_strincv32+=incvX(4,name);
__context__.pop();
_strincv32+=__indent() +'#(end macro)incvX(4,name)' + '\n';
return _strincv32;
}
_str_main+=__indent() +' #@(signedX32_inc@149)'+ __context() + '\n';
_str_main+=__indent() +'# macro inc32() : 32 bits head of stack value incremented #@(signedX32_inc@150)'+ __context() + '\n';
var _inc32; _inc32=0;
var inc32 = function(){
 _inc32++;
var _strinc32; 
_strinc32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro inc32()[' + [] +']';
_strinc32+=__indent() +'#(begin macro)incX(4)' + '\n';
__context__.push('(signedX32_inc@152)');
_strinc32+=incX(4);
__context__.pop();
_strinc32+=__indent() +'#(end macro)incX(4)' + '\n';
return _strinc32;
}
_str_main+=__indent() +' #@(signedX32_inc@154)'+ __context() + '\n';
_str_main+=__indent() +'# macro decv32(name) : name-- (32 bits) #@(signedX32_inc@155)'+ __context() + '\n';
var _decv32; _decv32=0;
var decv32 = function(name){
 _decv32++;
var _strdecv32; 
_strdecv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro decv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro decv32(name)[' + [name] +']';
_strdecv32+=__indent() +'#(begin macro)decvX(4,name)' + '\n';
__context__.push('(signedX32_inc@157)');
_strdecv32+=decvX(4,name);
__context__.pop();
_strdecv32+=__indent() +'#(end macro)decvX(4,name)' + '\n';
return _strdecv32;
}
_str_main+=__indent() +' #@(signedX32_inc@159)'+ __context() + '\n';
_str_main+=__indent() +'# macro dec32() : 32 bits head of stack value decrement #@(signedX32_inc@160)'+ __context() + '\n';
var _dec32; _dec32=0;
var dec32 = function(){
 _dec32++;
var _strdec32; 
_strdec32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro dec32()[' + [] +']';
_strdec32+=__indent() +'#(begin macro)decX(4)' + '\n';
__context__.push('(signedX32_inc@162)');
_strdec32+=decX(4);
__context__.pop();
_strdec32+=__indent() +'#(end macro)decX(4)' + '\n';
return _strdec32;
}
_str_main+=__indent() +' #@(signedX32_inc@164)'+ __context() + '\n';
_str_main+=__indent() +'# macro addvi32(name, immValue) : name += immediate value #@(signedX32_inc@165)'+ __context() + '\n';
var _addvi32; _addvi32=0;
var addvi32 = function(name,immValue){
 _addvi32++;
var _straddvi32; 
_straddvi32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro addvi32(name,immValue)[' + [name,immValue] +']';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro addvi32(name,immValue)[' + [name,immValue] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro addvi32(name,immValue)[' + [name,immValue] +']';
_straddvi32+=__indent() +'#(begin macro)addviX(4,name,immValue)' + '\n';
__context__.push('(signedX32_inc@167)');
_straddvi32+=addviX(4,name,immValue);
__context__.pop();
_straddvi32+=__indent() +'#(end macro)addviX(4,name,immValue)' + '\n';
return _straddvi32;
}
_str_main+=__indent() +' #@(signedX32_inc@169)'+ __context() + '\n';
_str_main+=__indent() +'# macro addi32(immValue) : 32 bits head of stack value += immediate value #@(signedX32_inc@170)'+ __context() + '\n';
var _addi32; _addi32=0;
var addi32 = function(immValue){
 _addi32++;
var _straddi32; 
_straddi32='';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro addi32(immValue)[' + [immValue] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro addi32(immValue)[' + [immValue] +']';
_straddi32+=__indent() +'#(begin macro)addiX(4,immValue)' + '\n';
__context__.push('(signedX32_inc@172)');
_straddi32+=addiX(4,immValue);
__context__.pop();
_straddi32+=__indent() +'#(end macro)addiX(4,immValue)' + '\n';
return _straddi32;
}
_str_main+=__indent() +' #@(signedX32_inc@174)'+ __context() + '\n';
_str_main+=__indent() +'# macro subvi32(name, immValue) : name -= immediate value #@(signedX32_inc@175)'+ __context() + '\n';
var _subvi32; _subvi32=0;
var subvi32 = function(name,immValue){
 _subvi32++;
var _strsubvi32; 
_strsubvi32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro subvi32(name,immValue)[' + [name,immValue] +']';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro subvi32(name,immValue)[' + [name,immValue] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro subvi32(name,immValue)[' + [name,immValue] +']';
_strsubvi32+=__indent() +'#(begin macro)subviX(4,name,immValue)' + '\n';
__context__.push('(signedX32_inc@177)');
_strsubvi32+=subviX(4,name,immValue);
__context__.pop();
_strsubvi32+=__indent() +'#(end macro)subviX(4,name,immValue)' + '\n';
return _strsubvi32;
}
_str_main+=__indent() +' #@(signedX32_inc@179)'+ __context() + '\n';
_str_main+=__indent() +'# macro subi32(immValue) : 32 bits head of stack value -= immediate value #@(signedX32_inc@180)'+ __context() + '\n';
var _subi32; _subi32=0;
var subi32 = function(immValue){
 _subi32++;
var _strsubi32; 
_strsubi32='';
if (typeof immValue == 'undefined') throw 'Parameter immValue is undefined in call of  macro subi32(immValue)[' + [immValue] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro subi32(immValue)[' + [immValue] +']';
_strsubi32+=__indent() +'#(begin macro)subiX(4,immValue)' + '\n';
__context__.push('(signedX32_inc@182)');
_strsubi32+=subiX(4,immValue);
__context__.pop();
_strsubi32+=__indent() +'#(end macro)subiX(4,immValue)' + '\n';
return _strsubi32;
}
_str_main+=__indent() +' #@(signedX32_inc@184)'+ __context() + '\n';
_str_main+=__indent() +'# macro addvvv32(name, nameA, nameB) : name = nameA + nameB #@(signedX32_inc@185)'+ __context() + '\n';
var _addvvv32; _addvvv32=0;
var addvvv32 = function(name, nameA, nameB){
 _addvvv32++;
var _straddvvv32; 
_straddvvv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro addvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro addvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro addvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro addvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
_straddvvv32+=__indent() +'#(begin macro)addvvvX(4,name,nameA,nameB)' + '\n';
__context__.push('(signedX32_inc@187)');
_straddvvv32+=addvvvX(4,name,nameA,nameB);
__context__.pop();
_straddvvv32+=__indent() +'#(end macro)addvvvX(4,name,nameA,nameB)' + '\n';
return _straddvvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@189)'+ __context() + '\n';
_str_main+=__indent() +'# macro addvv32(name, nameA) : name += nameA #@(signedX32_inc@190)'+ __context() + '\n';
var _addvv32; _addvv32=0;
var addvv32 = function(name, nameA){
 _addvv32++;
var _straddvv32; 
_straddvv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro addvv32(name, nameA)[' + [name, nameA] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro addvv32(name, nameA)[' + [name, nameA] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro addvv32(name, nameA)[' + [name, nameA] +']';
_straddvv32+=__indent() +'#(begin macro)addvvX(4,name,nameA)' + '\n';
__context__.push('(signedX32_inc@192)');
_straddvv32+=addvvX(4,name,nameA);
__context__.pop();
_straddvv32+=__indent() +'#(end macro)addvvX(4,name,nameA)' + '\n';
return _straddvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@194)'+ __context() + '\n';
_str_main+=__indent() +'# macro addv32(nameA) : head stack += nameA #@(signedX32_inc@195)'+ __context() + '\n';
var _addv32; _addv32=0;
var addv32 = function(nameA){
 _addv32++;
var _straddv32; 
_straddv32='';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro addv32(nameA)[' + [nameA] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro addv32(nameA)[' + [nameA] +']';
_straddv32+=__indent() +'#(begin macro)addvX(4,nameA)' + '\n';
__context__.push('(signedX32_inc@197)');
_straddv32+=addvX(4,nameA);
__context__.pop();
_straddv32+=__indent() +'#(end macro)addvX(4,nameA)' + '\n';
return _straddv32;
}
_str_main+=__indent() +' #@(signedX32_inc@199)'+ __context() + '\n';
_str_main+=__indent() +'# macro add32() : stack-1 = stack-1 + stack ; stack-- #@(signedX32_inc@200)'+ __context() + '\n';
var _add32; _add32=0;
var add32 = function(){
 _add32++;
var _stradd32; 
_stradd32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro add32()[' + [] +']';
_stradd32+=__indent() +'#(begin macro)addX(4)' + '\n';
__context__.push('(signedX32_inc@202)');
_stradd32+=addX(4);
__context__.pop();
_stradd32+=__indent() +'#(end macro)addX(4)' + '\n';
return _stradd32;
}
_str_main+=__indent() +' #@(signedX32_inc@204)'+ __context() + '\n';
_str_main+=__indent() +'# macro subvvv32(name, nameA, nameB) : name = nameA - nameB #@(signedX32_inc@205)'+ __context() + '\n';
var _subvvv32; _subvvv32=0;
var subvvv32 = function(name, nameA, nameB){
 _subvvv32++;
var _strsubvvv32; 
_strsubvvv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro subvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro subvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro subvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro subvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
_strsubvvv32+=__indent() +'#(begin macro)subvvvX(4,name,nameA,nameB)' + '\n';
__context__.push('(signedX32_inc@207)');
_strsubvvv32+=subvvvX(4,name,nameA,nameB);
__context__.pop();
_strsubvvv32+=__indent() +'#(end macro)subvvvX(4,name,nameA,nameB)' + '\n';
return _strsubvvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@209)'+ __context() + '\n';
_str_main+=__indent() +'# macro subvv32(name, nameA) : name -= nameA #@(signedX32_inc@210)'+ __context() + '\n';
var _subvv32; _subvv32=0;
var subvv32 = function(name, nameA){
 _subvv32++;
var _strsubvv32; 
_strsubvv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro subvv32(name, nameA)[' + [name, nameA] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro subvv32(name, nameA)[' + [name, nameA] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro subvv32(name, nameA)[' + [name, nameA] +']';
_strsubvv32+=__indent() +'#(begin macro)subvvX(4,name,nameA)' + '\n';
__context__.push('(signedX32_inc@212)');
_strsubvv32+=subvvX(4,name,nameA);
__context__.pop();
_strsubvv32+=__indent() +'#(end macro)subvvX(4,name,nameA)' + '\n';
return _strsubvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@214)'+ __context() + '\n';
_str_main+=__indent() +'# macro subv32(nameA) : head stack -= nameA #@(signedX32_inc@215)'+ __context() + '\n';
var _addv32; _addv32=0;
var addv32 = function(nameA){
 _addv32++;
var _straddv32; 
_straddv32='';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro addv32(nameA)[' + [nameA] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro addv32(nameA)[' + [nameA] +']';
_straddv32+=__indent() +'#(begin macro)addvX(4,nameA)' + '\n';
__context__.push('(signedX32_inc@217)');
_straddv32+=addvX(4,nameA);
__context__.pop();
_straddv32+=__indent() +'#(end macro)addvX(4,nameA)' + '\n';
return _straddv32;
}
_str_main+=__indent() +' #@(signedX32_inc@219)'+ __context() + '\n';
_str_main+=__indent() +'# macro sub32() : stack-1 = stack-1 - stack ; stack-- #@(signedX32_inc@220)'+ __context() + '\n';
var _sub32; _sub32=0;
var sub32 = function(){
 _sub32++;
var _strsub32; 
_strsub32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro sub32()[' + [] +']';
_strsub32+=__indent() +'#(begin macro)subX(4)' + '\n';
__context__.push('(signedX32_inc@222)');
_strsub32+=subX(4);
__context__.pop();
_strsub32+=__indent() +'#(end macro)subX(4)' + '\n';
return _strsub32;
}
_str_main+=__indent() +' #@(signedX32_inc@224)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulvvv32(name, nameA, nameB) : name = nameA * nameB #@(signedX32_inc@225)'+ __context() + '\n';
var _mulvvv32; _mulvvv32=0;
var mulvvv32 = function(name, nameA, nameB){
 _mulvvv32++;
var _strmulvvv32; 
_strmulvvv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro mulvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro mulvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro mulvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
if (arguments.length != 3) throw 'Too much arguments provided to macro mulvvv32(name, nameA, nameB)[' + [name, nameA, nameB] +']';
_strmulvvv32+=__indent() +'#(begin macro)mulvvvX(4, name, nameA, nameB)' + '\n';
__context__.push('(signedX32_inc@227)');
_strmulvvv32+=mulvvvX(4, name, nameA, nameB);
__context__.pop();
_strmulvvv32+=__indent() +'#(end macro)mulvvvX(4, name, nameA, nameB)' + '\n';
return _strmulvvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@229)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulvv32(name, nameA) : name *= nameA #@(signedX32_inc@230)'+ __context() + '\n';
var _mulvv32; _mulvv32=0;
var mulvv32 = function(name, nameA){
 _mulvv32++;
var _strmulvv32; 
_strmulvv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro mulvv32(name, nameA)[' + [name, nameA] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro mulvv32(name, nameA)[' + [name, nameA] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro mulvv32(name, nameA)[' + [name, nameA] +']';
_strmulvv32+=__indent() +'#(begin macro)mulvvX(4,name,nameA)' + '\n';
__context__.push('(signedX32_inc@232)');
_strmulvv32+=mulvvX(4,name,nameA);
__context__.pop();
_strmulvv32+=__indent() +'#(end macro)mulvvX(4,name,nameA)' + '\n';
return _strmulvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@234)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulv32(name) : head of stack *= name #@(signedX32_inc@235)'+ __context() + '\n';
var _mulv32; _mulv32=0;
var mulv32 = function(name){
 _mulv32++;
var _strmulv32; 
_strmulv32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro mulv32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro mulv32(name)[' + [name] +']';
_strmulv32+=__indent() +'#(begin macro)mulvX(4,name)' + '\n';
__context__.push('(signedX32_inc@237)');
_strmulv32+=mulvX(4,name);
__context__.pop();
_strmulv32+=__indent() +'#(end macro)mulvX(4,name)' + '\n';
return _strmulv32;
}
_str_main+=__indent() +' #@(signedX32_inc@239)'+ __context() + '\n';
_str_main+=__indent() +'# macro mul32() : stack-1 = stack-1 * stack : stack-- #@(signedX32_inc@240)'+ __context() + '\n';
var _mul32; _mul32=0;
var mul32 = function(){
 _mul32++;
var _strmul32; 
_strmul32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro mul32()[' + [] +']';
_strmul32+=__indent() +'#(begin macro)mulX(4)' + '\n';
__context__.push('(signedX32_inc@242)');
_strmul32+=mulX(4);
__context__.pop();
_strmul32+=__indent() +'#(end macro)mulX(4)' + '\n';
return _strmul32;
}
_str_main+=__indent() +' #@(signedX32_inc@244)'+ __context() + '\n';
_str_main+=__indent() +'# macro equalvv32(nameA, nameB) : push 1 if NameA == NameB , push 0 otherwise #@(signedX32_inc@245)'+ __context() + '\n';
var _equalvv32; _equalvv32=0;
var equalvv32 = function(nameA, nameB){
 _equalvv32++;
var _strequalvv32; 
_strequalvv32='';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro equalvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro equalvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro equalvv32(nameA, nameB)[' + [nameA, nameB] +']';
_strequalvv32+=__indent() +'#(begin macro)equalvvX(4, nameA, nameB)' + '\n';
__context__.push('(signedX32_inc@247)');
_strequalvv32+=equalvvX(4, nameA, nameB);
__context__.pop();
_strequalvv32+=__indent() +'#(end macro)equalvvX(4, nameA, nameB)' + '\n';
return _strequalvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@249)'+ __context() + '\n';
_str_main+=__indent() +'# macro equal32() : same as "equal" but with 32 bits value in stack #@(signedX32_inc@250)'+ __context() + '\n';
var _equal32; _equal32=0;
var equal32 = function(){
 _equal32++;
var _strequal32; 
_strequal32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro equal32()[' + [] +']';
_strequal32+=__indent() +'#(begin macro)equalX(4)' + '\n';
__context__.push('(signedX32_inc@252)');
_strequal32+=equalX(4);
__context__.pop();
_strequal32+=__indent() +'#(end macro)equalX(4)' + '\n';
return _strequal32;
}
_str_main+=__indent() +' #@(signedX32_inc@254)'+ __context() + '\n';
_str_main+=__indent() +'# macro diffvv32(nameA, nameB) : push 1 if Name != NameB , push 0 otherwise #@(signedX32_inc@255)'+ __context() + '\n';
var _diffvv32; _diffvv32=0;
var diffvv32 = function(nameA, nameB){
 _diffvv32++;
var _strdiffvv32; 
_strdiffvv32='';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro diffvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro diffvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro diffvv32(nameA, nameB)[' + [nameA, nameB] +']';
_strdiffvv32+=__indent() +'#(begin macro)diffvvX(4, nameA, nameB)' + '\n';
__context__.push('(signedX32_inc@257)');
_strdiffvv32+=diffvvX(4, nameA, nameB);
__context__.pop();
_strdiffvv32+=__indent() +'#(end macro)diffvvX(4, nameA, nameB)' + '\n';
return _strdiffvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@259)'+ __context() + '\n';
_str_main+=__indent() +'# macro diff32() : same as "diff" but with 32 bits value in stack #@(signedX32_inc@260)'+ __context() + '\n';
var _diff32; _diff32=0;
var diff32 = function(){
 _diff32++;
var _strdiff32; 
_strdiff32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro diff32()[' + [] +']';
_strdiff32+=__indent() +'#(begin macro)diffX(4)' + '\n';
__context__.push('(signedX32_inc@262)');
_strdiff32+=diffX(4);
__context__.pop();
_strdiff32+=__indent() +'#(end macro)diffX(4)' + '\n';
return _strdiff32;
}
_str_main+=__indent() +' #@(signedX32_inc@264)'+ __context() + '\n';
_str_main+=__indent() +'# macro supequalvv32(nameA, nameB) : push 1 if nameA >= nameB push 0 otherwise #@(signedX32_inc@265)'+ __context() + '\n';
var _supequalvv32; _supequalvv32=0;
var supequalvv32 = function(nameA, nameB){
 _supequalvv32++;
var _strsupequalvv32; 
_strsupequalvv32='';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro supequalvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro supequalvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro supequalvv32(nameA, nameB)[' + [nameA, nameB] +']';
_strsupequalvv32+=__indent() +'#(begin macro)supequalvvX(4,nameA, nameB)' + '\n';
__context__.push('(signedX32_inc@267)');
_strsupequalvv32+=supequalvvX(4,nameA, nameB);
__context__.pop();
_strsupequalvv32+=__indent() +'#(end macro)supequalvvX(4,nameA, nameB)' + '\n';
return _strsupequalvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@269)'+ __context() + '\n';
_str_main+=__indent() +'# macro supequal32() : push 1 if stack-1 >= stack , push 0 otherwise : after dropped 2 32 bits value from stack #@(signedX32_inc@270)'+ __context() + '\n';
var _supequal32; _supequal32=0;
var supequal32 = function(){
 _supequal32++;
var _strsupequal32; 
_strsupequal32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro supequal32()[' + [] +']';
_strsupequal32+=__indent() +'#(begin macro)supequalX(4)' + '\n';
__context__.push('(signedX32_inc@272)');
_strsupequal32+=supequalX(4);
__context__.pop();
_strsupequal32+=__indent() +'#(end macro)supequalX(4)' + '\n';
return _strsupequal32;
}
_str_main+=__indent() +' #@(signedX32_inc@274)'+ __context() + '\n';
_str_main+=__indent() +'# macro infvv32(nameA, nameB) : push 1 if nameA < nameB push 0 otherwise #@(signedX32_inc@275)'+ __context() + '\n';
var _infvv32; _infvv32=0;
var infvv32 = function(nameA, nameB){
 _infvv32++;
var _strinfvv32; 
_strinfvv32='';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro infvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro infvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro infvv32(nameA, nameB)[' + [nameA, nameB] +']';
_strinfvv32+=__indent() +'#(begin macro)infvvX(4, nameA, nameB)' + '\n';
__context__.push('(signedX32_inc@277)');
_strinfvv32+=infvvX(4, nameA, nameB);
__context__.pop();
_strinfvv32+=__indent() +'#(end macro)infvvX(4, nameA, nameB)' + '\n';
return _strinfvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@279)'+ __context() + '\n';
_str_main+=__indent() +'# macro inf32() : push 1 if stack-1 < stack, push 0 otherwise : after dropped 2 32 bits value from stack #@(signedX32_inc@280)'+ __context() + '\n';
var _inf32; _inf32=0;
var inf32 = function(){
 _inf32++;
var _strinf32; 
_strinf32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro inf32()[' + [] +']';
_strinf32+=__indent() +'#(begin macro)infX(4)' + '\n';
__context__.push('(signedX32_inc@282)');
_strinf32+=infX(4);
__context__.pop();
_strinf32+=__indent() +'#(end macro)infX(4)' + '\n';
return _strinf32;
}
_str_main+=__indent() +' #@(signedX32_inc@284)'+ __context() + '\n';
_str_main+=__indent() +'# macro infequalvv32(nameA, nameB) : push 1 if nameA <= nameB push 0 otherwise #@(signedX32_inc@285)'+ __context() + '\n';
var _infequalvv32; _infequalvv32=0;
var infequalvv32 = function(nameA, nameB){
 _infequalvv32++;
var _strinfequalvv32; 
_strinfequalvv32='';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro infequalvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro infequalvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro infequalvv32(nameA, nameB)[' + [nameA, nameB] +']';
_strinfequalvv32+=__indent() +'#(begin macro)infequalvvX(4,nameA,nameB)' + '\n';
__context__.push('(signedX32_inc@287)');
_strinfequalvv32+=infequalvvX(4,nameA,nameB);
__context__.pop();
_strinfequalvv32+=__indent() +'#(end macro)infequalvvX(4,nameA,nameB)' + '\n';
return _strinfequalvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@289)'+ __context() + '\n';
_str_main+=__indent() +'# macro infequal32() : push 1 if stack-1 <= stack, push 0 otherwise : after dropped 2 32 bits value from stack #@(signedX32_inc@290)'+ __context() + '\n';
var _infequal32; _infequal32=0;
var infequal32 = function(){
 _infequal32++;
var _strinfequal32; 
_strinfequal32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro infequal32()[' + [] +']';
_strinfequal32+=__indent() +'#(begin macro)infequalX(4)' + '\n';
__context__.push('(signedX32_inc@292)');
_strinfequal32+=infequalX(4);
__context__.pop();
_strinfequal32+=__indent() +'#(end macro)infequalX(4)' + '\n';
return _strinfequal32;
}
_str_main+=__indent() +' #@(signedX32_inc@294)'+ __context() + '\n';
_str_main+=__indent() +'# macro supvv32(nameA , nameB) : push 1 if nameA > nameB push 0 otherwise #@(signedX32_inc@295)'+ __context() + '\n';
var _supvv32; _supvv32=0;
var supvv32 = function(nameA, nameB){
 _supvv32++;
var _strsupvv32; 
_strsupvv32='';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro supvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro supvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro supvv32(nameA, nameB)[' + [nameA, nameB] +']';
_strsupvv32+=__indent() +'#(begin macro)supvvX(4,nameA,nameB)' + '\n';
__context__.push('(signedX32_inc@297)');
_strsupvv32+=supvvX(4,nameA,nameB);
__context__.pop();
_strsupvv32+=__indent() +'#(end macro)supvvX(4,nameA,nameB)' + '\n';
return _strsupvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@299)'+ __context() + '\n';
_str_main+=__indent() +'# macro sup32() : push 1 if stack-1 > stack, push 0 otherwise : after dropped 2 32 bits value from stack #@(signedX32_inc@300)'+ __context() + '\n';
var _sup32; _sup32=0;
var sup32 = function(){
 _sup32++;
var _strsup32; 
_strsup32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro sup32()[' + [] +']';
_strsup32+=__indent() +'#(begin macro)supX(4)' + '\n';
__context__.push('(signedX32_inc@302)');
_strsup32+=supX(4);
__context__.pop();
_strsup32+=__indent() +'#(end macro)supX(4)' + '\n';
return _strsup32;
}
_str_main+=__indent() +' #@(signedX32_inc@304)'+ __context() + '\n';
_str_main+=__indent() +'# macro divvvvv32(nameAdivB, nameAmodB, nameA, nameB) : nameAdivB = nameA div nameB ; nameAmodB = nameA mod nameB #@(signedX32_inc@305)'+ __context() + '\n';
var _divvvvv32; _divvvvv32=0;
var divvvvv32 = function(nameAdivB, nameAmodB, nameA, nameB){
 _divvvvv32++;
var _strdivvvvv32; 
_strdivvvvv32='';
if (typeof nameAdivB == 'undefined') throw 'Parameter nameAdivB is undefined in call of  macro divvvvv32(nameAdivB, nameAmodB, nameA, nameB)[' + [nameAdivB, nameAmodB, nameA, nameB] +']';
if (typeof nameAmodB == 'undefined') throw 'Parameter nameAmodB is undefined in call of  macro divvvvv32(nameAdivB, nameAmodB, nameA, nameB)[' + [nameAdivB, nameAmodB, nameA, nameB] +']';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro divvvvv32(nameAdivB, nameAmodB, nameA, nameB)[' + [nameAdivB, nameAmodB, nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro divvvvv32(nameAdivB, nameAmodB, nameA, nameB)[' + [nameAdivB, nameAmodB, nameA, nameB] +']';
if (arguments.length != 4) throw 'Too much arguments provided to macro divvvvv32(nameAdivB, nameAmodB, nameA, nameB)[' + [nameAdivB, nameAmodB, nameA, nameB] +']';
_strdivvvvv32+=__indent() +'#(begin macro)divvvvvX(4,nameAdivB, nameAmodB, nameA, nameB)' + '\n';
__context__.push('(signedX32_inc@307)');
_strdivvvvv32+=divvvvvX(4,nameAdivB, nameAmodB, nameA, nameB);
__context__.pop();
_strdivvvvv32+=__indent() +'#(end macro)divvvvvX(4,nameAdivB, nameAmodB, nameA, nameB)' + '\n';
return _strdivvvvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@309)'+ __context() + '\n';
_str_main+=__indent() +'# macro divvv32(nameA, nameB) : Push 2 32 bits values  : stack-1 = nameA mod nameB ; stack = nameA div nameB #@(signedX32_inc@310)'+ __context() + '\n';
var _divvv32; _divvv32=0;
var divvv32 = function(nameA, nameB){
 _divvv32++;
var _strdivvv32; 
_strdivvv32='';
if (typeof nameA == 'undefined') throw 'Parameter nameA is undefined in call of  macro divvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (typeof nameB == 'undefined') throw 'Parameter nameB is undefined in call of  macro divvv32(nameA, nameB)[' + [nameA, nameB] +']';
if (arguments.length != 2) throw 'Too much arguments provided to macro divvv32(nameA, nameB)[' + [nameA, nameB] +']';
_strdivvv32+=__indent() +'#(begin macro)divvvX(4,nameA,nameB)' + '\n';
__context__.push('(signedX32_inc@312)');
_strdivvv32+=divvvX(4,nameA,nameB);
__context__.pop();
_strdivvv32+=__indent() +'#(end macro)divvvX(4,nameA,nameB)' + '\n';
return _strdivvv32;
}
_str_main+=__indent() +' #@(signedX32_inc@314)'+ __context() + '\n';
_str_main+=__indent() +'# macro div32() : stack-1 == A , stack == B ; stack-1 = A mod B , stack = A div B #@(signedX32_inc@315)'+ __context() + '\n';
var _div32; _div32=0;
var div32 = function(){
 _div32++;
var _strdiv32; 
_strdiv32='';
if (arguments.length != 0) throw 'Too much arguments provided to macro div32()[' + [] +']';
_strdiv32+=__indent() +'#(begin macro)divX(4)' + '\n';
__context__.push('(signedX32_inc@317)');
_strdiv32+=divX(4);
__context__.pop();
_strdiv32+=__indent() +'#(end macro)divX(4)' + '\n';
return _strdiv32;
}
_str_main+=__indent() +' #@(signedX32_inc@319)'+ __context() + '\n';
_str_main+=__indent() +'# macro write32(name) : print out the decimal value (signed) #@(signedX32_inc@320)'+ __context() + '\n';
var _write32; _write32=0;
var write32 = function(name){
 _write32++;
var _strwrite32; 
_strwrite32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro write32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro write32(name)[' + [name] +']';
_strwrite32+=__indent() +'#(begin macro)writeX(4,name)' + '\n';
__context__.push('(signedX32_inc@322)');
_strwrite32+=writeX(4,name);
__context__.pop();
_strwrite32+=__indent() +'#(end macro)writeX(4,name)' + '\n';
return _strwrite32;
}
_str_main+=__indent() +' #@(signedX32_inc@324)'+ __context() + '\n';
_str_main+=__indent() +'# macro printhexa32(name) : print the 32 bit variable in hexadecimal #@(signedX32_inc@325)'+ __context() + '\n';
var _printhexa32; _printhexa32=0;
var printhexa32 = function(name){
 _printhexa32++;
var _strprinthexa32; 
_strprinthexa32='';
if (typeof name == 'undefined') throw 'Parameter name is undefined in call of  macro printhexa32(name)[' + [name] +']';
if (arguments.length != 1) throw 'Too much arguments provided to macro printhexa32(name)[' + [name] +']';
_strprinthexa32+=__indent() +'#(begin macro)printhexaX(4,name)' + '\n';
__context__.push('(signedX32_inc@327)');
_strprinthexa32+=printhexaX(4,name);
__context__.pop();
_strprinthexa32+=__indent() +'#(end macro)printhexaX(4,name)' + '\n';
return _strprinthexa32;
}
_str_main+=__indent() +' #@(signedX32_inc@329)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)declareTmpX(4)' + '\n';
__context__.push('(signedX32_inc@330)');
_str_main+=declareTmpX(4);
__context__.pop();
_str_main+=__indent() +'#(end macro)declareTmpX(4)' + '\n';
_str_main+=__indent() +' #@(signedX32_inc@331)'+ __context() + '\n';
_str_main+=__indent() +'#(end include)../../samples/include/signedX32.inc' + '\n';
_str_main+=__indent() +' #@(main@4)'+ __context() + '\n';
_str_main+=__indent() +'# signedX16 macros test #@(main@5)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("Signed 32 bits macro test.\\n\\n")' + '\n';
__context__.push('(main@6)');
_str_main+=print("Signed 32 bits macro test.\n\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("Signed 32 bits macro test.\\n\\n")' + '\n';
_str_main+=__indent() +' #@(main@7)'+ __context() + '\n';
_str_main+=__indent() +'# macro var32(name) :declare global 16 bits #@(main@8)'+ __context() + '\n';
_str_main+=__indent() +'# macro lvar32(name) : declare local 16 bits #@(main@9)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@10)'+ __context() + '\n';
_str_main+=__indent() +'# macro fixsv32(name) : be sure that name is positive if equal to zero #@(main@11)'+ __context() + '\n';
_str_main+=__indent() +'# macro fixs32() : be sure to have sign to zero if 16 bits head of stack value is zero #@(main@12)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@13)'+ __context() + '\n';
_str_main+=__indent() +'# macro pushv32(name) : push 16 bits name on stack #@(main@14)'+ __context() + '\n';
_str_main+=__indent() +'# macro push32(immValue) : push immediate16 bits value on the stack #@(main@15)'+ __context() + '\n';
_str_main+=__indent() +'# macro pushsv32(name) : push the sign of the 16 bits variable \'name\' #@(main@16)'+ __context() + '\n';
_str_main+=__indent() +'# macro pushcv32(name) : push the carry of the 16 bits variable \'name\' #@(main@17)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@18)'+ __context() + '\n';
_str_main+=__indent() +'# macro dup32() : duplicate 16bits value on stack #@(main@19)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@20)'+ __context() + '\n';
_str_main+=__indent() +'# macro popv32(name) : pop the stack to the 16 bits variable \'name\' #@(main@21)'+ __context() + '\n';
_str_main+=__indent() +'# macro popsv32(name) : pop the sign(8 bits 0/1) to the 16 bits variable \'name\' #@(main@22)'+ __context() + '\n';
_str_main+=__indent() +'# macro popcv32(name) : pop the carry(8 bit 0/1) to the 16 bits variable \'name\' #@(main@23)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@24)'+ __context() + '\n';
_str_main+=__indent() +'# macro drop32() : drop 16 bits value from stack #@(main@25)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@26)'+ __context() + '\n';
_str_main+=__indent() +'# macro negv32(name) : name = -name #@(main@27)'+ __context() + '\n';
_str_main+=__indent() +'# macro neg32() : 16 bits head of stack = - (16 bits head of stack) #@(main@28)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@29)'+ __context() + '\n';
_str_main+=__indent() +'# macro absv32(name) : name = abs(name) #@(main@30)'+ __context() + '\n';
_str_main+=__indent() +'# macro abs32() : 16 bits head of stack = abs(16 bits head of stack) #@(main@31)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@32)'+ __context() + '\n';
_str_main+=__indent() +'# macro setc32() : set 1 to 16 bits head of stack carry #@(main@33)'+ __context() + '\n';
_str_main+=__indent() +'# macro setcv32(name) : set 1 to 16 bits variable \'name\' carry #@(main@34)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@35)'+ __context() + '\n';
_str_main+=__indent() +'# macro clearc32() : set 0 to 16 bits head of stack carry #@(main@36)'+ __context() + '\n';
_str_main+=__indent() +'# macro clearcv32(name) : set 0 to 16 bits variable \'name\' carry #@(main@37)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@38)'+ __context() + '\n';
_str_main+=__indent() +'# macro reset32() : reset 16 bits value of the head of stack #@(main@39)'+ __context() + '\n';
_str_main+=__indent() +'# macro resetv32(name) : reset 16 bits variable \'name\' #@(main@40)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@41)'+ __context() + '\n';
_str_main+=__indent() +'# macro set32(immValue) : set 16 bits value on the head of stack #@(main@42)'+ __context() + '\n';
_str_main+=__indent() +'# macro setv32(name, immValue) : set 16 bits immediate value to a 16 bits variable \'name\' #@(main@43)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@44)'+ __context() + '\n';
_str_main+=__indent() +'# macro bool32() : same as \'bool\' but with a 16 bits value on stack #@(main@45)'+ __context() + '\n';
_str_main+=__indent() +'# macro boolv32(name) : push on stack the bool(name) 16 bits #@(main@46)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@47)'+ __context() + '\n';
_str_main+=__indent() +'# macro incv32(name) : name = name +1 (16 bits) #@(main@48)'+ __context() + '\n';
_str_main+=__indent() +'# macro inc32() : 16 bits head of stack value incremented #@(main@49)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@50)'+ __context() + '\n';
_str_main+=__indent() +'# macro decv32(name) : name-- (16 bits) #@(main@51)'+ __context() + '\n';
_str_main+=__indent() +'# macro dec32() : 16 bits head of stack value decrement #@(main@52)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@53)'+ __context() + '\n';
_str_main+=__indent() +'# macro addvi32(name, immValue) : name += immediate value #@(main@54)'+ __context() + '\n';
_str_main+=__indent() +'# macro addi32(immValue) : 16 bits head of stack value += immediate value #@(main@55)'+ __context() + '\n';
_str_main+=__indent() +'# macro addvvv32(name, nameA, nameB) : name = nameA + nameB #@(main@56)'+ __context() + '\n';
_str_main+=__indent() +'# macro addvv32(name, nameA) : name += nameA #@(main@57)'+ __context() + '\n';
_str_main+=__indent() +'# macro addv32(nameA) : head stack += nameA #@(main@58)'+ __context() + '\n';
_str_main+=__indent() +'# macro add32() : stack-1 = stack-1 + stack ; stack-- #@(main@59)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@60)'+ __context() + '\n';
_str_main+=__indent() +'# macro subvi32(name, immValue) : name -= immediate value #@(main@61)'+ __context() + '\n';
_str_main+=__indent() +'# macro subi32(immValue) : 16 bits head of stack value -= immediate value #@(main@62)'+ __context() + '\n';
_str_main+=__indent() +'# macro subvvv32(name, nameA, nameB) : name = nameA - nameB #@(main@63)'+ __context() + '\n';
_str_main+=__indent() +'# macro subvv32(name, nameA) : name -= nameA #@(main@64)'+ __context() + '\n';
_str_main+=__indent() +'# macro subv32(nameA) : head stack -= nameA #@(main@65)'+ __context() + '\n';
_str_main+=__indent() +'# macro sub32() : stack-1 = stack-1 - stack ; stack-- #@(main@66)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@67)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulvvv32(name, nameA, nameB) : name = nameA * nameB #@(main@68)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulvv32(name, nameA) : name *= nameA #@(main@69)'+ __context() + '\n';
_str_main+=__indent() +'# macro mulv32(name) : head of stack *= name #@(main@70)'+ __context() + '\n';
_str_main+=__indent() +'# macro mul32() : stack-1 = stack-1 * stack : stack-- #@(main@71)'+ __context() + '\n';
var large;large='8'; large=(isNaN(large*1))?(large):(large*1); 
_str_main+=__indent() +' #@(main@73)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_begin' + '\n';
__context__.push('(main@74)');
_str_main+=scope_begin();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_begin' + '\n';
_str_main+=__indent() +'#(begin macro)lvar32  var1' + '\n';
__context__.push('(main@75)');
_str_main+=lvar32(((isNaN(('var1')*1))?('var1'):(('var1')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar32  var1' + '\n';
_str_main+=__indent() +'#(begin macro)lvar32  var3' + '\n';
__context__.push('(main@76)');
_str_main+=lvar32(((isNaN(('var3')*1))?('var3'):(('var3')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar32  var3' + '\n';
_str_main+=__indent() +'#(begin macro)lvar32  var4' + '\n';
__context__.push('(main@77)');
_str_main+=lvar32(((isNaN(('var4')*1))?('var4'):(('var4')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar32  var4' + '\n';
_str_main+=__indent() +'#(begin macro)lvar32  var5' + '\n';
__context__.push('(main@78)');
_str_main+=lvar32(((isNaN(('var5')*1))?('var5'):(('var5')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvar32  var5' + '\n';
_str_main+=__indent() +'#(begin macro)lvarX   ' + (large) + ',    var6A' + '\n';
__context__.push('(main@79)');
_str_main+=lvarX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvarX   ' + (large) + ',    var6A' + '\n';
_str_main+=__indent() +'#(begin macro)lvarX   ' + (large) + ',    var6B' + '\n';
__context__.push('(main@80)');
_str_main+=lvarX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6B')*1))?('var6B'):(('var6B')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvarX   ' + (large) + ',    var6B' + '\n';
_str_main+=__indent() +'#(begin macro)lvarX   ' + (large) + ',    var6C' + '\n';
__context__.push('(main@81)');
_str_main+=lvarX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6C')*1))?('var6C'):(('var6C')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)lvarX   ' + (large) + ',    var6C' + '\n';
_str_main+=__indent() +' #@(main@82)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("setvX ' + (large) + ',var6A, -1:")' + '\n';
__context__.push('(main@83)');
_str_main+=print("setvX large,var6A, -1:");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("setvX ' + (large) + ',var6A, -1:")' + '\n';
_str_main+=__indent() +'#(begin macro)setvX   ' + (large) + ',var6A, -1' + '\n';
__context__.push('(main@84)');
_str_main+=setvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)),((isNaN(('-1')*1))?('-1'):(('-1')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)setvX   ' + (large) + ',var6A, -1' + '\n';
_str_main+=__indent() +'#(begin macro)printhexaX  ' + (large) + ',  var6A' + '\n';
__context__.push('(main@85)');
_str_main+=printhexaX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)printhexaX  ' + (large) + ',  var6A' + '\n';
_str_main+=__indent() +' #@(main@86)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("mulof : FF * FF = ")' + '\n';
__context__.push('(main@87)');
_str_main+=print("mulof : FF * FF = ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("mulof : FF * FF = ")' + '\n';
_str_main+=__indent() +'push    255 #@(main@88)'+ __context() + '\n';
_str_main+=__indent() +'push    255 #@(main@89)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)mulof' + '\n';
__context__.push('(main@90)');
_str_main+=mulof();
__context__.pop();
_str_main+=__indent() +'#(end macro)mulof' + '\n';
_str_main+=__indent() +'swap #@(main@91)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)popout8hexa' + '\n';
__context__.push('(main@92)');
_str_main+=popout8hexa();
__context__.pop();
_str_main+=__indent() +'#(end macro)popout8hexa' + '\n';
_str_main+=__indent() +'#(begin macro)popout8hexa' + '\n';
__context__.push('(main@93)');
_str_main+=popout8hexa();
__context__.pop();
_str_main+=__indent() +'#(end macro)popout8hexa' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@94)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +' #@(main@95)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)setv32  var1,   100000' + '\n';
__context__.push('(main@96)');
_str_main+=setv32(((isNaN(('var1')*1))?('var1'):(('var1')*1)),((isNaN(('100000')*1))?('100000'):(('100000')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)setv32  var1,   100000' + '\n';
_str_main+=__indent() +'#(begin macro)setv32  var3,   0' + '\n';
__context__.push('(main@97)');
_str_main+=setv32(((isNaN(('var3')*1))?('var3'):(('var3')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)setv32  var3,   0' + '\n';
_str_main+=__indent() +'#(begin macro)setvX   ' + (large) + ',  var6A,  688128  # A 80 00' + '\n';
__context__.push('(main@98)');
_str_main+=setvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)),((isNaN(('688128')*1))?('688128'):(('688128')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)setvX   ' + (large) + ',  var6A,  688128  # A 80 00' + '\n';
_str_main+=__indent() +'#(begin macro)setvX   ' + (large) + ',  var6B,  256  #131072  # 2 00 00' + '\n';
__context__.push('(main@99)');
_str_main+=setvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6B')*1))?('var6B'):(('var6B')*1)),((isNaN(('256')*1))?('256'):(('256')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)setvX   ' + (large) + ',  var6B,  256  #131072  # 2 00 00' + '\n';
_str_main+=__indent() +'#(begin macro)setvX   ' + (large) + ',  var6C,  0       # 2 00 00' + '\n';
__context__.push('(main@100)');
_str_main+=setvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6C')*1))?('var6C'):(('var6C')*1)),((isNaN(('0')*1))?('0'):(('0')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)setvX   ' + (large) + ',  var6C,  0       # 2 00 00' + '\n';
_str_main+=__indent() +'#(begin macro)print("quick mul :")' + '\n';
__context__.push('(main@101)');
_str_main+=print("quick mul :");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("quick mul :")' + '\n';
_str_main+=__indent() +'#(begin macro)printhexaX  ' + (large) + ',  var6A' + '\n';
__context__.push('(main@102)');
_str_main+=printhexaX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)printhexaX  ' + (large) + ',  var6A' + '\n';
_str_main+=__indent() +'#(begin macro)print(" * ")' + '\n';
__context__.push('(main@103)');
_str_main+=print(" * ");
__context__.pop();
_str_main+=__indent() +'#(end macro)print(" * ")' + '\n';
_str_main+=__indent() +'#(begin macro)printhexaX  ' + (large) + ',  var6B' + '\n';
__context__.push('(main@104)');
_str_main+=printhexaX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6B')*1))?('var6B'):(('var6B')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)printhexaX  ' + (large) + ',  var6B' + '\n';
_str_main+=__indent() +'#(begin macro)print("=")' + '\n';
__context__.push('(main@105)');
_str_main+=print("=");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("=")' + '\n';
_str_main+=__indent() +'push    1 #@(main@106)'+ __context() + '\n';
_str_main+=__indent() +'sbm     looper1 #@(main@107)'+ __context() + '\n';
_str_main+=__indent() +'while #@(main@108)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)boolvX  ' + (large) + ', var6B' + '\n';
__context__.push('(main@109)');
_str_main+=boolvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6B')*1))?('var6B'):(('var6B')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)boolvX  ' + (large) + ', var6B' + '\n';
_str_main+=__indent() +'if #@(main@110)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'#(begin macro)addvvX  ' + (large) + ',  var6C,  var6A' + '\n';
__context__.push('(main@111)');
_str_main+=addvvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6C')*1))?('var6C'):(('var6C')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)addvvX  ' + (large) + ',  var6C,  var6A' + '\n';
_str_main+=__indent() +'# print("\\n[") #@(main@112)'+ __context() + '\n';
_str_main+=__indent() +'# printhexaX  ' + (large) + ',    var6B #@(main@113)'+ __context() + '\n';
_str_main+=__indent() +'# print(":") #@(main@114)'+ __context() + '\n';
_str_main+=__indent() +'# printhexaX  ' + (large) + ',    var6C #@(main@115)'+ __context() + '\n';
_str_main+=__indent() +'# print("]") #@(main@116)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)decvX  ' + (large) + ',   var6B' + '\n';
__context__.push('(main@117)');
_str_main+=decvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6B')*1))?('var6B'):(('var6B')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)decvX  ' + (large) + ',   var6B' + '\n';
__blockLevel__--;
_str_main+=__indent() +'else #@(main@118)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'at  looper1 #@(main@119)'+ __context() + '\n';
__blockLevel__++;
_str_main+=__indent() +'reset #@(main@120)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'ta #@(main@121)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'fi #@(main@122)'+ __context() + '\n';
__blockLevel__--;
_str_main+=__indent() +'wend #@(main@123)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)printhexaX  ' + (large) + ',  var6C' + '\n';
__context__.push('(main@124)');
_str_main+=printhexaX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6C')*1))?('var6C'):(('var6C')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)printhexaX  ' + (large) + ',  var6C' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@125)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +' #@(main@126)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)setvX(large,"var6A",16777216)  # FF FF' + '\n';
__context__.push('(main@127)');
_str_main+=setvX(large,"var6A",16777216);
__context__.pop();
_str_main+=__indent() +'#(end macro)setvX(large,"var6A",16777216)  # FF FF' + '\n';
_str_main+=__indent() +'#(begin macro)setvX(large,"var6B",16777216)  # 0A' + '\n';
__context__.push('(main@128)');
_str_main+=setvX(large,"var6B",16777216);
__context__.pop();
_str_main+=__indent() +'#(end macro)setvX(large,"var6B",16777216)  # 0A' + '\n';
_str_main+=__indent() +'#(begin macro)print("1000000 + 1000000=")' + '\n';
__context__.push('(main@129)');
_str_main+=print("1000000 + 1000000=");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("1000000 + 1000000=")' + '\n';
_str_main+=__indent() +'#(begin macro)addvvvX(large, "var6C", "var6A","var6B")' + '\n';
__context__.push('(main@130)');
_str_main+=addvvvX(large, "var6C", "var6A","var6B");
__context__.pop();
_str_main+=__indent() +'#(end macro)addvvvX(large, "var6C", "var6A","var6B")' + '\n';
_str_main+=__indent() +'#(begin macro)printhexaX(large, "var6C")' + '\n';
__context__.push('(main@131)');
_str_main+=printhexaX(large, "var6C");
__context__.pop();
_str_main+=__indent() +'#(end macro)printhexaX(large, "var6C")' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@132)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +' #@(main@133)'+ __context() + '\n';
_str_main+=__indent() +' #@(main@134)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)setvX   ' + (large) + ',  var6A,  -65535  # FF FF' + '\n';
__context__.push('(main@135)');
_str_main+=setvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)),((isNaN(('-65535')*1))?('-65535'):(('-65535')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)setvX   ' + (large) + ',  var6A,  -65535  # FF FF' + '\n';
_str_main+=__indent() +'#(begin macro)setvX   ' + (large) + ',  var6B,  65535  # FF FF' + '\n';
__context__.push('(main@136)');
_str_main+=setvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6B')*1))?('var6B'):(('var6B')*1)),((isNaN(('65535')*1))?('65535'):(('65535')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)setvX   ' + (large) + ',  var6B,  65535  # FF FF' + '\n';
_str_main+=__indent() +'#pushX   ' + (large) + ',  -65535 #@(main@137)'+ __context() + '\n';
_str_main+=__indent() +'#popvX   ' + (large) + ',  var6A #@(main@138)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)print("var6A=")' + '\n';
__context__.push('(main@139)');
_str_main+=print("var6A=");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("var6A=")' + '\n';
_str_main+=__indent() +'#(begin macro)printhexaX  ' + (large) + ',  var6A' + '\n';
__context__.push('(main@140)');
_str_main+=printhexaX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)printhexaX  ' + (large) + ',  var6A' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@141)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +'#(begin macro)print("FFFF * FFFF=")' + '\n';
__context__.push('(main@142)');
_str_main+=print("FFFF * FFFF=");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("FFFF * FFFF=")' + '\n';
_str_main+=__indent() +'#(begin macro)mulvvvX ' + (large) + ',  var6C,  var6A,  var6B' + '\n';
__context__.push('(main@143)');
_str_main+=mulvvvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6C')*1))?('var6C'):(('var6C')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)),((isNaN(('var6B')*1))?('var6B'):(('var6B')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)mulvvvX ' + (large) + ',  var6C,  var6A,  var6B' + '\n';
_str_main+=__indent() +'#(begin macro)printhexaX  ' + (large) + ',  var6C' + '\n';
__context__.push('(main@144)');
_str_main+=printhexaX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6C')*1))?('var6C'):(('var6C')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)printhexaX  ' + (large) + ',  var6C' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@145)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +' #@(main@146)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)setvX   ' + (large) + ',  var6A,  688128  # A 80 00' + '\n';
__context__.push('(main@147)');
_str_main+=setvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)),((isNaN(('688128')*1))?('688128'):(('688128')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)setvX   ' + (large) + ',  var6A,  688128  # A 80 00' + '\n';
_str_main+=__indent() +'#(begin macro)setvX   ' + (large) + ',  var6B,  131072  # 2 00 00' + '\n';
__context__.push('(main@148)');
_str_main+=setvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6B')*1))?('var6B'):(('var6B')*1)),((isNaN(('131072')*1))?('131072'):(('131072')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)setvX   ' + (large) + ',  var6B,  131072  # 2 00 00' + '\n';
_str_main+=__indent() +'#(begin macro)print("A8000 * 20000=")' + '\n';
__context__.push('(main@149)');
_str_main+=print("A8000 * 20000=");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("A8000 * 20000=")' + '\n';
_str_main+=__indent() +'#(begin macro)mulvvvX ' + (large) + ',  var6C,  var6A,  var6B' + '\n';
__context__.push('(main@150)');
_str_main+=mulvvvX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6C')*1))?('var6C'):(('var6C')*1)),((isNaN(('var6A')*1))?('var6A'):(('var6A')*1)),((isNaN(('var6B')*1))?('var6B'):(('var6B')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)mulvvvX ' + (large) + ',  var6C,  var6A,  var6B' + '\n';
_str_main+=__indent() +'#(begin macro)printhexaX  ' + (large) + ',  var6C' + '\n';
__context__.push('(main@151)');
_str_main+=printhexaX(((isNaN(('' + (large) + '')*1))?('' + (large) + ''):(('' + (large) + '')*1)),((isNaN(('var6C')*1))?('var6C'):(('var6C')*1)));
__context__.pop();
_str_main+=__indent() +'#(end macro)printhexaX  ' + (large) + ',  var6C' + '\n';
_str_main+=__indent() +'#(begin macro)print("\\n")' + '\n';
__context__.push('(main@152)');
_str_main+=print("\n");
__context__.pop();
_str_main+=__indent() +'#(end macro)print("\\n")' + '\n';
_str_main+=__indent() +' #@(main@153)'+ __context() + '\n';
_str_main+=__indent() +'#(begin macro)scope_end' + '\n';
__context__.push('(main@154)');
_str_main+=scope_end();
__context__.pop();
_str_main+=__indent() +'#(end macro)scope_end' + '\n';
return _str_main;
}
_main();
